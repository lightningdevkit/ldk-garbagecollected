#include <jni.h>
// On OSX jlong (ie long long) is not equivalent to int64_t, so we override here
#define int64_t jlong
#include "org_ldk_impl_bindings.h"
#include <lightning.h>
#include <string.h>
#include <stdatomic.h>
#include <stdlib.h>

#define LIKELY(v) __builtin_expect(!!(v), 1)
#define UNLIKELY(v) __builtin_expect(!!(v), 0)

#define DEBUG_PRINT(...) fprintf(stderr, __VA_ARGS__)
#define MALLOC(a, _) malloc(a)
#define FREE(p) if ((uint64_t)(p) > 4096) { free(p); }
#define CHECK_ACCESS(p)
#define CHECK_INNER_FIELD_ACCESS_OR_NULL(v)
#define DO_ASSERT(a) (void)(a)
#define CHECK(a)

static jmethodID ordinal_meth = NULL;
static jmethodID slicedef_meth = NULL;
static jclass slicedef_cls = NULL;
JNIEXPORT void Java_org_ldk_impl_bindings_init(JNIEnv * env, jclass _b, jclass enum_class, jclass slicedef_class) {
	ordinal_meth = (*env)->GetMethodID(env, enum_class, "ordinal", "()I");
	CHECK(ordinal_meth != NULL);
	slicedef_meth = (*env)->GetMethodID(env, slicedef_class, "<init>", "(JJJ)V");
	CHECK(slicedef_meth != NULL);
	slicedef_cls = (*env)->NewGlobalRef(env, slicedef_class);
	CHECK(slicedef_cls != NULL);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_deref_1bool (JNIEnv * env, jclass _a, jlong ptr) {
	return *((bool*)ptr);
}
JNIEXPORT jlong JNICALL Java_org_ldk_impl_bindings_deref_1long (JNIEnv * env, jclass _a, jlong ptr) {
	return *((long*)ptr);
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_free_1heap_1ptr (JNIEnv * env, jclass _a, jlong ptr) {
	FREE((void*)ptr);
}
JNIEXPORT jbyteArray JNICALL Java_org_ldk_impl_bindings_read_1bytes (JNIEnv * env, jclass _b, jlong ptr, jlong len) {
	jbyteArray ret_arr = (*env)->NewByteArray(env, len);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, len, (unsigned char*)ptr);
	return ret_arr;
}
JNIEXPORT jbyteArray JNICALL Java_org_ldk_impl_bindings_get_1u8_1slice_1bytes (JNIEnv * env, jclass _b, jlong slice_ptr) {
	LDKu8slice *slice = (LDKu8slice*)slice_ptr;
	jbyteArray ret_arr = (*env)->NewByteArray(env, slice->datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, slice->datalen, slice->data);
	return ret_arr;
}
JNIEXPORT int64_t impl_bindings_bytes_1to_1u8_1vec (JNIEnv * env, jclass _b, jbyteArray bytes) {
	LDKCVec_u8Z *vec = (LDKCVec_u8Z*)MALLOC(sizeof(LDKCVec_u8Z), "LDKCVec_u8");
	vec->datalen = (*env)->GetArrayLength(env, bytes);
	vec->data = (uint8_t*)MALLOC(vec->datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion (env, bytes, 0, vec->datalen, vec->data);
	return (uint64_t)vec;
}
JNIEXPORT jbyteArray JNICALL Java_org_ldk_impl_bindings_txpointer_1get_1buffer (JNIEnv * env, jclass _b, jlong ptr) {
	LDKTransaction *txdata = (LDKTransaction*)ptr;
	LDKu8slice slice;
	slice.data = txdata->data;
	slice.datalen = txdata->datalen;
	return Java_org_ldk_impl_bindings_get_1u8_1slice_1bytes(env, _b, (uint64_t)&slice);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_new_1txpointer_1copy_1data (JNIEnv * env, jclass _b, jbyteArray bytes) {
	LDKTransaction *txdata = (LDKTransaction*)MALLOC(sizeof(LDKTransaction), "LDKTransaction");
	txdata->datalen = (*env)->GetArrayLength(env, bytes);
	txdata->data = (uint8_t*)MALLOC(txdata->datalen, "Tx Data Bytes");
	txdata->data_is_owned = false;
	(*env)->GetByteArrayRegion (env, bytes, 0, txdata->datalen, txdata->data);
	return (uint64_t)txdata;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_txpointer_1free (JNIEnv * env, jclass _b, jlong ptr) {
	LDKTransaction *tx = (LDKTransaction*)ptr;
	tx->data_is_owned = true;
	Transaction_free(*tx);
	FREE((void*)ptr);
}
JNIEXPORT jlong JNICALL Java_org_ldk_impl_bindings_vec_1slice_1len (JNIEnv * env, jclass _a, jlong ptr) {
	// Check offsets of a few Vec types are all consistent as we're meant to be generic across types
	_Static_assert(offsetof(LDKCVec_u8Z, datalen) == offsetof(LDKCVec_SignatureZ, datalen), "Vec<*> needs to be mapped identically");
	_Static_assert(offsetof(LDKCVec_u8Z, datalen) == offsetof(LDKCVec_MessageSendEventZ, datalen), "Vec<*> needs to be mapped identically");
	_Static_assert(offsetof(LDKCVec_u8Z, datalen) == offsetof(LDKCVec_EventZ, datalen), "Vec<*> needs to be mapped identically");
	_Static_assert(offsetof(LDKCVec_u8Z, datalen) == offsetof(LDKCVec_C2Tuple_usizeTransactionZZ, datalen), "Vec<*> needs to be mapped identically");
	LDKCVec_u8Z *vec = (LDKCVec_u8Z*)ptr;
	return (uint64_t)vec->datalen;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_new_1empty_1slice_1vec (JNIEnv * env, jclass _b) {
	// Check sizes of a few Vec types are all consistent as we're meant to be generic across types
	_Static_assert(sizeof(LDKCVec_u8Z) == sizeof(LDKCVec_SignatureZ), "Vec<*> needs to be mapped identically");
	_Static_assert(sizeof(LDKCVec_u8Z) == sizeof(LDKCVec_MessageSendEventZ), "Vec<*> needs to be mapped identically");
	_Static_assert(sizeof(LDKCVec_u8Z) == sizeof(LDKCVec_EventZ), "Vec<*> needs to be mapped identically");
	_Static_assert(sizeof(LDKCVec_u8Z) == sizeof(LDKCVec_C2Tuple_usizeTransactionZZ), "Vec<*> needs to be mapped identically");
	LDKCVec_u8Z *vec = (LDKCVec_u8Z*)MALLOC(sizeof(LDKCVec_u8Z), "Empty LDKCVec");
	vec->data = NULL;
	vec->datalen = 0;
	return (uint64_t)vec;
}

// We assume that CVec_u8Z and u8slice are the same size and layout (and thus pointers to the two can be mixed)
_Static_assert(sizeof(LDKCVec_u8Z) == sizeof(LDKu8slice), "Vec<u8> and [u8] need to have been mapped identically");
_Static_assert(offsetof(LDKCVec_u8Z, data) == offsetof(LDKu8slice, data), "Vec<u8> and [u8] need to have been mapped identically");
_Static_assert(offsetof(LDKCVec_u8Z, datalen) == offsetof(LDKu8slice, datalen), "Vec<u8> and [u8] need to have been mapped identically");

_Static_assert(sizeof(jlong) == sizeof(int64_t), "We assume that j-types are the same as C types");
_Static_assert(sizeof(jbyte) == sizeof(char), "We assume that j-types are the same as C types");
_Static_assert(sizeof(void*) <= 8, "Pointers must fit into 64 bits");

typedef jlongArray int64_tArray;
typedef jbyteArray int8_tArray;

static inline jstring str_ref_to_java(JNIEnv *env, const char* chars, size_t len) {
	// Sadly we need to create a temporary because Java can't accept a char* without a 0-terminator
	char* conv_buf = MALLOC(len + 1, "str conv buf");
	memcpy(conv_buf, chars, len);
	conv_buf[len] = 0;
	jstring ret = (*env)->NewStringUTF(env, conv_buf);
	FREE(conv_buf);
	return ret;
}
static inline LDKStr java_to_owned_str(JNIEnv *env, jstring str) {
	uint64_t str_len = (*env)->GetStringUTFLength(env, str);
	char* newchars = MALLOC(str_len + 1, "String chars");
	const char* jchars = (*env)->GetStringUTFChars(env, str, NULL);
	memcpy(newchars, jchars, str_len);
	newchars[str_len] = 0;
	(*env)->ReleaseStringUTFChars(env, str, jchars);
	LDKStr res = {
		.chars = newchars,
		.len = str_len,
		.chars_is_owned = true
	};
	return res;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_get_1ldk_1c_1bindings_1version(JNIEnv *env, jclass _c) {
	return str_ref_to_java(env, check_get_ldk_bindings_version(), strlen(check_get_ldk_bindings_version()));
}
JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_get_1ldk_1version(JNIEnv *env, jclass _c) {
	return str_ref_to_java(env, check_get_ldk_version(), strlen(check_get_ldk_version()));
}
#include "version.c"
static jclass arr_of_B_clz = NULL;
static jclass arr_of_J_clz = NULL;
JNIEXPORT void Java_org_ldk_impl_bindings_init_1class_1cache(JNIEnv * env, jclass clz) {
	arr_of_B_clz = (*env)->FindClass(env, "[B");
	CHECK(arr_of_B_clz != NULL);
	arr_of_B_clz = (*env)->NewGlobalRef(env, arr_of_B_clz);
	arr_of_J_clz = (*env)->FindClass(env, "[J");
	CHECK(arr_of_J_clz != NULL);
	arr_of_J_clz = (*env)->NewGlobalRef(env, arr_of_J_clz);
}
static inline struct LDKThirtyTwoBytes ThirtyTwoBytes_clone(const struct LDKThirtyTwoBytes *orig) { struct LDKThirtyTwoBytes ret; memcpy(ret.data, orig->data, 32); return ret; }
static inline LDKAccessError LDKAccessError_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to AccessError.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKAccessError_UnknownChain;
		case 1: return LDKAccessError_UnknownTx;
	}
	(*env)->FatalError(env, "A call to AccessError.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass AccessError_class = NULL;
static jfieldID AccessError_LDKAccessError_UnknownChain = NULL;
static jfieldID AccessError_LDKAccessError_UnknownTx = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_AccessError_init (JNIEnv *env, jclass clz) {
	AccessError_class = (*env)->NewGlobalRef(env, clz);
	CHECK(AccessError_class != NULL);
	AccessError_LDKAccessError_UnknownChain = (*env)->GetStaticFieldID(env, AccessError_class, "LDKAccessError_UnknownChain", "Lorg/ldk/enums/AccessError;");
	CHECK(AccessError_LDKAccessError_UnknownChain != NULL);
	AccessError_LDKAccessError_UnknownTx = (*env)->GetStaticFieldID(env, AccessError_class, "LDKAccessError_UnknownTx", "Lorg/ldk/enums/AccessError;");
	CHECK(AccessError_LDKAccessError_UnknownTx != NULL);
}
static inline jclass LDKAccessError_to_java(JNIEnv *env, LDKAccessError val) {
	switch (val) {
		case LDKAccessError_UnknownChain:
			return (*env)->GetStaticObjectField(env, AccessError_class, AccessError_LDKAccessError_UnknownChain);
		case LDKAccessError_UnknownTx:
			return (*env)->GetStaticObjectField(env, AccessError_class, AccessError_LDKAccessError_UnknownTx);
		default: abort();
	}
}

static inline LDKCOption_NoneZ LDKCOption_NoneZ_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to COption_NoneZ.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKCOption_NoneZ_Some;
		case 1: return LDKCOption_NoneZ_None;
	}
	(*env)->FatalError(env, "A call to COption_NoneZ.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass COption_NoneZ_class = NULL;
static jfieldID COption_NoneZ_LDKCOption_NoneZ_Some = NULL;
static jfieldID COption_NoneZ_LDKCOption_NoneZ_None = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_COption_1NoneZ_init (JNIEnv *env, jclass clz) {
	COption_NoneZ_class = (*env)->NewGlobalRef(env, clz);
	CHECK(COption_NoneZ_class != NULL);
	COption_NoneZ_LDKCOption_NoneZ_Some = (*env)->GetStaticFieldID(env, COption_NoneZ_class, "LDKCOption_NoneZ_Some", "Lorg/ldk/enums/COption_NoneZ;");
	CHECK(COption_NoneZ_LDKCOption_NoneZ_Some != NULL);
	COption_NoneZ_LDKCOption_NoneZ_None = (*env)->GetStaticFieldID(env, COption_NoneZ_class, "LDKCOption_NoneZ_None", "Lorg/ldk/enums/COption_NoneZ;");
	CHECK(COption_NoneZ_LDKCOption_NoneZ_None != NULL);
}
static inline jclass LDKCOption_NoneZ_to_java(JNIEnv *env, LDKCOption_NoneZ val) {
	switch (val) {
		case LDKCOption_NoneZ_Some:
			return (*env)->GetStaticObjectField(env, COption_NoneZ_class, COption_NoneZ_LDKCOption_NoneZ_Some);
		case LDKCOption_NoneZ_None:
			return (*env)->GetStaticObjectField(env, COption_NoneZ_class, COption_NoneZ_LDKCOption_NoneZ_None);
		default: abort();
	}
}

static inline LDKChannelMonitorUpdateErr LDKChannelMonitorUpdateErr_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to ChannelMonitorUpdateErr.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKChannelMonitorUpdateErr_TemporaryFailure;
		case 1: return LDKChannelMonitorUpdateErr_PermanentFailure;
	}
	(*env)->FatalError(env, "A call to ChannelMonitorUpdateErr.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass ChannelMonitorUpdateErr_class = NULL;
static jfieldID ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_TemporaryFailure = NULL;
static jfieldID ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_PermanentFailure = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_ChannelMonitorUpdateErr_init (JNIEnv *env, jclass clz) {
	ChannelMonitorUpdateErr_class = (*env)->NewGlobalRef(env, clz);
	CHECK(ChannelMonitorUpdateErr_class != NULL);
	ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_TemporaryFailure = (*env)->GetStaticFieldID(env, ChannelMonitorUpdateErr_class, "LDKChannelMonitorUpdateErr_TemporaryFailure", "Lorg/ldk/enums/ChannelMonitorUpdateErr;");
	CHECK(ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_TemporaryFailure != NULL);
	ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_PermanentFailure = (*env)->GetStaticFieldID(env, ChannelMonitorUpdateErr_class, "LDKChannelMonitorUpdateErr_PermanentFailure", "Lorg/ldk/enums/ChannelMonitorUpdateErr;");
	CHECK(ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_PermanentFailure != NULL);
}
static inline jclass LDKChannelMonitorUpdateErr_to_java(JNIEnv *env, LDKChannelMonitorUpdateErr val) {
	switch (val) {
		case LDKChannelMonitorUpdateErr_TemporaryFailure:
			return (*env)->GetStaticObjectField(env, ChannelMonitorUpdateErr_class, ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_TemporaryFailure);
		case LDKChannelMonitorUpdateErr_PermanentFailure:
			return (*env)->GetStaticObjectField(env, ChannelMonitorUpdateErr_class, ChannelMonitorUpdateErr_LDKChannelMonitorUpdateErr_PermanentFailure);
		default: abort();
	}
}

static inline LDKConfirmationTarget LDKConfirmationTarget_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to ConfirmationTarget.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKConfirmationTarget_Background;
		case 1: return LDKConfirmationTarget_Normal;
		case 2: return LDKConfirmationTarget_HighPriority;
	}
	(*env)->FatalError(env, "A call to ConfirmationTarget.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass ConfirmationTarget_class = NULL;
static jfieldID ConfirmationTarget_LDKConfirmationTarget_Background = NULL;
static jfieldID ConfirmationTarget_LDKConfirmationTarget_Normal = NULL;
static jfieldID ConfirmationTarget_LDKConfirmationTarget_HighPriority = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_ConfirmationTarget_init (JNIEnv *env, jclass clz) {
	ConfirmationTarget_class = (*env)->NewGlobalRef(env, clz);
	CHECK(ConfirmationTarget_class != NULL);
	ConfirmationTarget_LDKConfirmationTarget_Background = (*env)->GetStaticFieldID(env, ConfirmationTarget_class, "LDKConfirmationTarget_Background", "Lorg/ldk/enums/ConfirmationTarget;");
	CHECK(ConfirmationTarget_LDKConfirmationTarget_Background != NULL);
	ConfirmationTarget_LDKConfirmationTarget_Normal = (*env)->GetStaticFieldID(env, ConfirmationTarget_class, "LDKConfirmationTarget_Normal", "Lorg/ldk/enums/ConfirmationTarget;");
	CHECK(ConfirmationTarget_LDKConfirmationTarget_Normal != NULL);
	ConfirmationTarget_LDKConfirmationTarget_HighPriority = (*env)->GetStaticFieldID(env, ConfirmationTarget_class, "LDKConfirmationTarget_HighPriority", "Lorg/ldk/enums/ConfirmationTarget;");
	CHECK(ConfirmationTarget_LDKConfirmationTarget_HighPriority != NULL);
}
static inline jclass LDKConfirmationTarget_to_java(JNIEnv *env, LDKConfirmationTarget val) {
	switch (val) {
		case LDKConfirmationTarget_Background:
			return (*env)->GetStaticObjectField(env, ConfirmationTarget_class, ConfirmationTarget_LDKConfirmationTarget_Background);
		case LDKConfirmationTarget_Normal:
			return (*env)->GetStaticObjectField(env, ConfirmationTarget_class, ConfirmationTarget_LDKConfirmationTarget_Normal);
		case LDKConfirmationTarget_HighPriority:
			return (*env)->GetStaticObjectField(env, ConfirmationTarget_class, ConfirmationTarget_LDKConfirmationTarget_HighPriority);
		default: abort();
	}
}

static inline LDKCreationError LDKCreationError_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to CreationError.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKCreationError_DescriptionTooLong;
		case 1: return LDKCreationError_RouteTooLong;
		case 2: return LDKCreationError_TimestampOutOfBounds;
		case 3: return LDKCreationError_InvalidAmount;
		case 4: return LDKCreationError_MissingRouteHints;
	}
	(*env)->FatalError(env, "A call to CreationError.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass CreationError_class = NULL;
static jfieldID CreationError_LDKCreationError_DescriptionTooLong = NULL;
static jfieldID CreationError_LDKCreationError_RouteTooLong = NULL;
static jfieldID CreationError_LDKCreationError_TimestampOutOfBounds = NULL;
static jfieldID CreationError_LDKCreationError_InvalidAmount = NULL;
static jfieldID CreationError_LDKCreationError_MissingRouteHints = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_CreationError_init (JNIEnv *env, jclass clz) {
	CreationError_class = (*env)->NewGlobalRef(env, clz);
	CHECK(CreationError_class != NULL);
	CreationError_LDKCreationError_DescriptionTooLong = (*env)->GetStaticFieldID(env, CreationError_class, "LDKCreationError_DescriptionTooLong", "Lorg/ldk/enums/CreationError;");
	CHECK(CreationError_LDKCreationError_DescriptionTooLong != NULL);
	CreationError_LDKCreationError_RouteTooLong = (*env)->GetStaticFieldID(env, CreationError_class, "LDKCreationError_RouteTooLong", "Lorg/ldk/enums/CreationError;");
	CHECK(CreationError_LDKCreationError_RouteTooLong != NULL);
	CreationError_LDKCreationError_TimestampOutOfBounds = (*env)->GetStaticFieldID(env, CreationError_class, "LDKCreationError_TimestampOutOfBounds", "Lorg/ldk/enums/CreationError;");
	CHECK(CreationError_LDKCreationError_TimestampOutOfBounds != NULL);
	CreationError_LDKCreationError_InvalidAmount = (*env)->GetStaticFieldID(env, CreationError_class, "LDKCreationError_InvalidAmount", "Lorg/ldk/enums/CreationError;");
	CHECK(CreationError_LDKCreationError_InvalidAmount != NULL);
	CreationError_LDKCreationError_MissingRouteHints = (*env)->GetStaticFieldID(env, CreationError_class, "LDKCreationError_MissingRouteHints", "Lorg/ldk/enums/CreationError;");
	CHECK(CreationError_LDKCreationError_MissingRouteHints != NULL);
}
static inline jclass LDKCreationError_to_java(JNIEnv *env, LDKCreationError val) {
	switch (val) {
		case LDKCreationError_DescriptionTooLong:
			return (*env)->GetStaticObjectField(env, CreationError_class, CreationError_LDKCreationError_DescriptionTooLong);
		case LDKCreationError_RouteTooLong:
			return (*env)->GetStaticObjectField(env, CreationError_class, CreationError_LDKCreationError_RouteTooLong);
		case LDKCreationError_TimestampOutOfBounds:
			return (*env)->GetStaticObjectField(env, CreationError_class, CreationError_LDKCreationError_TimestampOutOfBounds);
		case LDKCreationError_InvalidAmount:
			return (*env)->GetStaticObjectField(env, CreationError_class, CreationError_LDKCreationError_InvalidAmount);
		case LDKCreationError_MissingRouteHints:
			return (*env)->GetStaticObjectField(env, CreationError_class, CreationError_LDKCreationError_MissingRouteHints);
		default: abort();
	}
}

static inline LDKCurrency LDKCurrency_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to Currency.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKCurrency_Bitcoin;
		case 1: return LDKCurrency_BitcoinTestnet;
		case 2: return LDKCurrency_Regtest;
		case 3: return LDKCurrency_Simnet;
		case 4: return LDKCurrency_Signet;
	}
	(*env)->FatalError(env, "A call to Currency.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass Currency_class = NULL;
static jfieldID Currency_LDKCurrency_Bitcoin = NULL;
static jfieldID Currency_LDKCurrency_BitcoinTestnet = NULL;
static jfieldID Currency_LDKCurrency_Regtest = NULL;
static jfieldID Currency_LDKCurrency_Simnet = NULL;
static jfieldID Currency_LDKCurrency_Signet = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_Currency_init (JNIEnv *env, jclass clz) {
	Currency_class = (*env)->NewGlobalRef(env, clz);
	CHECK(Currency_class != NULL);
	Currency_LDKCurrency_Bitcoin = (*env)->GetStaticFieldID(env, Currency_class, "LDKCurrency_Bitcoin", "Lorg/ldk/enums/Currency;");
	CHECK(Currency_LDKCurrency_Bitcoin != NULL);
	Currency_LDKCurrency_BitcoinTestnet = (*env)->GetStaticFieldID(env, Currency_class, "LDKCurrency_BitcoinTestnet", "Lorg/ldk/enums/Currency;");
	CHECK(Currency_LDKCurrency_BitcoinTestnet != NULL);
	Currency_LDKCurrency_Regtest = (*env)->GetStaticFieldID(env, Currency_class, "LDKCurrency_Regtest", "Lorg/ldk/enums/Currency;");
	CHECK(Currency_LDKCurrency_Regtest != NULL);
	Currency_LDKCurrency_Simnet = (*env)->GetStaticFieldID(env, Currency_class, "LDKCurrency_Simnet", "Lorg/ldk/enums/Currency;");
	CHECK(Currency_LDKCurrency_Simnet != NULL);
	Currency_LDKCurrency_Signet = (*env)->GetStaticFieldID(env, Currency_class, "LDKCurrency_Signet", "Lorg/ldk/enums/Currency;");
	CHECK(Currency_LDKCurrency_Signet != NULL);
}
static inline jclass LDKCurrency_to_java(JNIEnv *env, LDKCurrency val) {
	switch (val) {
		case LDKCurrency_Bitcoin:
			return (*env)->GetStaticObjectField(env, Currency_class, Currency_LDKCurrency_Bitcoin);
		case LDKCurrency_BitcoinTestnet:
			return (*env)->GetStaticObjectField(env, Currency_class, Currency_LDKCurrency_BitcoinTestnet);
		case LDKCurrency_Regtest:
			return (*env)->GetStaticObjectField(env, Currency_class, Currency_LDKCurrency_Regtest);
		case LDKCurrency_Simnet:
			return (*env)->GetStaticObjectField(env, Currency_class, Currency_LDKCurrency_Simnet);
		case LDKCurrency_Signet:
			return (*env)->GetStaticObjectField(env, Currency_class, Currency_LDKCurrency_Signet);
		default: abort();
	}
}

static inline LDKIOError LDKIOError_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to IOError.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKIOError_NotFound;
		case 1: return LDKIOError_PermissionDenied;
		case 2: return LDKIOError_ConnectionRefused;
		case 3: return LDKIOError_ConnectionReset;
		case 4: return LDKIOError_ConnectionAborted;
		case 5: return LDKIOError_NotConnected;
		case 6: return LDKIOError_AddrInUse;
		case 7: return LDKIOError_AddrNotAvailable;
		case 8: return LDKIOError_BrokenPipe;
		case 9: return LDKIOError_AlreadyExists;
		case 10: return LDKIOError_WouldBlock;
		case 11: return LDKIOError_InvalidInput;
		case 12: return LDKIOError_InvalidData;
		case 13: return LDKIOError_TimedOut;
		case 14: return LDKIOError_WriteZero;
		case 15: return LDKIOError_Interrupted;
		case 16: return LDKIOError_Other;
		case 17: return LDKIOError_UnexpectedEof;
	}
	(*env)->FatalError(env, "A call to IOError.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass IOError_class = NULL;
static jfieldID IOError_LDKIOError_NotFound = NULL;
static jfieldID IOError_LDKIOError_PermissionDenied = NULL;
static jfieldID IOError_LDKIOError_ConnectionRefused = NULL;
static jfieldID IOError_LDKIOError_ConnectionReset = NULL;
static jfieldID IOError_LDKIOError_ConnectionAborted = NULL;
static jfieldID IOError_LDKIOError_NotConnected = NULL;
static jfieldID IOError_LDKIOError_AddrInUse = NULL;
static jfieldID IOError_LDKIOError_AddrNotAvailable = NULL;
static jfieldID IOError_LDKIOError_BrokenPipe = NULL;
static jfieldID IOError_LDKIOError_AlreadyExists = NULL;
static jfieldID IOError_LDKIOError_WouldBlock = NULL;
static jfieldID IOError_LDKIOError_InvalidInput = NULL;
static jfieldID IOError_LDKIOError_InvalidData = NULL;
static jfieldID IOError_LDKIOError_TimedOut = NULL;
static jfieldID IOError_LDKIOError_WriteZero = NULL;
static jfieldID IOError_LDKIOError_Interrupted = NULL;
static jfieldID IOError_LDKIOError_Other = NULL;
static jfieldID IOError_LDKIOError_UnexpectedEof = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_IOError_init (JNIEnv *env, jclass clz) {
	IOError_class = (*env)->NewGlobalRef(env, clz);
	CHECK(IOError_class != NULL);
	IOError_LDKIOError_NotFound = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_NotFound", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_NotFound != NULL);
	IOError_LDKIOError_PermissionDenied = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_PermissionDenied", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_PermissionDenied != NULL);
	IOError_LDKIOError_ConnectionRefused = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_ConnectionRefused", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_ConnectionRefused != NULL);
	IOError_LDKIOError_ConnectionReset = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_ConnectionReset", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_ConnectionReset != NULL);
	IOError_LDKIOError_ConnectionAborted = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_ConnectionAborted", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_ConnectionAborted != NULL);
	IOError_LDKIOError_NotConnected = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_NotConnected", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_NotConnected != NULL);
	IOError_LDKIOError_AddrInUse = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_AddrInUse", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_AddrInUse != NULL);
	IOError_LDKIOError_AddrNotAvailable = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_AddrNotAvailable", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_AddrNotAvailable != NULL);
	IOError_LDKIOError_BrokenPipe = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_BrokenPipe", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_BrokenPipe != NULL);
	IOError_LDKIOError_AlreadyExists = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_AlreadyExists", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_AlreadyExists != NULL);
	IOError_LDKIOError_WouldBlock = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_WouldBlock", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_WouldBlock != NULL);
	IOError_LDKIOError_InvalidInput = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_InvalidInput", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_InvalidInput != NULL);
	IOError_LDKIOError_InvalidData = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_InvalidData", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_InvalidData != NULL);
	IOError_LDKIOError_TimedOut = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_TimedOut", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_TimedOut != NULL);
	IOError_LDKIOError_WriteZero = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_WriteZero", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_WriteZero != NULL);
	IOError_LDKIOError_Interrupted = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_Interrupted", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_Interrupted != NULL);
	IOError_LDKIOError_Other = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_Other", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_Other != NULL);
	IOError_LDKIOError_UnexpectedEof = (*env)->GetStaticFieldID(env, IOError_class, "LDKIOError_UnexpectedEof", "Lorg/ldk/enums/IOError;");
	CHECK(IOError_LDKIOError_UnexpectedEof != NULL);
}
static inline jclass LDKIOError_to_java(JNIEnv *env, LDKIOError val) {
	switch (val) {
		case LDKIOError_NotFound:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_NotFound);
		case LDKIOError_PermissionDenied:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_PermissionDenied);
		case LDKIOError_ConnectionRefused:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_ConnectionRefused);
		case LDKIOError_ConnectionReset:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_ConnectionReset);
		case LDKIOError_ConnectionAborted:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_ConnectionAborted);
		case LDKIOError_NotConnected:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_NotConnected);
		case LDKIOError_AddrInUse:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_AddrInUse);
		case LDKIOError_AddrNotAvailable:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_AddrNotAvailable);
		case LDKIOError_BrokenPipe:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_BrokenPipe);
		case LDKIOError_AlreadyExists:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_AlreadyExists);
		case LDKIOError_WouldBlock:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_WouldBlock);
		case LDKIOError_InvalidInput:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_InvalidInput);
		case LDKIOError_InvalidData:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_InvalidData);
		case LDKIOError_TimedOut:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_TimedOut);
		case LDKIOError_WriteZero:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_WriteZero);
		case LDKIOError_Interrupted:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_Interrupted);
		case LDKIOError_Other:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_Other);
		case LDKIOError_UnexpectedEof:
			return (*env)->GetStaticObjectField(env, IOError_class, IOError_LDKIOError_UnexpectedEof);
		default: abort();
	}
}

static inline LDKLevel LDKLevel_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to Level.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKLevel_Gossip;
		case 1: return LDKLevel_Trace;
		case 2: return LDKLevel_Debug;
		case 3: return LDKLevel_Info;
		case 4: return LDKLevel_Warn;
		case 5: return LDKLevel_Error;
	}
	(*env)->FatalError(env, "A call to Level.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass Level_class = NULL;
static jfieldID Level_LDKLevel_Gossip = NULL;
static jfieldID Level_LDKLevel_Trace = NULL;
static jfieldID Level_LDKLevel_Debug = NULL;
static jfieldID Level_LDKLevel_Info = NULL;
static jfieldID Level_LDKLevel_Warn = NULL;
static jfieldID Level_LDKLevel_Error = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_Level_init (JNIEnv *env, jclass clz) {
	Level_class = (*env)->NewGlobalRef(env, clz);
	CHECK(Level_class != NULL);
	Level_LDKLevel_Gossip = (*env)->GetStaticFieldID(env, Level_class, "LDKLevel_Gossip", "Lorg/ldk/enums/Level;");
	CHECK(Level_LDKLevel_Gossip != NULL);
	Level_LDKLevel_Trace = (*env)->GetStaticFieldID(env, Level_class, "LDKLevel_Trace", "Lorg/ldk/enums/Level;");
	CHECK(Level_LDKLevel_Trace != NULL);
	Level_LDKLevel_Debug = (*env)->GetStaticFieldID(env, Level_class, "LDKLevel_Debug", "Lorg/ldk/enums/Level;");
	CHECK(Level_LDKLevel_Debug != NULL);
	Level_LDKLevel_Info = (*env)->GetStaticFieldID(env, Level_class, "LDKLevel_Info", "Lorg/ldk/enums/Level;");
	CHECK(Level_LDKLevel_Info != NULL);
	Level_LDKLevel_Warn = (*env)->GetStaticFieldID(env, Level_class, "LDKLevel_Warn", "Lorg/ldk/enums/Level;");
	CHECK(Level_LDKLevel_Warn != NULL);
	Level_LDKLevel_Error = (*env)->GetStaticFieldID(env, Level_class, "LDKLevel_Error", "Lorg/ldk/enums/Level;");
	CHECK(Level_LDKLevel_Error != NULL);
}
static inline jclass LDKLevel_to_java(JNIEnv *env, LDKLevel val) {
	switch (val) {
		case LDKLevel_Gossip:
			return (*env)->GetStaticObjectField(env, Level_class, Level_LDKLevel_Gossip);
		case LDKLevel_Trace:
			return (*env)->GetStaticObjectField(env, Level_class, Level_LDKLevel_Trace);
		case LDKLevel_Debug:
			return (*env)->GetStaticObjectField(env, Level_class, Level_LDKLevel_Debug);
		case LDKLevel_Info:
			return (*env)->GetStaticObjectField(env, Level_class, Level_LDKLevel_Info);
		case LDKLevel_Warn:
			return (*env)->GetStaticObjectField(env, Level_class, Level_LDKLevel_Warn);
		case LDKLevel_Error:
			return (*env)->GetStaticObjectField(env, Level_class, Level_LDKLevel_Error);
		default: abort();
	}
}

static inline LDKNetwork LDKNetwork_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to Network.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKNetwork_Bitcoin;
		case 1: return LDKNetwork_Testnet;
		case 2: return LDKNetwork_Regtest;
		case 3: return LDKNetwork_Signet;
	}
	(*env)->FatalError(env, "A call to Network.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass Network_class = NULL;
static jfieldID Network_LDKNetwork_Bitcoin = NULL;
static jfieldID Network_LDKNetwork_Testnet = NULL;
static jfieldID Network_LDKNetwork_Regtest = NULL;
static jfieldID Network_LDKNetwork_Signet = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_Network_init (JNIEnv *env, jclass clz) {
	Network_class = (*env)->NewGlobalRef(env, clz);
	CHECK(Network_class != NULL);
	Network_LDKNetwork_Bitcoin = (*env)->GetStaticFieldID(env, Network_class, "LDKNetwork_Bitcoin", "Lorg/ldk/enums/Network;");
	CHECK(Network_LDKNetwork_Bitcoin != NULL);
	Network_LDKNetwork_Testnet = (*env)->GetStaticFieldID(env, Network_class, "LDKNetwork_Testnet", "Lorg/ldk/enums/Network;");
	CHECK(Network_LDKNetwork_Testnet != NULL);
	Network_LDKNetwork_Regtest = (*env)->GetStaticFieldID(env, Network_class, "LDKNetwork_Regtest", "Lorg/ldk/enums/Network;");
	CHECK(Network_LDKNetwork_Regtest != NULL);
	Network_LDKNetwork_Signet = (*env)->GetStaticFieldID(env, Network_class, "LDKNetwork_Signet", "Lorg/ldk/enums/Network;");
	CHECK(Network_LDKNetwork_Signet != NULL);
}
static inline jclass LDKNetwork_to_java(JNIEnv *env, LDKNetwork val) {
	switch (val) {
		case LDKNetwork_Bitcoin:
			return (*env)->GetStaticObjectField(env, Network_class, Network_LDKNetwork_Bitcoin);
		case LDKNetwork_Testnet:
			return (*env)->GetStaticObjectField(env, Network_class, Network_LDKNetwork_Testnet);
		case LDKNetwork_Regtest:
			return (*env)->GetStaticObjectField(env, Network_class, Network_LDKNetwork_Regtest);
		case LDKNetwork_Signet:
			return (*env)->GetStaticObjectField(env, Network_class, Network_LDKNetwork_Signet);
		default: abort();
	}
}

static inline LDKRecipient LDKRecipient_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to Recipient.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKRecipient_Node;
		case 1: return LDKRecipient_PhantomNode;
	}
	(*env)->FatalError(env, "A call to Recipient.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass Recipient_class = NULL;
static jfieldID Recipient_LDKRecipient_Node = NULL;
static jfieldID Recipient_LDKRecipient_PhantomNode = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_Recipient_init (JNIEnv *env, jclass clz) {
	Recipient_class = (*env)->NewGlobalRef(env, clz);
	CHECK(Recipient_class != NULL);
	Recipient_LDKRecipient_Node = (*env)->GetStaticFieldID(env, Recipient_class, "LDKRecipient_Node", "Lorg/ldk/enums/Recipient;");
	CHECK(Recipient_LDKRecipient_Node != NULL);
	Recipient_LDKRecipient_PhantomNode = (*env)->GetStaticFieldID(env, Recipient_class, "LDKRecipient_PhantomNode", "Lorg/ldk/enums/Recipient;");
	CHECK(Recipient_LDKRecipient_PhantomNode != NULL);
}
static inline jclass LDKRecipient_to_java(JNIEnv *env, LDKRecipient val) {
	switch (val) {
		case LDKRecipient_Node:
			return (*env)->GetStaticObjectField(env, Recipient_class, Recipient_LDKRecipient_Node);
		case LDKRecipient_PhantomNode:
			return (*env)->GetStaticObjectField(env, Recipient_class, Recipient_LDKRecipient_PhantomNode);
		default: abort();
	}
}

static inline LDKSecp256k1Error LDKSecp256k1Error_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to Secp256k1Error.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKSecp256k1Error_IncorrectSignature;
		case 1: return LDKSecp256k1Error_InvalidMessage;
		case 2: return LDKSecp256k1Error_InvalidPublicKey;
		case 3: return LDKSecp256k1Error_InvalidSignature;
		case 4: return LDKSecp256k1Error_InvalidSecretKey;
		case 5: return LDKSecp256k1Error_InvalidRecoveryId;
		case 6: return LDKSecp256k1Error_InvalidTweak;
		case 7: return LDKSecp256k1Error_TweakCheckFailed;
		case 8: return LDKSecp256k1Error_NotEnoughMemory;
	}
	(*env)->FatalError(env, "A call to Secp256k1Error.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass Secp256k1Error_class = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_IncorrectSignature = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_InvalidMessage = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_InvalidPublicKey = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_InvalidSignature = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_InvalidSecretKey = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_InvalidRecoveryId = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_InvalidTweak = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_TweakCheckFailed = NULL;
static jfieldID Secp256k1Error_LDKSecp256k1Error_NotEnoughMemory = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_Secp256k1Error_init (JNIEnv *env, jclass clz) {
	Secp256k1Error_class = (*env)->NewGlobalRef(env, clz);
	CHECK(Secp256k1Error_class != NULL);
	Secp256k1Error_LDKSecp256k1Error_IncorrectSignature = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_IncorrectSignature", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_IncorrectSignature != NULL);
	Secp256k1Error_LDKSecp256k1Error_InvalidMessage = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_InvalidMessage", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_InvalidMessage != NULL);
	Secp256k1Error_LDKSecp256k1Error_InvalidPublicKey = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_InvalidPublicKey", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_InvalidPublicKey != NULL);
	Secp256k1Error_LDKSecp256k1Error_InvalidSignature = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_InvalidSignature", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_InvalidSignature != NULL);
	Secp256k1Error_LDKSecp256k1Error_InvalidSecretKey = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_InvalidSecretKey", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_InvalidSecretKey != NULL);
	Secp256k1Error_LDKSecp256k1Error_InvalidRecoveryId = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_InvalidRecoveryId", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_InvalidRecoveryId != NULL);
	Secp256k1Error_LDKSecp256k1Error_InvalidTweak = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_InvalidTweak", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_InvalidTweak != NULL);
	Secp256k1Error_LDKSecp256k1Error_TweakCheckFailed = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_TweakCheckFailed", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_TweakCheckFailed != NULL);
	Secp256k1Error_LDKSecp256k1Error_NotEnoughMemory = (*env)->GetStaticFieldID(env, Secp256k1Error_class, "LDKSecp256k1Error_NotEnoughMemory", "Lorg/ldk/enums/Secp256k1Error;");
	CHECK(Secp256k1Error_LDKSecp256k1Error_NotEnoughMemory != NULL);
}
static inline jclass LDKSecp256k1Error_to_java(JNIEnv *env, LDKSecp256k1Error val) {
	switch (val) {
		case LDKSecp256k1Error_IncorrectSignature:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_IncorrectSignature);
		case LDKSecp256k1Error_InvalidMessage:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_InvalidMessage);
		case LDKSecp256k1Error_InvalidPublicKey:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_InvalidPublicKey);
		case LDKSecp256k1Error_InvalidSignature:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_InvalidSignature);
		case LDKSecp256k1Error_InvalidSecretKey:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_InvalidSecretKey);
		case LDKSecp256k1Error_InvalidRecoveryId:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_InvalidRecoveryId);
		case LDKSecp256k1Error_InvalidTweak:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_InvalidTweak);
		case LDKSecp256k1Error_TweakCheckFailed:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_TweakCheckFailed);
		case LDKSecp256k1Error_NotEnoughMemory:
			return (*env)->GetStaticObjectField(env, Secp256k1Error_class, Secp256k1Error_LDKSecp256k1Error_NotEnoughMemory);
		default: abort();
	}
}

static inline LDKSemanticError LDKSemanticError_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to SemanticError.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKSemanticError_NoPaymentHash;
		case 1: return LDKSemanticError_MultiplePaymentHashes;
		case 2: return LDKSemanticError_NoDescription;
		case 3: return LDKSemanticError_MultipleDescriptions;
		case 4: return LDKSemanticError_NoPaymentSecret;
		case 5: return LDKSemanticError_MultiplePaymentSecrets;
		case 6: return LDKSemanticError_InvalidFeatures;
		case 7: return LDKSemanticError_InvalidRecoveryId;
		case 8: return LDKSemanticError_InvalidSignature;
		case 9: return LDKSemanticError_ImpreciseAmount;
	}
	(*env)->FatalError(env, "A call to SemanticError.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass SemanticError_class = NULL;
static jfieldID SemanticError_LDKSemanticError_NoPaymentHash = NULL;
static jfieldID SemanticError_LDKSemanticError_MultiplePaymentHashes = NULL;
static jfieldID SemanticError_LDKSemanticError_NoDescription = NULL;
static jfieldID SemanticError_LDKSemanticError_MultipleDescriptions = NULL;
static jfieldID SemanticError_LDKSemanticError_NoPaymentSecret = NULL;
static jfieldID SemanticError_LDKSemanticError_MultiplePaymentSecrets = NULL;
static jfieldID SemanticError_LDKSemanticError_InvalidFeatures = NULL;
static jfieldID SemanticError_LDKSemanticError_InvalidRecoveryId = NULL;
static jfieldID SemanticError_LDKSemanticError_InvalidSignature = NULL;
static jfieldID SemanticError_LDKSemanticError_ImpreciseAmount = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_SemanticError_init (JNIEnv *env, jclass clz) {
	SemanticError_class = (*env)->NewGlobalRef(env, clz);
	CHECK(SemanticError_class != NULL);
	SemanticError_LDKSemanticError_NoPaymentHash = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_NoPaymentHash", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_NoPaymentHash != NULL);
	SemanticError_LDKSemanticError_MultiplePaymentHashes = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_MultiplePaymentHashes", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_MultiplePaymentHashes != NULL);
	SemanticError_LDKSemanticError_NoDescription = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_NoDescription", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_NoDescription != NULL);
	SemanticError_LDKSemanticError_MultipleDescriptions = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_MultipleDescriptions", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_MultipleDescriptions != NULL);
	SemanticError_LDKSemanticError_NoPaymentSecret = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_NoPaymentSecret", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_NoPaymentSecret != NULL);
	SemanticError_LDKSemanticError_MultiplePaymentSecrets = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_MultiplePaymentSecrets", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_MultiplePaymentSecrets != NULL);
	SemanticError_LDKSemanticError_InvalidFeatures = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_InvalidFeatures", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_InvalidFeatures != NULL);
	SemanticError_LDKSemanticError_InvalidRecoveryId = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_InvalidRecoveryId", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_InvalidRecoveryId != NULL);
	SemanticError_LDKSemanticError_InvalidSignature = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_InvalidSignature", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_InvalidSignature != NULL);
	SemanticError_LDKSemanticError_ImpreciseAmount = (*env)->GetStaticFieldID(env, SemanticError_class, "LDKSemanticError_ImpreciseAmount", "Lorg/ldk/enums/SemanticError;");
	CHECK(SemanticError_LDKSemanticError_ImpreciseAmount != NULL);
}
static inline jclass LDKSemanticError_to_java(JNIEnv *env, LDKSemanticError val) {
	switch (val) {
		case LDKSemanticError_NoPaymentHash:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_NoPaymentHash);
		case LDKSemanticError_MultiplePaymentHashes:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_MultiplePaymentHashes);
		case LDKSemanticError_NoDescription:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_NoDescription);
		case LDKSemanticError_MultipleDescriptions:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_MultipleDescriptions);
		case LDKSemanticError_NoPaymentSecret:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_NoPaymentSecret);
		case LDKSemanticError_MultiplePaymentSecrets:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_MultiplePaymentSecrets);
		case LDKSemanticError_InvalidFeatures:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_InvalidFeatures);
		case LDKSemanticError_InvalidRecoveryId:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_InvalidRecoveryId);
		case LDKSemanticError_InvalidSignature:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_InvalidSignature);
		case LDKSemanticError_ImpreciseAmount:
			return (*env)->GetStaticObjectField(env, SemanticError_class, SemanticError_LDKSemanticError_ImpreciseAmount);
		default: abort();
	}
}

static inline LDKSiPrefix LDKSiPrefix_from_java(JNIEnv *env, jclass clz) {
	jint ord = (*env)->CallIntMethod(env, clz, ordinal_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to SiPrefix.ordinal() from rust threw an exception.");
	}
	switch (ord) {
		case 0: return LDKSiPrefix_Milli;
		case 1: return LDKSiPrefix_Micro;
		case 2: return LDKSiPrefix_Nano;
		case 3: return LDKSiPrefix_Pico;
	}
	(*env)->FatalError(env, "A call to SiPrefix.ordinal() from rust returned an invalid value.");
	abort(); // Unreachable, but will let the compiler know we don't return here
}
static jclass SiPrefix_class = NULL;
static jfieldID SiPrefix_LDKSiPrefix_Milli = NULL;
static jfieldID SiPrefix_LDKSiPrefix_Micro = NULL;
static jfieldID SiPrefix_LDKSiPrefix_Nano = NULL;
static jfieldID SiPrefix_LDKSiPrefix_Pico = NULL;
JNIEXPORT void JNICALL Java_org_ldk_enums_SiPrefix_init (JNIEnv *env, jclass clz) {
	SiPrefix_class = (*env)->NewGlobalRef(env, clz);
	CHECK(SiPrefix_class != NULL);
	SiPrefix_LDKSiPrefix_Milli = (*env)->GetStaticFieldID(env, SiPrefix_class, "LDKSiPrefix_Milli", "Lorg/ldk/enums/SiPrefix;");
	CHECK(SiPrefix_LDKSiPrefix_Milli != NULL);
	SiPrefix_LDKSiPrefix_Micro = (*env)->GetStaticFieldID(env, SiPrefix_class, "LDKSiPrefix_Micro", "Lorg/ldk/enums/SiPrefix;");
	CHECK(SiPrefix_LDKSiPrefix_Micro != NULL);
	SiPrefix_LDKSiPrefix_Nano = (*env)->GetStaticFieldID(env, SiPrefix_class, "LDKSiPrefix_Nano", "Lorg/ldk/enums/SiPrefix;");
	CHECK(SiPrefix_LDKSiPrefix_Nano != NULL);
	SiPrefix_LDKSiPrefix_Pico = (*env)->GetStaticFieldID(env, SiPrefix_class, "LDKSiPrefix_Pico", "Lorg/ldk/enums/SiPrefix;");
	CHECK(SiPrefix_LDKSiPrefix_Pico != NULL);
}
static inline jclass LDKSiPrefix_to_java(JNIEnv *env, LDKSiPrefix val) {
	switch (val) {
		case LDKSiPrefix_Milli:
			return (*env)->GetStaticObjectField(env, SiPrefix_class, SiPrefix_LDKSiPrefix_Milli);
		case LDKSiPrefix_Micro:
			return (*env)->GetStaticObjectField(env, SiPrefix_class, SiPrefix_LDKSiPrefix_Micro);
		case LDKSiPrefix_Nano:
			return (*env)->GetStaticObjectField(env, SiPrefix_class, SiPrefix_LDKSiPrefix_Nano);
		case LDKSiPrefix_Pico:
			return (*env)->GetStaticObjectField(env, SiPrefix_class, SiPrefix_LDKSiPrefix_Pico);
		default: abort();
	}
}

static inline LDKCVec_u8Z CVec_u8Z_clone(const LDKCVec_u8Z *orig) {
	LDKCVec_u8Z ret = { .data = MALLOC(sizeof(int8_t) * orig->datalen, "LDKCVec_u8Z clone bytes"), .datalen = orig->datalen };
	memcpy(ret.data, orig->data, sizeof(int8_t) * ret.datalen);
	return ret;
}
struct LDKCVec_u8Z TxOut_get_script_pubkey (struct LDKTxOut* thing) {	return CVec_u8Z_clone(&thing->script_pubkey);}JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TxOut_1get_1script_1pubkey(JNIEnv *env, jclass clz, int64_t thing) {
	LDKTxOut* thing_conv = (LDKTxOut*)(thing & ~1);
	LDKCVec_u8Z ret_var = TxOut_get_script_pubkey(thing_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

uint64_t TxOut_get_value (struct LDKTxOut* thing) {	return thing->value;}JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxOut_1get_1value(JNIEnv *env, jclass clz, int64_t thing) {
	LDKTxOut* thing_conv = (LDKTxOut*)(thing & ~1);
	int64_t ret_val = TxOut_get_value(thing_conv);
	return ret_val;
}

static inline void CResult_NoneNoneZ_get_ok(LDKCResult_NoneNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneNoneZ* owner_conv = (LDKCResult_NoneNoneZ*)(owner & ~1);
	CResult_NoneNoneZ_get_ok(owner_conv);
}

static inline void CResult_NoneNoneZ_get_err(LDKCResult_NoneNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneNoneZ* owner_conv = (LDKCResult_NoneNoneZ*)(owner & ~1);
	CResult_NoneNoneZ_get_err(owner_conv);
}

static inline struct LDKCounterpartyCommitmentSecrets CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CounterpartyCommitmentSecrets_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* owner_conv = (LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ*)(owner & ~1);
	LDKCounterpartyCommitmentSecrets ret_var = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* owner_conv = (LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKSecretKey CResult_SecretKeyErrorZ_get_ok(LDKCResult_SecretKeyErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SecretKeyErrorZ* owner_conv = (LDKCResult_SecretKeyErrorZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult_SecretKeyErrorZ_get_ok(owner_conv).bytes);
	return ret_arr;
}

static inline enum LDKSecp256k1Error CResult_SecretKeyErrorZ_get_err(LDKCResult_SecretKeyErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SecretKeyErrorZ* owner_conv = (LDKCResult_SecretKeyErrorZ*)(owner & ~1);
	jclass ret_conv = LDKSecp256k1Error_to_java(env, CResult_SecretKeyErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKPublicKey CResult_PublicKeyErrorZ_get_ok(LDKCResult_PublicKeyErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PublicKeyErrorZ* owner_conv = (LDKCResult_PublicKeyErrorZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, CResult_PublicKeyErrorZ_get_ok(owner_conv).compressed_form);
	return ret_arr;
}

static inline enum LDKSecp256k1Error CResult_PublicKeyErrorZ_get_err(LDKCResult_PublicKeyErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PublicKeyErrorZ* owner_conv = (LDKCResult_PublicKeyErrorZ*)(owner & ~1);
	jclass ret_conv = LDKSecp256k1Error_to_java(env, CResult_PublicKeyErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKTxCreationKeys CResult_TxCreationKeysDecodeErrorZ_get_ok(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return TxCreationKeys_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TxCreationKeysDecodeErrorZ* owner_conv = (LDKCResult_TxCreationKeysDecodeErrorZ*)(owner & ~1);
	LDKTxCreationKeys ret_var = CResult_TxCreationKeysDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_TxCreationKeysDecodeErrorZ_get_err(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TxCreationKeysDecodeErrorZ* owner_conv = (LDKCResult_TxCreationKeysDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_TxCreationKeysDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelPublicKeys CResult_ChannelPublicKeysDecodeErrorZ_get_ok(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelPublicKeys_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelPublicKeysDecodeErrorZ* owner_conv = (LDKCResult_ChannelPublicKeysDecodeErrorZ*)(owner & ~1);
	LDKChannelPublicKeys ret_var = CResult_ChannelPublicKeysDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelPublicKeysDecodeErrorZ_get_err(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelPublicKeysDecodeErrorZ* owner_conv = (LDKCResult_ChannelPublicKeysDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelPublicKeysDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKTxCreationKeys CResult_TxCreationKeysErrorZ_get_ok(LDKCResult_TxCreationKeysErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return TxCreationKeys_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TxCreationKeysErrorZ* owner_conv = (LDKCResult_TxCreationKeysErrorZ*)(owner & ~1);
	LDKTxCreationKeys ret_var = CResult_TxCreationKeysErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline enum LDKSecp256k1Error CResult_TxCreationKeysErrorZ_get_err(LDKCResult_TxCreationKeysErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TxCreationKeysErrorZ* owner_conv = (LDKCResult_TxCreationKeysErrorZ*)(owner & ~1);
	jclass ret_conv = LDKSecp256k1Error_to_java(env, CResult_TxCreationKeysErrorZ_get_err(owner_conv));
	return ret_conv;
}

static jclass LDKCOption_u32Z_Some_class = NULL;
static jmethodID LDKCOption_u32Z_Some_meth = NULL;
static jclass LDKCOption_u32Z_None_class = NULL;
static jmethodID LDKCOption_u32Z_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1u32Z_init (JNIEnv *env, jclass clz) {
	LDKCOption_u32Z_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_u32Z$Some"));
	CHECK(LDKCOption_u32Z_Some_class != NULL);
	LDKCOption_u32Z_Some_meth = (*env)->GetMethodID(env, LDKCOption_u32Z_Some_class, "<init>", "(I)V");
	CHECK(LDKCOption_u32Z_Some_meth != NULL);
	LDKCOption_u32Z_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_u32Z$None"));
	CHECK(LDKCOption_u32Z_None_class != NULL);
	LDKCOption_u32Z_None_meth = (*env)->GetMethodID(env, LDKCOption_u32Z_None_class, "<init>", "()V");
	CHECK(LDKCOption_u32Z_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1u32Z_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_u32Z *obj = (LDKCOption_u32Z*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_u32Z_Some: {
			return (*env)->NewObject(env, LDKCOption_u32Z_Some_class, LDKCOption_u32Z_Some_meth, obj->some);
		}
		case LDKCOption_u32Z_None: {
			return (*env)->NewObject(env, LDKCOption_u32Z_None_class, LDKCOption_u32Z_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKHTLCOutputInCommitment CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return HTLCOutputInCommitment_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* owner_conv = (LDKCResult_HTLCOutputInCommitmentDecodeErrorZ*)(owner & ~1);
	LDKHTLCOutputInCommitment ret_var = CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* owner_conv = (LDKCResult_HTLCOutputInCommitmentDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKCounterpartyChannelTransactionParameters CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CounterpartyChannelTransactionParameters_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* owner_conv = (LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ*)(owner & ~1);
	LDKCounterpartyChannelTransactionParameters ret_var = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* owner_conv = (LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelTransactionParameters CResult_ChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelTransactionParameters_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* owner_conv = (LDKCResult_ChannelTransactionParametersDecodeErrorZ*)(owner & ~1);
	LDKChannelTransactionParameters ret_var = CResult_ChannelTransactionParametersDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* owner_conv = (LDKCResult_ChannelTransactionParametersDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelTransactionParametersDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKHolderCommitmentTransaction CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return HolderCommitmentTransaction_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* owner_conv = (LDKCResult_HolderCommitmentTransactionDecodeErrorZ*)(owner & ~1);
	LDKHolderCommitmentTransaction ret_var = CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_HolderCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* owner_conv = (LDKCResult_HolderCommitmentTransactionDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_HolderCommitmentTransactionDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKBuiltCommitmentTransaction CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return BuiltCommitmentTransaction_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* owner_conv = (LDKCResult_BuiltCommitmentTransactionDecodeErrorZ*)(owner & ~1);
	LDKBuiltCommitmentTransaction ret_var = CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* owner_conv = (LDKCResult_BuiltCommitmentTransactionDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKTrustedClosingTransaction *CResult_TrustedClosingTransactionNoneZ_get_ok(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return &*owner->contents.result;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedClosingTransactionNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TrustedClosingTransactionNoneZ* owner_conv = (LDKCResult_TrustedClosingTransactionNoneZ*)(owner & ~1);
	LDKTrustedClosingTransaction ret_var = *CResult_TrustedClosingTransactionNoneZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner & ~1;
	return ret_ref;
}

static inline void CResult_TrustedClosingTransactionNoneZ_get_err(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedClosingTransactionNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TrustedClosingTransactionNoneZ* owner_conv = (LDKCResult_TrustedClosingTransactionNoneZ*)(owner & ~1);
	CResult_TrustedClosingTransactionNoneZ_get_err(owner_conv);
}

static inline struct LDKCommitmentTransaction CResult_CommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CommitmentTransaction_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CommitmentTransactionDecodeErrorZ* owner_conv = (LDKCResult_CommitmentTransactionDecodeErrorZ*)(owner & ~1);
	LDKCommitmentTransaction ret_var = CResult_CommitmentTransactionDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_CommitmentTransactionDecodeErrorZ_get_err(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CommitmentTransactionDecodeErrorZ* owner_conv = (LDKCResult_CommitmentTransactionDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_CommitmentTransactionDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKTrustedCommitmentTransaction *CResult_TrustedCommitmentTransactionNoneZ_get_ok(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return &*owner->contents.result;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedCommitmentTransactionNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TrustedCommitmentTransactionNoneZ* owner_conv = (LDKCResult_TrustedCommitmentTransactionNoneZ*)(owner & ~1);
	LDKTrustedCommitmentTransaction ret_var = *CResult_TrustedCommitmentTransactionNoneZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner & ~1;
	return ret_ref;
}

static inline void CResult_TrustedCommitmentTransactionNoneZ_get_err(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedCommitmentTransactionNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TrustedCommitmentTransactionNoneZ* owner_conv = (LDKCResult_TrustedCommitmentTransactionNoneZ*)(owner & ~1);
	CResult_TrustedCommitmentTransactionNoneZ_get_err(owner_conv);
}

static inline struct LDKCVec_SignatureZ CResult_CVec_SignatureZNoneZ_get_ok(LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_SignatureZNoneZ* owner_conv = (LDKCResult_CVec_SignatureZNoneZ*)(owner & ~1);
	LDKCVec_SignatureZ ret_var = CResult_CVec_SignatureZNoneZ_get_ok(owner_conv);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < ret_var.datalen; i++) {
		int8_tArray ret_conv_8_arr = (*env)->NewByteArray(env, 64);
		(*env)->SetByteArrayRegion(env, ret_conv_8_arr, 0, 64, ret_var.data[i].compact_form);
		(*env)->SetObjectArrayElement(env, ret_arr, i, ret_conv_8_arr);
	}
	
	return ret_arr;
}

static inline void CResult_CVec_SignatureZNoneZ_get_err(LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_SignatureZNoneZ* owner_conv = (LDKCResult_CVec_SignatureZNoneZ*)(owner & ~1);
	CResult_CVec_SignatureZNoneZ_get_err(owner_conv);
}

static inline struct LDKShutdownScript CResult_ShutdownScriptDecodeErrorZ_get_ok(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ShutdownScript_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ShutdownScriptDecodeErrorZ* owner_conv = (LDKCResult_ShutdownScriptDecodeErrorZ*)(owner & ~1);
	LDKShutdownScript ret_var = CResult_ShutdownScriptDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ShutdownScriptDecodeErrorZ_get_err(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ShutdownScriptDecodeErrorZ* owner_conv = (LDKCResult_ShutdownScriptDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ShutdownScriptDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ShutdownScript_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* owner_conv = (LDKCResult_ShutdownScriptInvalidShutdownScriptZ*)(owner & ~1);
	LDKShutdownScript ret_var = CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKInvalidShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_err(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return InvalidShutdownScript_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* owner_conv = (LDKCResult_ShutdownScriptInvalidShutdownScriptZ*)(owner & ~1);
	LDKInvalidShutdownScript ret_var = CResult_ShutdownScriptInvalidShutdownScriptZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline void CResult_NoneErrorZ_get_ok(LDKCResult_NoneErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneErrorZ* owner_conv = (LDKCResult_NoneErrorZ*)(owner & ~1);
	CResult_NoneErrorZ_get_ok(owner_conv);
}

static inline enum LDKIOError CResult_NoneErrorZ_get_err(LDKCResult_NoneErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneErrorZ* owner_conv = (LDKCResult_NoneErrorZ*)(owner & ~1);
	jclass ret_conv = LDKIOError_to_java(env, CResult_NoneErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKRouteHop CResult_RouteHopDecodeErrorZ_get_ok(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return RouteHop_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteHopDecodeErrorZ* owner_conv = (LDKCResult_RouteHopDecodeErrorZ*)(owner & ~1);
	LDKRouteHop ret_var = CResult_RouteHopDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_RouteHopDecodeErrorZ_get_err(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteHopDecodeErrorZ* owner_conv = (LDKCResult_RouteHopDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_RouteHopDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_RouteHopZ CVec_RouteHopZ_clone(const LDKCVec_RouteHopZ *orig) {
	LDKCVec_RouteHopZ ret = { .data = MALLOC(sizeof(LDKRouteHop) * orig->datalen, "LDKCVec_RouteHopZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = RouteHop_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_CVec_RouteHopZZ CVec_CVec_RouteHopZZ_clone(const LDKCVec_CVec_RouteHopZZ *orig) {
	LDKCVec_CVec_RouteHopZZ ret = { .data = MALLOC(sizeof(LDKCVec_RouteHopZ) * orig->datalen, "LDKCVec_CVec_RouteHopZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = CVec_RouteHopZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKRoute CResult_RouteDecodeErrorZ_get_ok(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Route_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteDecodeErrorZ* owner_conv = (LDKCResult_RouteDecodeErrorZ*)(owner & ~1);
	LDKRoute ret_var = CResult_RouteDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_RouteDecodeErrorZ_get_err(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteDecodeErrorZ* owner_conv = (LDKCResult_RouteDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_RouteDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKRouteParameters CResult_RouteParametersDecodeErrorZ_get_ok(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return RouteParameters_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteParametersDecodeErrorZ* owner_conv = (LDKCResult_RouteParametersDecodeErrorZ*)(owner & ~1);
	LDKRouteParameters ret_var = CResult_RouteParametersDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_RouteParametersDecodeErrorZ_get_err(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteParametersDecodeErrorZ* owner_conv = (LDKCResult_RouteParametersDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_RouteParametersDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_RouteHintZ CVec_RouteHintZ_clone(const LDKCVec_RouteHintZ *orig) {
	LDKCVec_RouteHintZ ret = { .data = MALLOC(sizeof(LDKRouteHint) * orig->datalen, "LDKCVec_RouteHintZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = RouteHint_clone(&orig->data[i]);
	}
	return ret;
}
static jclass LDKCOption_u64Z_Some_class = NULL;
static jmethodID LDKCOption_u64Z_Some_meth = NULL;
static jclass LDKCOption_u64Z_None_class = NULL;
static jmethodID LDKCOption_u64Z_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1u64Z_init (JNIEnv *env, jclass clz) {
	LDKCOption_u64Z_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_u64Z$Some"));
	CHECK(LDKCOption_u64Z_Some_class != NULL);
	LDKCOption_u64Z_Some_meth = (*env)->GetMethodID(env, LDKCOption_u64Z_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_u64Z_Some_meth != NULL);
	LDKCOption_u64Z_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_u64Z$None"));
	CHECK(LDKCOption_u64Z_None_class != NULL);
	LDKCOption_u64Z_None_meth = (*env)->GetMethodID(env, LDKCOption_u64Z_None_class, "<init>", "()V");
	CHECK(LDKCOption_u64Z_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1u64Z_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_u64Z *obj = (LDKCOption_u64Z*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_u64Z_Some: {
			return (*env)->NewObject(env, LDKCOption_u64Z_Some_class, LDKCOption_u64Z_Some_meth, obj->some);
		}
		case LDKCOption_u64Z_None: {
			return (*env)->NewObject(env, LDKCOption_u64Z_None_class, LDKCOption_u64Z_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKPaymentParameters CResult_PaymentParametersDecodeErrorZ_get_ok(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return PaymentParameters_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentParametersDecodeErrorZ* owner_conv = (LDKCResult_PaymentParametersDecodeErrorZ*)(owner & ~1);
	LDKPaymentParameters ret_var = CResult_PaymentParametersDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_PaymentParametersDecodeErrorZ_get_err(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentParametersDecodeErrorZ* owner_conv = (LDKCResult_PaymentParametersDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_PaymentParametersDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_RouteHintHopZ CVec_RouteHintHopZ_clone(const LDKCVec_RouteHintHopZ *orig) {
	LDKCVec_RouteHintHopZ ret = { .data = MALLOC(sizeof(LDKRouteHintHop) * orig->datalen, "LDKCVec_RouteHintHopZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = RouteHintHop_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKRouteHint CResult_RouteHintDecodeErrorZ_get_ok(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return RouteHint_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteHintDecodeErrorZ* owner_conv = (LDKCResult_RouteHintDecodeErrorZ*)(owner & ~1);
	LDKRouteHint ret_var = CResult_RouteHintDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_RouteHintDecodeErrorZ_get_err(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteHintDecodeErrorZ* owner_conv = (LDKCResult_RouteHintDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_RouteHintDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKRouteHintHop CResult_RouteHintHopDecodeErrorZ_get_ok(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return RouteHintHop_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteHintHopDecodeErrorZ* owner_conv = (LDKCResult_RouteHintHopDecodeErrorZ*)(owner & ~1);
	LDKRouteHintHop ret_var = CResult_RouteHintHopDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_RouteHintHopDecodeErrorZ_get_err(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteHintHopDecodeErrorZ* owner_conv = (LDKCResult_RouteHintHopDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_RouteHintHopDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_ChannelDetailsZ CVec_ChannelDetailsZ_clone(const LDKCVec_ChannelDetailsZ *orig) {
	LDKCVec_ChannelDetailsZ ret = { .data = MALLOC(sizeof(LDKChannelDetails) * orig->datalen, "LDKCVec_ChannelDetailsZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = ChannelDetails_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKRoute CResult_RouteLightningErrorZ_get_ok(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Route_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteLightningErrorZ* owner_conv = (LDKCResult_RouteLightningErrorZ*)(owner & ~1);
	LDKRoute ret_var = CResult_RouteLightningErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKLightningError CResult_RouteLightningErrorZ_get_err(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return LightningError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RouteLightningErrorZ* owner_conv = (LDKCResult_RouteLightningErrorZ*)(owner & ~1);
	LDKLightningError ret_var = CResult_RouteLightningErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKTxOut CResult_TxOutAccessErrorZ_get_ok(LDKCResult_TxOutAccessErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return TxOut_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TxOutAccessErrorZ* owner_conv = (LDKCResult_TxOutAccessErrorZ*)(owner & ~1);
	LDKTxOut* ret_ref = MALLOC(sizeof(LDKTxOut), "LDKTxOut");
	*ret_ref = CResult_TxOutAccessErrorZ_get_ok(owner_conv);
	return (uintptr_t)ret_ref;
}

static inline enum LDKAccessError CResult_TxOutAccessErrorZ_get_err(LDKCResult_TxOutAccessErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return AccessError_clone(&*owner->contents.err);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TxOutAccessErrorZ* owner_conv = (LDKCResult_TxOutAccessErrorZ*)(owner & ~1);
	jclass ret_conv = LDKAccessError_to_java(env, CResult_TxOutAccessErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline uintptr_t C2Tuple_usizeTransactionZ_get_a(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner){
	return owner->a;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1usizeTransactionZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_usizeTransactionZ* owner_conv = (LDKC2Tuple_usizeTransactionZ*)(owner & ~1);
	int64_t ret_val = C2Tuple_usizeTransactionZ_get_a(owner_conv);
	return ret_val;
}

static inline struct LDKTransaction C2Tuple_usizeTransactionZ_get_b(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner){
	return owner->b;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1usizeTransactionZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_usizeTransactionZ* owner_conv = (LDKC2Tuple_usizeTransactionZ*)(owner & ~1);
	LDKTransaction ret_var = C2Tuple_usizeTransactionZ_get_b(owner_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

static inline LDKCVec_C2Tuple_usizeTransactionZZ CVec_C2Tuple_usizeTransactionZZ_clone(const LDKCVec_C2Tuple_usizeTransactionZZ *orig) {
	LDKCVec_C2Tuple_usizeTransactionZZ ret = { .data = MALLOC(sizeof(LDKC2Tuple_usizeTransactionZ) * orig->datalen, "LDKCVec_C2Tuple_usizeTransactionZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C2Tuple_usizeTransactionZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_TxidZ CVec_TxidZ_clone(const LDKCVec_TxidZ *orig) {
	LDKCVec_TxidZ ret = { .data = MALLOC(sizeof(LDKThirtyTwoBytes) * orig->datalen, "LDKCVec_TxidZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = ThirtyTwoBytes_clone(&orig->data[i]);
	}
	return ret;
}
static inline void CResult_NoneChannelMonitorUpdateErrZ_get_ok(LDKCResult_NoneChannelMonitorUpdateErrZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneChannelMonitorUpdateErrZ* owner_conv = (LDKCResult_NoneChannelMonitorUpdateErrZ*)(owner & ~1);
	CResult_NoneChannelMonitorUpdateErrZ_get_ok(owner_conv);
}

static inline enum LDKChannelMonitorUpdateErr CResult_NoneChannelMonitorUpdateErrZ_get_err(LDKCResult_NoneChannelMonitorUpdateErrZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return ChannelMonitorUpdateErr_clone(&*owner->contents.err);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneChannelMonitorUpdateErrZ* owner_conv = (LDKCResult_NoneChannelMonitorUpdateErrZ*)(owner & ~1);
	jclass ret_conv = LDKChannelMonitorUpdateErr_to_java(env, CResult_NoneChannelMonitorUpdateErrZ_get_err(owner_conv));
	return ret_conv;
}

static jclass LDKMonitorEvent_HTLCEvent_class = NULL;
static jmethodID LDKMonitorEvent_HTLCEvent_meth = NULL;
static jclass LDKMonitorEvent_CommitmentTxConfirmed_class = NULL;
static jmethodID LDKMonitorEvent_CommitmentTxConfirmed_meth = NULL;
static jclass LDKMonitorEvent_UpdateCompleted_class = NULL;
static jmethodID LDKMonitorEvent_UpdateCompleted_meth = NULL;
static jclass LDKMonitorEvent_UpdateFailed_class = NULL;
static jmethodID LDKMonitorEvent_UpdateFailed_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKMonitorEvent_init (JNIEnv *env, jclass clz) {
	LDKMonitorEvent_HTLCEvent_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMonitorEvent$HTLCEvent"));
	CHECK(LDKMonitorEvent_HTLCEvent_class != NULL);
	LDKMonitorEvent_HTLCEvent_meth = (*env)->GetMethodID(env, LDKMonitorEvent_HTLCEvent_class, "<init>", "(J)V");
	CHECK(LDKMonitorEvent_HTLCEvent_meth != NULL);
	LDKMonitorEvent_CommitmentTxConfirmed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMonitorEvent$CommitmentTxConfirmed"));
	CHECK(LDKMonitorEvent_CommitmentTxConfirmed_class != NULL);
	LDKMonitorEvent_CommitmentTxConfirmed_meth = (*env)->GetMethodID(env, LDKMonitorEvent_CommitmentTxConfirmed_class, "<init>", "(J)V");
	CHECK(LDKMonitorEvent_CommitmentTxConfirmed_meth != NULL);
	LDKMonitorEvent_UpdateCompleted_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMonitorEvent$UpdateCompleted"));
	CHECK(LDKMonitorEvent_UpdateCompleted_class != NULL);
	LDKMonitorEvent_UpdateCompleted_meth = (*env)->GetMethodID(env, LDKMonitorEvent_UpdateCompleted_class, "<init>", "(JJ)V");
	CHECK(LDKMonitorEvent_UpdateCompleted_meth != NULL);
	LDKMonitorEvent_UpdateFailed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMonitorEvent$UpdateFailed"));
	CHECK(LDKMonitorEvent_UpdateFailed_class != NULL);
	LDKMonitorEvent_UpdateFailed_meth = (*env)->GetMethodID(env, LDKMonitorEvent_UpdateFailed_class, "<init>", "(J)V");
	CHECK(LDKMonitorEvent_UpdateFailed_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKMonitorEvent_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKMonitorEvent *obj = (LDKMonitorEvent*)(ptr & ~1);
	switch(obj->tag) {
		case LDKMonitorEvent_HTLCEvent: {
			LDKHTLCUpdate htlc_event_var = obj->htlc_event;
			uintptr_t htlc_event_ref = 0;
			CHECK((((uintptr_t)htlc_event_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&htlc_event_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(htlc_event_var);
			htlc_event_ref = (uintptr_t)htlc_event_var.inner & ~1;
			return (*env)->NewObject(env, LDKMonitorEvent_HTLCEvent_class, LDKMonitorEvent_HTLCEvent_meth, htlc_event_ref);
		}
		case LDKMonitorEvent_CommitmentTxConfirmed: {
			LDKOutPoint commitment_tx_confirmed_var = obj->commitment_tx_confirmed;
			uintptr_t commitment_tx_confirmed_ref = 0;
			CHECK((((uintptr_t)commitment_tx_confirmed_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&commitment_tx_confirmed_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(commitment_tx_confirmed_var);
			commitment_tx_confirmed_ref = (uintptr_t)commitment_tx_confirmed_var.inner & ~1;
			return (*env)->NewObject(env, LDKMonitorEvent_CommitmentTxConfirmed_class, LDKMonitorEvent_CommitmentTxConfirmed_meth, commitment_tx_confirmed_ref);
		}
		case LDKMonitorEvent_UpdateCompleted: {
			LDKOutPoint funding_txo_var = obj->update_completed.funding_txo;
			uintptr_t funding_txo_ref = 0;
			CHECK((((uintptr_t)funding_txo_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&funding_txo_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_var);
			funding_txo_ref = (uintptr_t)funding_txo_var.inner & ~1;
			return (*env)->NewObject(env, LDKMonitorEvent_UpdateCompleted_class, LDKMonitorEvent_UpdateCompleted_meth, funding_txo_ref, obj->update_completed.monitor_update_id);
		}
		case LDKMonitorEvent_UpdateFailed: {
			LDKOutPoint update_failed_var = obj->update_failed;
			uintptr_t update_failed_ref = 0;
			CHECK((((uintptr_t)update_failed_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&update_failed_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(update_failed_var);
			update_failed_ref = (uintptr_t)update_failed_var.inner & ~1;
			return (*env)->NewObject(env, LDKMonitorEvent_UpdateFailed_class, LDKMonitorEvent_UpdateFailed_meth, update_failed_ref);
		}
		default: abort();
	}
}
static inline LDKCVec_MonitorEventZ CVec_MonitorEventZ_clone(const LDKCVec_MonitorEventZ *orig) {
	LDKCVec_MonitorEventZ ret = { .data = MALLOC(sizeof(LDKMonitorEvent) * orig->datalen, "LDKCVec_MonitorEventZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = MonitorEvent_clone(&orig->data[i]);
	}
	return ret;
}
static jclass LDKCOption_C2Tuple_usizeTransactionZZ_Some_class = NULL;
static jmethodID LDKCOption_C2Tuple_usizeTransactionZZ_Some_meth = NULL;
static jclass LDKCOption_C2Tuple_usizeTransactionZZ_None_class = NULL;
static jmethodID LDKCOption_C2Tuple_usizeTransactionZZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1C2Tuple_1usizeTransactionZZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_C2Tuple_usizeTransactionZZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_C2Tuple_usizeTransactionZZ$Some"));
	CHECK(LDKCOption_C2Tuple_usizeTransactionZZ_Some_class != NULL);
	LDKCOption_C2Tuple_usizeTransactionZZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_C2Tuple_usizeTransactionZZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_C2Tuple_usizeTransactionZZ_Some_meth != NULL);
	LDKCOption_C2Tuple_usizeTransactionZZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_C2Tuple_usizeTransactionZZ$None"));
	CHECK(LDKCOption_C2Tuple_usizeTransactionZZ_None_class != NULL);
	LDKCOption_C2Tuple_usizeTransactionZZ_None_meth = (*env)->GetMethodID(env, LDKCOption_C2Tuple_usizeTransactionZZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_C2Tuple_usizeTransactionZZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1C2Tuple_1usizeTransactionZZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_C2Tuple_usizeTransactionZZ *obj = (LDKCOption_C2Tuple_usizeTransactionZZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_C2Tuple_usizeTransactionZZ_Some: {
			LDKC2Tuple_usizeTransactionZ* some_conv = MALLOC(sizeof(LDKC2Tuple_usizeTransactionZ), "LDKC2Tuple_usizeTransactionZ");
			*some_conv = obj->some;
			*some_conv = C2Tuple_usizeTransactionZ_clone(some_conv);
			return (*env)->NewObject(env, LDKCOption_C2Tuple_usizeTransactionZZ_Some_class, LDKCOption_C2Tuple_usizeTransactionZZ_Some_meth, ((uintptr_t)some_conv));
		}
		case LDKCOption_C2Tuple_usizeTransactionZZ_None: {
			return (*env)->NewObject(env, LDKCOption_C2Tuple_usizeTransactionZZ_None_class, LDKCOption_C2Tuple_usizeTransactionZZ_None_meth);
		}
		default: abort();
	}
}
static jclass LDKClosureReason_CounterpartyForceClosed_class = NULL;
static jmethodID LDKClosureReason_CounterpartyForceClosed_meth = NULL;
static jclass LDKClosureReason_HolderForceClosed_class = NULL;
static jmethodID LDKClosureReason_HolderForceClosed_meth = NULL;
static jclass LDKClosureReason_CooperativeClosure_class = NULL;
static jmethodID LDKClosureReason_CooperativeClosure_meth = NULL;
static jclass LDKClosureReason_CommitmentTxConfirmed_class = NULL;
static jmethodID LDKClosureReason_CommitmentTxConfirmed_meth = NULL;
static jclass LDKClosureReason_FundingTimedOut_class = NULL;
static jmethodID LDKClosureReason_FundingTimedOut_meth = NULL;
static jclass LDKClosureReason_ProcessingError_class = NULL;
static jmethodID LDKClosureReason_ProcessingError_meth = NULL;
static jclass LDKClosureReason_DisconnectedPeer_class = NULL;
static jmethodID LDKClosureReason_DisconnectedPeer_meth = NULL;
static jclass LDKClosureReason_OutdatedChannelManager_class = NULL;
static jmethodID LDKClosureReason_OutdatedChannelManager_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKClosureReason_init (JNIEnv *env, jclass clz) {
	LDKClosureReason_CounterpartyForceClosed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$CounterpartyForceClosed"));
	CHECK(LDKClosureReason_CounterpartyForceClosed_class != NULL);
	LDKClosureReason_CounterpartyForceClosed_meth = (*env)->GetMethodID(env, LDKClosureReason_CounterpartyForceClosed_class, "<init>", "(Ljava/lang/String;)V");
	CHECK(LDKClosureReason_CounterpartyForceClosed_meth != NULL);
	LDKClosureReason_HolderForceClosed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$HolderForceClosed"));
	CHECK(LDKClosureReason_HolderForceClosed_class != NULL);
	LDKClosureReason_HolderForceClosed_meth = (*env)->GetMethodID(env, LDKClosureReason_HolderForceClosed_class, "<init>", "()V");
	CHECK(LDKClosureReason_HolderForceClosed_meth != NULL);
	LDKClosureReason_CooperativeClosure_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$CooperativeClosure"));
	CHECK(LDKClosureReason_CooperativeClosure_class != NULL);
	LDKClosureReason_CooperativeClosure_meth = (*env)->GetMethodID(env, LDKClosureReason_CooperativeClosure_class, "<init>", "()V");
	CHECK(LDKClosureReason_CooperativeClosure_meth != NULL);
	LDKClosureReason_CommitmentTxConfirmed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$CommitmentTxConfirmed"));
	CHECK(LDKClosureReason_CommitmentTxConfirmed_class != NULL);
	LDKClosureReason_CommitmentTxConfirmed_meth = (*env)->GetMethodID(env, LDKClosureReason_CommitmentTxConfirmed_class, "<init>", "()V");
	CHECK(LDKClosureReason_CommitmentTxConfirmed_meth != NULL);
	LDKClosureReason_FundingTimedOut_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$FundingTimedOut"));
	CHECK(LDKClosureReason_FundingTimedOut_class != NULL);
	LDKClosureReason_FundingTimedOut_meth = (*env)->GetMethodID(env, LDKClosureReason_FundingTimedOut_class, "<init>", "()V");
	CHECK(LDKClosureReason_FundingTimedOut_meth != NULL);
	LDKClosureReason_ProcessingError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$ProcessingError"));
	CHECK(LDKClosureReason_ProcessingError_class != NULL);
	LDKClosureReason_ProcessingError_meth = (*env)->GetMethodID(env, LDKClosureReason_ProcessingError_class, "<init>", "(Ljava/lang/String;)V");
	CHECK(LDKClosureReason_ProcessingError_meth != NULL);
	LDKClosureReason_DisconnectedPeer_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$DisconnectedPeer"));
	CHECK(LDKClosureReason_DisconnectedPeer_class != NULL);
	LDKClosureReason_DisconnectedPeer_meth = (*env)->GetMethodID(env, LDKClosureReason_DisconnectedPeer_class, "<init>", "()V");
	CHECK(LDKClosureReason_DisconnectedPeer_meth != NULL);
	LDKClosureReason_OutdatedChannelManager_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKClosureReason$OutdatedChannelManager"));
	CHECK(LDKClosureReason_OutdatedChannelManager_class != NULL);
	LDKClosureReason_OutdatedChannelManager_meth = (*env)->GetMethodID(env, LDKClosureReason_OutdatedChannelManager_class, "<init>", "()V");
	CHECK(LDKClosureReason_OutdatedChannelManager_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKClosureReason_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKClosureReason *obj = (LDKClosureReason*)(ptr & ~1);
	switch(obj->tag) {
		case LDKClosureReason_CounterpartyForceClosed: {
			LDKStr peer_msg_str = obj->counterparty_force_closed.peer_msg;
			jstring peer_msg_conv = str_ref_to_java(env, peer_msg_str.chars, peer_msg_str.len);
			return (*env)->NewObject(env, LDKClosureReason_CounterpartyForceClosed_class, LDKClosureReason_CounterpartyForceClosed_meth, peer_msg_conv);
		}
		case LDKClosureReason_HolderForceClosed: {
			return (*env)->NewObject(env, LDKClosureReason_HolderForceClosed_class, LDKClosureReason_HolderForceClosed_meth);
		}
		case LDKClosureReason_CooperativeClosure: {
			return (*env)->NewObject(env, LDKClosureReason_CooperativeClosure_class, LDKClosureReason_CooperativeClosure_meth);
		}
		case LDKClosureReason_CommitmentTxConfirmed: {
			return (*env)->NewObject(env, LDKClosureReason_CommitmentTxConfirmed_class, LDKClosureReason_CommitmentTxConfirmed_meth);
		}
		case LDKClosureReason_FundingTimedOut: {
			return (*env)->NewObject(env, LDKClosureReason_FundingTimedOut_class, LDKClosureReason_FundingTimedOut_meth);
		}
		case LDKClosureReason_ProcessingError: {
			LDKStr err_str = obj->processing_error.err;
			jstring err_conv = str_ref_to_java(env, err_str.chars, err_str.len);
			return (*env)->NewObject(env, LDKClosureReason_ProcessingError_class, LDKClosureReason_ProcessingError_meth, err_conv);
		}
		case LDKClosureReason_DisconnectedPeer: {
			return (*env)->NewObject(env, LDKClosureReason_DisconnectedPeer_class, LDKClosureReason_DisconnectedPeer_meth);
		}
		case LDKClosureReason_OutdatedChannelManager: {
			return (*env)->NewObject(env, LDKClosureReason_OutdatedChannelManager_class, LDKClosureReason_OutdatedChannelManager_meth);
		}
		default: abort();
	}
}
static jclass LDKCOption_ClosureReasonZ_Some_class = NULL;
static jmethodID LDKCOption_ClosureReasonZ_Some_meth = NULL;
static jclass LDKCOption_ClosureReasonZ_None_class = NULL;
static jmethodID LDKCOption_ClosureReasonZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1ClosureReasonZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_ClosureReasonZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_ClosureReasonZ$Some"));
	CHECK(LDKCOption_ClosureReasonZ_Some_class != NULL);
	LDKCOption_ClosureReasonZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_ClosureReasonZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_ClosureReasonZ_Some_meth != NULL);
	LDKCOption_ClosureReasonZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_ClosureReasonZ$None"));
	CHECK(LDKCOption_ClosureReasonZ_None_class != NULL);
	LDKCOption_ClosureReasonZ_None_meth = (*env)->GetMethodID(env, LDKCOption_ClosureReasonZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_ClosureReasonZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1ClosureReasonZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_ClosureReasonZ *obj = (LDKCOption_ClosureReasonZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_ClosureReasonZ_Some: {
			uintptr_t some_ref = ((uintptr_t)&obj->some) | 1;
			return (*env)->NewObject(env, LDKCOption_ClosureReasonZ_Some_class, LDKCOption_ClosureReasonZ_Some_meth, some_ref);
		}
		case LDKCOption_ClosureReasonZ_None: {
			return (*env)->NewObject(env, LDKCOption_ClosureReasonZ_None_class, LDKCOption_ClosureReasonZ_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKCOption_ClosureReasonZ CResult_COption_ClosureReasonZDecodeErrorZ_get_ok(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return COption_ClosureReasonZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* owner_conv = (LDKCResult_COption_ClosureReasonZDecodeErrorZ*)(owner & ~1);
	LDKCOption_ClosureReasonZ *ret_copy = MALLOC(sizeof(LDKCOption_ClosureReasonZ), "LDKCOption_ClosureReasonZ");
	*ret_copy = CResult_COption_ClosureReasonZDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_COption_ClosureReasonZDecodeErrorZ_get_err(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* owner_conv = (LDKCResult_COption_ClosureReasonZDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_COption_ClosureReasonZDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static jclass LDKNetworkUpdate_ChannelUpdateMessage_class = NULL;
static jmethodID LDKNetworkUpdate_ChannelUpdateMessage_meth = NULL;
static jclass LDKNetworkUpdate_ChannelClosed_class = NULL;
static jmethodID LDKNetworkUpdate_ChannelClosed_meth = NULL;
static jclass LDKNetworkUpdate_NodeFailure_class = NULL;
static jmethodID LDKNetworkUpdate_NodeFailure_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKNetworkUpdate_init (JNIEnv *env, jclass clz) {
	LDKNetworkUpdate_ChannelUpdateMessage_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKNetworkUpdate$ChannelUpdateMessage"));
	CHECK(LDKNetworkUpdate_ChannelUpdateMessage_class != NULL);
	LDKNetworkUpdate_ChannelUpdateMessage_meth = (*env)->GetMethodID(env, LDKNetworkUpdate_ChannelUpdateMessage_class, "<init>", "(J)V");
	CHECK(LDKNetworkUpdate_ChannelUpdateMessage_meth != NULL);
	LDKNetworkUpdate_ChannelClosed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKNetworkUpdate$ChannelClosed"));
	CHECK(LDKNetworkUpdate_ChannelClosed_class != NULL);
	LDKNetworkUpdate_ChannelClosed_meth = (*env)->GetMethodID(env, LDKNetworkUpdate_ChannelClosed_class, "<init>", "(JZ)V");
	CHECK(LDKNetworkUpdate_ChannelClosed_meth != NULL);
	LDKNetworkUpdate_NodeFailure_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKNetworkUpdate$NodeFailure"));
	CHECK(LDKNetworkUpdate_NodeFailure_class != NULL);
	LDKNetworkUpdate_NodeFailure_meth = (*env)->GetMethodID(env, LDKNetworkUpdate_NodeFailure_class, "<init>", "([BZ)V");
	CHECK(LDKNetworkUpdate_NodeFailure_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKNetworkUpdate_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKNetworkUpdate *obj = (LDKNetworkUpdate*)(ptr & ~1);
	switch(obj->tag) {
		case LDKNetworkUpdate_ChannelUpdateMessage: {
			LDKChannelUpdate msg_var = obj->channel_update_message.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKNetworkUpdate_ChannelUpdateMessage_class, LDKNetworkUpdate_ChannelUpdateMessage_meth, msg_ref);
		}
		case LDKNetworkUpdate_ChannelClosed: {
			return (*env)->NewObject(env, LDKNetworkUpdate_ChannelClosed_class, LDKNetworkUpdate_ChannelClosed_meth, obj->channel_closed.short_channel_id, obj->channel_closed.is_permanent);
		}
		case LDKNetworkUpdate_NodeFailure: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->node_failure.node_id.compressed_form);
			return (*env)->NewObject(env, LDKNetworkUpdate_NodeFailure_class, LDKNetworkUpdate_NodeFailure_meth, node_id_arr, obj->node_failure.is_permanent);
		}
		default: abort();
	}
}
static jclass LDKCOption_NetworkUpdateZ_Some_class = NULL;
static jmethodID LDKCOption_NetworkUpdateZ_Some_meth = NULL;
static jclass LDKCOption_NetworkUpdateZ_None_class = NULL;
static jmethodID LDKCOption_NetworkUpdateZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1NetworkUpdateZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_NetworkUpdateZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_NetworkUpdateZ$Some"));
	CHECK(LDKCOption_NetworkUpdateZ_Some_class != NULL);
	LDKCOption_NetworkUpdateZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_NetworkUpdateZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_NetworkUpdateZ_Some_meth != NULL);
	LDKCOption_NetworkUpdateZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_NetworkUpdateZ$None"));
	CHECK(LDKCOption_NetworkUpdateZ_None_class != NULL);
	LDKCOption_NetworkUpdateZ_None_meth = (*env)->GetMethodID(env, LDKCOption_NetworkUpdateZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_NetworkUpdateZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1NetworkUpdateZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_NetworkUpdateZ *obj = (LDKCOption_NetworkUpdateZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_NetworkUpdateZ_Some: {
			uintptr_t some_ref = ((uintptr_t)&obj->some) | 1;
			return (*env)->NewObject(env, LDKCOption_NetworkUpdateZ_Some_class, LDKCOption_NetworkUpdateZ_Some_meth, some_ref);
		}
		case LDKCOption_NetworkUpdateZ_None: {
			return (*env)->NewObject(env, LDKCOption_NetworkUpdateZ_None_class, LDKCOption_NetworkUpdateZ_None_meth);
		}
		default: abort();
	}
}
static jclass LDKSpendableOutputDescriptor_StaticOutput_class = NULL;
static jmethodID LDKSpendableOutputDescriptor_StaticOutput_meth = NULL;
static jclass LDKSpendableOutputDescriptor_DelayedPaymentOutput_class = NULL;
static jmethodID LDKSpendableOutputDescriptor_DelayedPaymentOutput_meth = NULL;
static jclass LDKSpendableOutputDescriptor_StaticPaymentOutput_class = NULL;
static jmethodID LDKSpendableOutputDescriptor_StaticPaymentOutput_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKSpendableOutputDescriptor_init (JNIEnv *env, jclass clz) {
	LDKSpendableOutputDescriptor_StaticOutput_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKSpendableOutputDescriptor$StaticOutput"));
	CHECK(LDKSpendableOutputDescriptor_StaticOutput_class != NULL);
	LDKSpendableOutputDescriptor_StaticOutput_meth = (*env)->GetMethodID(env, LDKSpendableOutputDescriptor_StaticOutput_class, "<init>", "(JJ)V");
	CHECK(LDKSpendableOutputDescriptor_StaticOutput_meth != NULL);
	LDKSpendableOutputDescriptor_DelayedPaymentOutput_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKSpendableOutputDescriptor$DelayedPaymentOutput"));
	CHECK(LDKSpendableOutputDescriptor_DelayedPaymentOutput_class != NULL);
	LDKSpendableOutputDescriptor_DelayedPaymentOutput_meth = (*env)->GetMethodID(env, LDKSpendableOutputDescriptor_DelayedPaymentOutput_class, "<init>", "(J)V");
	CHECK(LDKSpendableOutputDescriptor_DelayedPaymentOutput_meth != NULL);
	LDKSpendableOutputDescriptor_StaticPaymentOutput_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKSpendableOutputDescriptor$StaticPaymentOutput"));
	CHECK(LDKSpendableOutputDescriptor_StaticPaymentOutput_class != NULL);
	LDKSpendableOutputDescriptor_StaticPaymentOutput_meth = (*env)->GetMethodID(env, LDKSpendableOutputDescriptor_StaticPaymentOutput_class, "<init>", "(J)V");
	CHECK(LDKSpendableOutputDescriptor_StaticPaymentOutput_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKSpendableOutputDescriptor_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKSpendableOutputDescriptor *obj = (LDKSpendableOutputDescriptor*)(ptr & ~1);
	switch(obj->tag) {
		case LDKSpendableOutputDescriptor_StaticOutput: {
			LDKOutPoint outpoint_var = obj->static_output.outpoint;
			uintptr_t outpoint_ref = 0;
			CHECK((((uintptr_t)outpoint_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&outpoint_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(outpoint_var);
			outpoint_ref = (uintptr_t)outpoint_var.inner & ~1;
			uintptr_t output_ref = ((uintptr_t)&obj->static_output.output) | 1;
			return (*env)->NewObject(env, LDKSpendableOutputDescriptor_StaticOutput_class, LDKSpendableOutputDescriptor_StaticOutput_meth, outpoint_ref, (uintptr_t)output_ref);
		}
		case LDKSpendableOutputDescriptor_DelayedPaymentOutput: {
			LDKDelayedPaymentOutputDescriptor delayed_payment_output_var = obj->delayed_payment_output;
			uintptr_t delayed_payment_output_ref = 0;
			CHECK((((uintptr_t)delayed_payment_output_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&delayed_payment_output_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(delayed_payment_output_var);
			delayed_payment_output_ref = (uintptr_t)delayed_payment_output_var.inner & ~1;
			return (*env)->NewObject(env, LDKSpendableOutputDescriptor_DelayedPaymentOutput_class, LDKSpendableOutputDescriptor_DelayedPaymentOutput_meth, delayed_payment_output_ref);
		}
		case LDKSpendableOutputDescriptor_StaticPaymentOutput: {
			LDKStaticPaymentOutputDescriptor static_payment_output_var = obj->static_payment_output;
			uintptr_t static_payment_output_ref = 0;
			CHECK((((uintptr_t)static_payment_output_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&static_payment_output_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(static_payment_output_var);
			static_payment_output_ref = (uintptr_t)static_payment_output_var.inner & ~1;
			return (*env)->NewObject(env, LDKSpendableOutputDescriptor_StaticPaymentOutput_class, LDKSpendableOutputDescriptor_StaticPaymentOutput_meth, static_payment_output_ref);
		}
		default: abort();
	}
}
static inline LDKCVec_SpendableOutputDescriptorZ CVec_SpendableOutputDescriptorZ_clone(const LDKCVec_SpendableOutputDescriptorZ *orig) {
	LDKCVec_SpendableOutputDescriptorZ ret = { .data = MALLOC(sizeof(LDKSpendableOutputDescriptor) * orig->datalen, "LDKCVec_SpendableOutputDescriptorZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = SpendableOutputDescriptor_clone(&orig->data[i]);
	}
	return ret;
}
static jclass LDKPaymentPurpose_InvoicePayment_class = NULL;
static jmethodID LDKPaymentPurpose_InvoicePayment_meth = NULL;
static jclass LDKPaymentPurpose_SpontaneousPayment_class = NULL;
static jmethodID LDKPaymentPurpose_SpontaneousPayment_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKPaymentPurpose_init (JNIEnv *env, jclass clz) {
	LDKPaymentPurpose_InvoicePayment_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentPurpose$InvoicePayment"));
	CHECK(LDKPaymentPurpose_InvoicePayment_class != NULL);
	LDKPaymentPurpose_InvoicePayment_meth = (*env)->GetMethodID(env, LDKPaymentPurpose_InvoicePayment_class, "<init>", "([B[B)V");
	CHECK(LDKPaymentPurpose_InvoicePayment_meth != NULL);
	LDKPaymentPurpose_SpontaneousPayment_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentPurpose$SpontaneousPayment"));
	CHECK(LDKPaymentPurpose_SpontaneousPayment_class != NULL);
	LDKPaymentPurpose_SpontaneousPayment_meth = (*env)->GetMethodID(env, LDKPaymentPurpose_SpontaneousPayment_class, "<init>", "([B)V");
	CHECK(LDKPaymentPurpose_SpontaneousPayment_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKPaymentPurpose_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKPaymentPurpose *obj = (LDKPaymentPurpose*)(ptr & ~1);
	switch(obj->tag) {
		case LDKPaymentPurpose_InvoicePayment: {
			int8_tArray payment_preimage_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_preimage_arr, 0, 32, obj->invoice_payment.payment_preimage.data);
			int8_tArray payment_secret_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_secret_arr, 0, 32, obj->invoice_payment.payment_secret.data);
			return (*env)->NewObject(env, LDKPaymentPurpose_InvoicePayment_class, LDKPaymentPurpose_InvoicePayment_meth, payment_preimage_arr, payment_secret_arr);
		}
		case LDKPaymentPurpose_SpontaneousPayment: {
			int8_tArray spontaneous_payment_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, spontaneous_payment_arr, 0, 32, obj->spontaneous_payment.data);
			return (*env)->NewObject(env, LDKPaymentPurpose_SpontaneousPayment_class, LDKPaymentPurpose_SpontaneousPayment_meth, spontaneous_payment_arr);
		}
		default: abort();
	}
}
static jclass LDKEvent_FundingGenerationReady_class = NULL;
static jmethodID LDKEvent_FundingGenerationReady_meth = NULL;
static jclass LDKEvent_PaymentReceived_class = NULL;
static jmethodID LDKEvent_PaymentReceived_meth = NULL;
static jclass LDKEvent_PaymentSent_class = NULL;
static jmethodID LDKEvent_PaymentSent_meth = NULL;
static jclass LDKEvent_PaymentPathFailed_class = NULL;
static jmethodID LDKEvent_PaymentPathFailed_meth = NULL;
static jclass LDKEvent_PaymentFailed_class = NULL;
static jmethodID LDKEvent_PaymentFailed_meth = NULL;
static jclass LDKEvent_PendingHTLCsForwardable_class = NULL;
static jmethodID LDKEvent_PendingHTLCsForwardable_meth = NULL;
static jclass LDKEvent_SpendableOutputs_class = NULL;
static jmethodID LDKEvent_SpendableOutputs_meth = NULL;
static jclass LDKEvent_PaymentForwarded_class = NULL;
static jmethodID LDKEvent_PaymentForwarded_meth = NULL;
static jclass LDKEvent_ChannelClosed_class = NULL;
static jmethodID LDKEvent_ChannelClosed_meth = NULL;
static jclass LDKEvent_DiscardFunding_class = NULL;
static jmethodID LDKEvent_DiscardFunding_meth = NULL;
static jclass LDKEvent_PaymentPathSuccessful_class = NULL;
static jmethodID LDKEvent_PaymentPathSuccessful_meth = NULL;
static jclass LDKEvent_OpenChannelRequest_class = NULL;
static jmethodID LDKEvent_OpenChannelRequest_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKEvent_init (JNIEnv *env, jclass clz) {
	LDKEvent_FundingGenerationReady_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$FundingGenerationReady"));
	CHECK(LDKEvent_FundingGenerationReady_class != NULL);
	LDKEvent_FundingGenerationReady_meth = (*env)->GetMethodID(env, LDKEvent_FundingGenerationReady_class, "<init>", "([BJ[BJ)V");
	CHECK(LDKEvent_FundingGenerationReady_meth != NULL);
	LDKEvent_PaymentReceived_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$PaymentReceived"));
	CHECK(LDKEvent_PaymentReceived_class != NULL);
	LDKEvent_PaymentReceived_meth = (*env)->GetMethodID(env, LDKEvent_PaymentReceived_class, "<init>", "([BJJ)V");
	CHECK(LDKEvent_PaymentReceived_meth != NULL);
	LDKEvent_PaymentSent_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$PaymentSent"));
	CHECK(LDKEvent_PaymentSent_class != NULL);
	LDKEvent_PaymentSent_meth = (*env)->GetMethodID(env, LDKEvent_PaymentSent_class, "<init>", "([B[B[BJ)V");
	CHECK(LDKEvent_PaymentSent_meth != NULL);
	LDKEvent_PaymentPathFailed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$PaymentPathFailed"));
	CHECK(LDKEvent_PaymentPathFailed_class != NULL);
	LDKEvent_PaymentPathFailed_meth = (*env)->GetMethodID(env, LDKEvent_PaymentPathFailed_class, "<init>", "([B[BZJZ[JJJ)V");
	CHECK(LDKEvent_PaymentPathFailed_meth != NULL);
	LDKEvent_PaymentFailed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$PaymentFailed"));
	CHECK(LDKEvent_PaymentFailed_class != NULL);
	LDKEvent_PaymentFailed_meth = (*env)->GetMethodID(env, LDKEvent_PaymentFailed_class, "<init>", "([B[B)V");
	CHECK(LDKEvent_PaymentFailed_meth != NULL);
	LDKEvent_PendingHTLCsForwardable_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$PendingHTLCsForwardable"));
	CHECK(LDKEvent_PendingHTLCsForwardable_class != NULL);
	LDKEvent_PendingHTLCsForwardable_meth = (*env)->GetMethodID(env, LDKEvent_PendingHTLCsForwardable_class, "<init>", "(J)V");
	CHECK(LDKEvent_PendingHTLCsForwardable_meth != NULL);
	LDKEvent_SpendableOutputs_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$SpendableOutputs"));
	CHECK(LDKEvent_SpendableOutputs_class != NULL);
	LDKEvent_SpendableOutputs_meth = (*env)->GetMethodID(env, LDKEvent_SpendableOutputs_class, "<init>", "([J)V");
	CHECK(LDKEvent_SpendableOutputs_meth != NULL);
	LDKEvent_PaymentForwarded_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$PaymentForwarded"));
	CHECK(LDKEvent_PaymentForwarded_class != NULL);
	LDKEvent_PaymentForwarded_meth = (*env)->GetMethodID(env, LDKEvent_PaymentForwarded_class, "<init>", "(JZ)V");
	CHECK(LDKEvent_PaymentForwarded_meth != NULL);
	LDKEvent_ChannelClosed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$ChannelClosed"));
	CHECK(LDKEvent_ChannelClosed_class != NULL);
	LDKEvent_ChannelClosed_meth = (*env)->GetMethodID(env, LDKEvent_ChannelClosed_class, "<init>", "([BJJ)V");
	CHECK(LDKEvent_ChannelClosed_meth != NULL);
	LDKEvent_DiscardFunding_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$DiscardFunding"));
	CHECK(LDKEvent_DiscardFunding_class != NULL);
	LDKEvent_DiscardFunding_meth = (*env)->GetMethodID(env, LDKEvent_DiscardFunding_class, "<init>", "([B[B)V");
	CHECK(LDKEvent_DiscardFunding_meth != NULL);
	LDKEvent_PaymentPathSuccessful_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$PaymentPathSuccessful"));
	CHECK(LDKEvent_PaymentPathSuccessful_class != NULL);
	LDKEvent_PaymentPathSuccessful_meth = (*env)->GetMethodID(env, LDKEvent_PaymentPathSuccessful_class, "<init>", "([B[B[J)V");
	CHECK(LDKEvent_PaymentPathSuccessful_meth != NULL);
	LDKEvent_OpenChannelRequest_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEvent$OpenChannelRequest"));
	CHECK(LDKEvent_OpenChannelRequest_class != NULL);
	LDKEvent_OpenChannelRequest_meth = (*env)->GetMethodID(env, LDKEvent_OpenChannelRequest_class, "<init>", "([B[BJJ)V");
	CHECK(LDKEvent_OpenChannelRequest_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKEvent_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKEvent *obj = (LDKEvent*)(ptr & ~1);
	switch(obj->tag) {
		case LDKEvent_FundingGenerationReady: {
			int8_tArray temporary_channel_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, temporary_channel_id_arr, 0, 32, obj->funding_generation_ready.temporary_channel_id.data);
			LDKCVec_u8Z output_script_var = obj->funding_generation_ready.output_script;
			int8_tArray output_script_arr = (*env)->NewByteArray(env, output_script_var.datalen);
			(*env)->SetByteArrayRegion(env, output_script_arr, 0, output_script_var.datalen, output_script_var.data);
			return (*env)->NewObject(env, LDKEvent_FundingGenerationReady_class, LDKEvent_FundingGenerationReady_meth, temporary_channel_id_arr, obj->funding_generation_ready.channel_value_satoshis, output_script_arr, obj->funding_generation_ready.user_channel_id);
		}
		case LDKEvent_PaymentReceived: {
			int8_tArray payment_hash_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_hash_arr, 0, 32, obj->payment_received.payment_hash.data);
			uintptr_t purpose_ref = ((uintptr_t)&obj->payment_received.purpose) | 1;
			return (*env)->NewObject(env, LDKEvent_PaymentReceived_class, LDKEvent_PaymentReceived_meth, payment_hash_arr, obj->payment_received.amt, purpose_ref);
		}
		case LDKEvent_PaymentSent: {
			int8_tArray payment_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_id_arr, 0, 32, obj->payment_sent.payment_id.data);
			int8_tArray payment_preimage_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_preimage_arr, 0, 32, obj->payment_sent.payment_preimage.data);
			int8_tArray payment_hash_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_hash_arr, 0, 32, obj->payment_sent.payment_hash.data);
			uintptr_t fee_paid_msat_ref = ((uintptr_t)&obj->payment_sent.fee_paid_msat) | 1;
			return (*env)->NewObject(env, LDKEvent_PaymentSent_class, LDKEvent_PaymentSent_meth, payment_id_arr, payment_preimage_arr, payment_hash_arr, fee_paid_msat_ref);
		}
		case LDKEvent_PaymentPathFailed: {
			int8_tArray payment_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_id_arr, 0, 32, obj->payment_path_failed.payment_id.data);
			int8_tArray payment_hash_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_hash_arr, 0, 32, obj->payment_path_failed.payment_hash.data);
			uintptr_t network_update_ref = ((uintptr_t)&obj->payment_path_failed.network_update) | 1;
			LDKCVec_RouteHopZ path_var = obj->payment_path_failed.path;
			int64_tArray path_arr = NULL;
			path_arr = (*env)->NewLongArray(env, path_var.datalen);
			int64_t *path_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, path_arr, NULL);
			for (size_t k = 0; k < path_var.datalen; k++) {
				LDKRouteHop path_conv_10_var = path_var.data[k];
				uintptr_t path_conv_10_ref = 0;
				CHECK((((uintptr_t)path_conv_10_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
				CHECK((((uintptr_t)&path_conv_10_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
				CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_var);
				path_conv_10_ref = (uintptr_t)path_conv_10_var.inner & ~1;
				path_arr_ptr[k] = path_conv_10_ref;
			}
			(*env)->ReleasePrimitiveArrayCritical(env, path_arr, path_arr_ptr, 0);
			uintptr_t short_channel_id_ref = ((uintptr_t)&obj->payment_path_failed.short_channel_id) | 1;
			LDKRouteParameters retry_var = obj->payment_path_failed.retry;
			uintptr_t retry_ref = 0;
			if ((uintptr_t)retry_var.inner > 4096) {
				CHECK((((uintptr_t)retry_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
				CHECK((((uintptr_t)&retry_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(retry_var);
				retry_ref = (uintptr_t)retry_var.inner & ~1;
			}
			return (*env)->NewObject(env, LDKEvent_PaymentPathFailed_class, LDKEvent_PaymentPathFailed_meth, payment_id_arr, payment_hash_arr, obj->payment_path_failed.rejected_by_dest, network_update_ref, obj->payment_path_failed.all_paths_failed, path_arr, short_channel_id_ref, retry_ref);
		}
		case LDKEvent_PaymentFailed: {
			int8_tArray payment_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_id_arr, 0, 32, obj->payment_failed.payment_id.data);
			int8_tArray payment_hash_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_hash_arr, 0, 32, obj->payment_failed.payment_hash.data);
			return (*env)->NewObject(env, LDKEvent_PaymentFailed_class, LDKEvent_PaymentFailed_meth, payment_id_arr, payment_hash_arr);
		}
		case LDKEvent_PendingHTLCsForwardable: {
			return (*env)->NewObject(env, LDKEvent_PendingHTLCsForwardable_class, LDKEvent_PendingHTLCsForwardable_meth, obj->pending_htl_cs_forwardable.time_forwardable);
		}
		case LDKEvent_SpendableOutputs: {
			LDKCVec_SpendableOutputDescriptorZ outputs_var = obj->spendable_outputs.outputs;
			int64_tArray outputs_arr = NULL;
			outputs_arr = (*env)->NewLongArray(env, outputs_var.datalen);
			int64_t *outputs_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, outputs_arr, NULL);
			for (size_t b = 0; b < outputs_var.datalen; b++) {
				uintptr_t outputs_conv_27_ref = ((uintptr_t)&outputs_var.data[b]) | 1;
				outputs_arr_ptr[b] = outputs_conv_27_ref;
			}
			(*env)->ReleasePrimitiveArrayCritical(env, outputs_arr, outputs_arr_ptr, 0);
			return (*env)->NewObject(env, LDKEvent_SpendableOutputs_class, LDKEvent_SpendableOutputs_meth, outputs_arr);
		}
		case LDKEvent_PaymentForwarded: {
			uintptr_t fee_earned_msat_ref = ((uintptr_t)&obj->payment_forwarded.fee_earned_msat) | 1;
			return (*env)->NewObject(env, LDKEvent_PaymentForwarded_class, LDKEvent_PaymentForwarded_meth, fee_earned_msat_ref, obj->payment_forwarded.claim_from_onchain_tx);
		}
		case LDKEvent_ChannelClosed: {
			int8_tArray channel_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, channel_id_arr, 0, 32, obj->channel_closed.channel_id.data);
			uintptr_t reason_ref = ((uintptr_t)&obj->channel_closed.reason) | 1;
			return (*env)->NewObject(env, LDKEvent_ChannelClosed_class, LDKEvent_ChannelClosed_meth, channel_id_arr, obj->channel_closed.user_channel_id, reason_ref);
		}
		case LDKEvent_DiscardFunding: {
			int8_tArray channel_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, channel_id_arr, 0, 32, obj->discard_funding.channel_id.data);
			LDKTransaction transaction_var = obj->discard_funding.transaction;
			int8_tArray transaction_arr = (*env)->NewByteArray(env, transaction_var.datalen);
			(*env)->SetByteArrayRegion(env, transaction_arr, 0, transaction_var.datalen, transaction_var.data);
			return (*env)->NewObject(env, LDKEvent_DiscardFunding_class, LDKEvent_DiscardFunding_meth, channel_id_arr, transaction_arr);
		}
		case LDKEvent_PaymentPathSuccessful: {
			int8_tArray payment_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_id_arr, 0, 32, obj->payment_path_successful.payment_id.data);
			int8_tArray payment_hash_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_hash_arr, 0, 32, obj->payment_path_successful.payment_hash.data);
			LDKCVec_RouteHopZ path_var = obj->payment_path_successful.path;
			int64_tArray path_arr = NULL;
			path_arr = (*env)->NewLongArray(env, path_var.datalen);
			int64_t *path_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, path_arr, NULL);
			for (size_t k = 0; k < path_var.datalen; k++) {
				LDKRouteHop path_conv_10_var = path_var.data[k];
				uintptr_t path_conv_10_ref = 0;
				CHECK((((uintptr_t)path_conv_10_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
				CHECK((((uintptr_t)&path_conv_10_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
				CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_var);
				path_conv_10_ref = (uintptr_t)path_conv_10_var.inner & ~1;
				path_arr_ptr[k] = path_conv_10_ref;
			}
			(*env)->ReleasePrimitiveArrayCritical(env, path_arr, path_arr_ptr, 0);
			return (*env)->NewObject(env, LDKEvent_PaymentPathSuccessful_class, LDKEvent_PaymentPathSuccessful_meth, payment_id_arr, payment_hash_arr, path_arr);
		}
		case LDKEvent_OpenChannelRequest: {
			int8_tArray temporary_channel_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, temporary_channel_id_arr, 0, 32, obj->open_channel_request.temporary_channel_id.data);
			int8_tArray counterparty_node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, counterparty_node_id_arr, 0, 33, obj->open_channel_request.counterparty_node_id.compressed_form);
			return (*env)->NewObject(env, LDKEvent_OpenChannelRequest_class, LDKEvent_OpenChannelRequest_meth, temporary_channel_id_arr, counterparty_node_id_arr, obj->open_channel_request.funding_satoshis, obj->open_channel_request.push_msat);
		}
		default: abort();
	}
}
static jclass LDKCOption_EventZ_Some_class = NULL;
static jmethodID LDKCOption_EventZ_Some_meth = NULL;
static jclass LDKCOption_EventZ_None_class = NULL;
static jmethodID LDKCOption_EventZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1EventZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_EventZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_EventZ$Some"));
	CHECK(LDKCOption_EventZ_Some_class != NULL);
	LDKCOption_EventZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_EventZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_EventZ_Some_meth != NULL);
	LDKCOption_EventZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_EventZ$None"));
	CHECK(LDKCOption_EventZ_None_class != NULL);
	LDKCOption_EventZ_None_meth = (*env)->GetMethodID(env, LDKCOption_EventZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_EventZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1EventZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_EventZ *obj = (LDKCOption_EventZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_EventZ_Some: {
			uintptr_t some_ref = ((uintptr_t)&obj->some) | 1;
			return (*env)->NewObject(env, LDKCOption_EventZ_Some_class, LDKCOption_EventZ_Some_meth, some_ref);
		}
		case LDKCOption_EventZ_None: {
			return (*env)->NewObject(env, LDKCOption_EventZ_None_class, LDKCOption_EventZ_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKCOption_EventZ CResult_COption_EventZDecodeErrorZ_get_ok(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return COption_EventZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_EventZDecodeErrorZ* owner_conv = (LDKCResult_COption_EventZDecodeErrorZ*)(owner & ~1);
	LDKCOption_EventZ *ret_copy = MALLOC(sizeof(LDKCOption_EventZ), "LDKCOption_EventZ");
	*ret_copy = CResult_COption_EventZDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_COption_EventZDecodeErrorZ_get_err(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_EventZDecodeErrorZ* owner_conv = (LDKCResult_COption_EventZDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_COption_EventZDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static jclass LDKErrorAction_DisconnectPeer_class = NULL;
static jmethodID LDKErrorAction_DisconnectPeer_meth = NULL;
static jclass LDKErrorAction_IgnoreError_class = NULL;
static jmethodID LDKErrorAction_IgnoreError_meth = NULL;
static jclass LDKErrorAction_IgnoreAndLog_class = NULL;
static jmethodID LDKErrorAction_IgnoreAndLog_meth = NULL;
static jclass LDKErrorAction_IgnoreDuplicateGossip_class = NULL;
static jmethodID LDKErrorAction_IgnoreDuplicateGossip_meth = NULL;
static jclass LDKErrorAction_SendErrorMessage_class = NULL;
static jmethodID LDKErrorAction_SendErrorMessage_meth = NULL;
static jclass LDKErrorAction_SendWarningMessage_class = NULL;
static jmethodID LDKErrorAction_SendWarningMessage_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKErrorAction_init (JNIEnv *env, jclass clz) {
	LDKErrorAction_DisconnectPeer_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKErrorAction$DisconnectPeer"));
	CHECK(LDKErrorAction_DisconnectPeer_class != NULL);
	LDKErrorAction_DisconnectPeer_meth = (*env)->GetMethodID(env, LDKErrorAction_DisconnectPeer_class, "<init>", "(J)V");
	CHECK(LDKErrorAction_DisconnectPeer_meth != NULL);
	LDKErrorAction_IgnoreError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKErrorAction$IgnoreError"));
	CHECK(LDKErrorAction_IgnoreError_class != NULL);
	LDKErrorAction_IgnoreError_meth = (*env)->GetMethodID(env, LDKErrorAction_IgnoreError_class, "<init>", "()V");
	CHECK(LDKErrorAction_IgnoreError_meth != NULL);
	LDKErrorAction_IgnoreAndLog_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKErrorAction$IgnoreAndLog"));
	CHECK(LDKErrorAction_IgnoreAndLog_class != NULL);
	LDKErrorAction_IgnoreAndLog_meth = (*env)->GetMethodID(env, LDKErrorAction_IgnoreAndLog_class, "<init>", "(Lorg/ldk/enums/Level;)V");
	CHECK(LDKErrorAction_IgnoreAndLog_meth != NULL);
	LDKErrorAction_IgnoreDuplicateGossip_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKErrorAction$IgnoreDuplicateGossip"));
	CHECK(LDKErrorAction_IgnoreDuplicateGossip_class != NULL);
	LDKErrorAction_IgnoreDuplicateGossip_meth = (*env)->GetMethodID(env, LDKErrorAction_IgnoreDuplicateGossip_class, "<init>", "()V");
	CHECK(LDKErrorAction_IgnoreDuplicateGossip_meth != NULL);
	LDKErrorAction_SendErrorMessage_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKErrorAction$SendErrorMessage"));
	CHECK(LDKErrorAction_SendErrorMessage_class != NULL);
	LDKErrorAction_SendErrorMessage_meth = (*env)->GetMethodID(env, LDKErrorAction_SendErrorMessage_class, "<init>", "(J)V");
	CHECK(LDKErrorAction_SendErrorMessage_meth != NULL);
	LDKErrorAction_SendWarningMessage_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKErrorAction$SendWarningMessage"));
	CHECK(LDKErrorAction_SendWarningMessage_class != NULL);
	LDKErrorAction_SendWarningMessage_meth = (*env)->GetMethodID(env, LDKErrorAction_SendWarningMessage_class, "<init>", "(JLorg/ldk/enums/Level;)V");
	CHECK(LDKErrorAction_SendWarningMessage_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKErrorAction_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKErrorAction *obj = (LDKErrorAction*)(ptr & ~1);
	switch(obj->tag) {
		case LDKErrorAction_DisconnectPeer: {
			LDKErrorMessage msg_var = obj->disconnect_peer.msg;
			uintptr_t msg_ref = 0;
			if ((uintptr_t)msg_var.inner > 4096) {
				CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
				CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
				msg_ref = (uintptr_t)msg_var.inner & ~1;
			}
			return (*env)->NewObject(env, LDKErrorAction_DisconnectPeer_class, LDKErrorAction_DisconnectPeer_meth, msg_ref);
		}
		case LDKErrorAction_IgnoreError: {
			return (*env)->NewObject(env, LDKErrorAction_IgnoreError_class, LDKErrorAction_IgnoreError_meth);
		}
		case LDKErrorAction_IgnoreAndLog: {
			jclass ignore_and_log_conv = LDKLevel_to_java(env, obj->ignore_and_log);
			return (*env)->NewObject(env, LDKErrorAction_IgnoreAndLog_class, LDKErrorAction_IgnoreAndLog_meth, ignore_and_log_conv);
		}
		case LDKErrorAction_IgnoreDuplicateGossip: {
			return (*env)->NewObject(env, LDKErrorAction_IgnoreDuplicateGossip_class, LDKErrorAction_IgnoreDuplicateGossip_meth);
		}
		case LDKErrorAction_SendErrorMessage: {
			LDKErrorMessage msg_var = obj->send_error_message.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKErrorAction_SendErrorMessage_class, LDKErrorAction_SendErrorMessage_meth, msg_ref);
		}
		case LDKErrorAction_SendWarningMessage: {
			LDKWarningMessage msg_var = obj->send_warning_message.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			jclass log_level_conv = LDKLevel_to_java(env, obj->send_warning_message.log_level);
			return (*env)->NewObject(env, LDKErrorAction_SendWarningMessage_class, LDKErrorAction_SendWarningMessage_meth, msg_ref, log_level_conv);
		}
		default: abort();
	}
}
static jclass LDKMessageSendEvent_SendAcceptChannel_class = NULL;
static jmethodID LDKMessageSendEvent_SendAcceptChannel_meth = NULL;
static jclass LDKMessageSendEvent_SendOpenChannel_class = NULL;
static jmethodID LDKMessageSendEvent_SendOpenChannel_meth = NULL;
static jclass LDKMessageSendEvent_SendFundingCreated_class = NULL;
static jmethodID LDKMessageSendEvent_SendFundingCreated_meth = NULL;
static jclass LDKMessageSendEvent_SendFundingSigned_class = NULL;
static jmethodID LDKMessageSendEvent_SendFundingSigned_meth = NULL;
static jclass LDKMessageSendEvent_SendFundingLocked_class = NULL;
static jmethodID LDKMessageSendEvent_SendFundingLocked_meth = NULL;
static jclass LDKMessageSendEvent_SendAnnouncementSignatures_class = NULL;
static jmethodID LDKMessageSendEvent_SendAnnouncementSignatures_meth = NULL;
static jclass LDKMessageSendEvent_UpdateHTLCs_class = NULL;
static jmethodID LDKMessageSendEvent_UpdateHTLCs_meth = NULL;
static jclass LDKMessageSendEvent_SendRevokeAndACK_class = NULL;
static jmethodID LDKMessageSendEvent_SendRevokeAndACK_meth = NULL;
static jclass LDKMessageSendEvent_SendClosingSigned_class = NULL;
static jmethodID LDKMessageSendEvent_SendClosingSigned_meth = NULL;
static jclass LDKMessageSendEvent_SendShutdown_class = NULL;
static jmethodID LDKMessageSendEvent_SendShutdown_meth = NULL;
static jclass LDKMessageSendEvent_SendChannelReestablish_class = NULL;
static jmethodID LDKMessageSendEvent_SendChannelReestablish_meth = NULL;
static jclass LDKMessageSendEvent_BroadcastChannelAnnouncement_class = NULL;
static jmethodID LDKMessageSendEvent_BroadcastChannelAnnouncement_meth = NULL;
static jclass LDKMessageSendEvent_BroadcastNodeAnnouncement_class = NULL;
static jmethodID LDKMessageSendEvent_BroadcastNodeAnnouncement_meth = NULL;
static jclass LDKMessageSendEvent_BroadcastChannelUpdate_class = NULL;
static jmethodID LDKMessageSendEvent_BroadcastChannelUpdate_meth = NULL;
static jclass LDKMessageSendEvent_SendChannelUpdate_class = NULL;
static jmethodID LDKMessageSendEvent_SendChannelUpdate_meth = NULL;
static jclass LDKMessageSendEvent_HandleError_class = NULL;
static jmethodID LDKMessageSendEvent_HandleError_meth = NULL;
static jclass LDKMessageSendEvent_SendChannelRangeQuery_class = NULL;
static jmethodID LDKMessageSendEvent_SendChannelRangeQuery_meth = NULL;
static jclass LDKMessageSendEvent_SendShortIdsQuery_class = NULL;
static jmethodID LDKMessageSendEvent_SendShortIdsQuery_meth = NULL;
static jclass LDKMessageSendEvent_SendReplyChannelRange_class = NULL;
static jmethodID LDKMessageSendEvent_SendReplyChannelRange_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKMessageSendEvent_init (JNIEnv *env, jclass clz) {
	LDKMessageSendEvent_SendAcceptChannel_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendAcceptChannel"));
	CHECK(LDKMessageSendEvent_SendAcceptChannel_class != NULL);
	LDKMessageSendEvent_SendAcceptChannel_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendAcceptChannel_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendAcceptChannel_meth != NULL);
	LDKMessageSendEvent_SendOpenChannel_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendOpenChannel"));
	CHECK(LDKMessageSendEvent_SendOpenChannel_class != NULL);
	LDKMessageSendEvent_SendOpenChannel_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendOpenChannel_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendOpenChannel_meth != NULL);
	LDKMessageSendEvent_SendFundingCreated_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendFundingCreated"));
	CHECK(LDKMessageSendEvent_SendFundingCreated_class != NULL);
	LDKMessageSendEvent_SendFundingCreated_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendFundingCreated_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendFundingCreated_meth != NULL);
	LDKMessageSendEvent_SendFundingSigned_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendFundingSigned"));
	CHECK(LDKMessageSendEvent_SendFundingSigned_class != NULL);
	LDKMessageSendEvent_SendFundingSigned_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendFundingSigned_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendFundingSigned_meth != NULL);
	LDKMessageSendEvent_SendFundingLocked_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendFundingLocked"));
	CHECK(LDKMessageSendEvent_SendFundingLocked_class != NULL);
	LDKMessageSendEvent_SendFundingLocked_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendFundingLocked_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendFundingLocked_meth != NULL);
	LDKMessageSendEvent_SendAnnouncementSignatures_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendAnnouncementSignatures"));
	CHECK(LDKMessageSendEvent_SendAnnouncementSignatures_class != NULL);
	LDKMessageSendEvent_SendAnnouncementSignatures_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendAnnouncementSignatures_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendAnnouncementSignatures_meth != NULL);
	LDKMessageSendEvent_UpdateHTLCs_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$UpdateHTLCs"));
	CHECK(LDKMessageSendEvent_UpdateHTLCs_class != NULL);
	LDKMessageSendEvent_UpdateHTLCs_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_UpdateHTLCs_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_UpdateHTLCs_meth != NULL);
	LDKMessageSendEvent_SendRevokeAndACK_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendRevokeAndACK"));
	CHECK(LDKMessageSendEvent_SendRevokeAndACK_class != NULL);
	LDKMessageSendEvent_SendRevokeAndACK_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendRevokeAndACK_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendRevokeAndACK_meth != NULL);
	LDKMessageSendEvent_SendClosingSigned_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendClosingSigned"));
	CHECK(LDKMessageSendEvent_SendClosingSigned_class != NULL);
	LDKMessageSendEvent_SendClosingSigned_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendClosingSigned_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendClosingSigned_meth != NULL);
	LDKMessageSendEvent_SendShutdown_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendShutdown"));
	CHECK(LDKMessageSendEvent_SendShutdown_class != NULL);
	LDKMessageSendEvent_SendShutdown_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendShutdown_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendShutdown_meth != NULL);
	LDKMessageSendEvent_SendChannelReestablish_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendChannelReestablish"));
	CHECK(LDKMessageSendEvent_SendChannelReestablish_class != NULL);
	LDKMessageSendEvent_SendChannelReestablish_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendChannelReestablish_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendChannelReestablish_meth != NULL);
	LDKMessageSendEvent_BroadcastChannelAnnouncement_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$BroadcastChannelAnnouncement"));
	CHECK(LDKMessageSendEvent_BroadcastChannelAnnouncement_class != NULL);
	LDKMessageSendEvent_BroadcastChannelAnnouncement_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_BroadcastChannelAnnouncement_class, "<init>", "(JJ)V");
	CHECK(LDKMessageSendEvent_BroadcastChannelAnnouncement_meth != NULL);
	LDKMessageSendEvent_BroadcastNodeAnnouncement_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$BroadcastNodeAnnouncement"));
	CHECK(LDKMessageSendEvent_BroadcastNodeAnnouncement_class != NULL);
	LDKMessageSendEvent_BroadcastNodeAnnouncement_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_BroadcastNodeAnnouncement_class, "<init>", "(J)V");
	CHECK(LDKMessageSendEvent_BroadcastNodeAnnouncement_meth != NULL);
	LDKMessageSendEvent_BroadcastChannelUpdate_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$BroadcastChannelUpdate"));
	CHECK(LDKMessageSendEvent_BroadcastChannelUpdate_class != NULL);
	LDKMessageSendEvent_BroadcastChannelUpdate_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_BroadcastChannelUpdate_class, "<init>", "(J)V");
	CHECK(LDKMessageSendEvent_BroadcastChannelUpdate_meth != NULL);
	LDKMessageSendEvent_SendChannelUpdate_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendChannelUpdate"));
	CHECK(LDKMessageSendEvent_SendChannelUpdate_class != NULL);
	LDKMessageSendEvent_SendChannelUpdate_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendChannelUpdate_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendChannelUpdate_meth != NULL);
	LDKMessageSendEvent_HandleError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$HandleError"));
	CHECK(LDKMessageSendEvent_HandleError_class != NULL);
	LDKMessageSendEvent_HandleError_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_HandleError_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_HandleError_meth != NULL);
	LDKMessageSendEvent_SendChannelRangeQuery_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendChannelRangeQuery"));
	CHECK(LDKMessageSendEvent_SendChannelRangeQuery_class != NULL);
	LDKMessageSendEvent_SendChannelRangeQuery_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendChannelRangeQuery_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendChannelRangeQuery_meth != NULL);
	LDKMessageSendEvent_SendShortIdsQuery_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendShortIdsQuery"));
	CHECK(LDKMessageSendEvent_SendShortIdsQuery_class != NULL);
	LDKMessageSendEvent_SendShortIdsQuery_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendShortIdsQuery_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendShortIdsQuery_meth != NULL);
	LDKMessageSendEvent_SendReplyChannelRange_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKMessageSendEvent$SendReplyChannelRange"));
	CHECK(LDKMessageSendEvent_SendReplyChannelRange_class != NULL);
	LDKMessageSendEvent_SendReplyChannelRange_meth = (*env)->GetMethodID(env, LDKMessageSendEvent_SendReplyChannelRange_class, "<init>", "([BJ)V");
	CHECK(LDKMessageSendEvent_SendReplyChannelRange_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKMessageSendEvent_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKMessageSendEvent *obj = (LDKMessageSendEvent*)(ptr & ~1);
	switch(obj->tag) {
		case LDKMessageSendEvent_SendAcceptChannel: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_accept_channel.node_id.compressed_form);
			LDKAcceptChannel msg_var = obj->send_accept_channel.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendAcceptChannel_class, LDKMessageSendEvent_SendAcceptChannel_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendOpenChannel: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_open_channel.node_id.compressed_form);
			LDKOpenChannel msg_var = obj->send_open_channel.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendOpenChannel_class, LDKMessageSendEvent_SendOpenChannel_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendFundingCreated: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_funding_created.node_id.compressed_form);
			LDKFundingCreated msg_var = obj->send_funding_created.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendFundingCreated_class, LDKMessageSendEvent_SendFundingCreated_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendFundingSigned: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_funding_signed.node_id.compressed_form);
			LDKFundingSigned msg_var = obj->send_funding_signed.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendFundingSigned_class, LDKMessageSendEvent_SendFundingSigned_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendFundingLocked: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_funding_locked.node_id.compressed_form);
			LDKFundingLocked msg_var = obj->send_funding_locked.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendFundingLocked_class, LDKMessageSendEvent_SendFundingLocked_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendAnnouncementSignatures: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_announcement_signatures.node_id.compressed_form);
			LDKAnnouncementSignatures msg_var = obj->send_announcement_signatures.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendAnnouncementSignatures_class, LDKMessageSendEvent_SendAnnouncementSignatures_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_UpdateHTLCs: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->update_htl_cs.node_id.compressed_form);
			LDKCommitmentUpdate updates_var = obj->update_htl_cs.updates;
			uintptr_t updates_ref = 0;
			CHECK((((uintptr_t)updates_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&updates_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(updates_var);
			updates_ref = (uintptr_t)updates_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_UpdateHTLCs_class, LDKMessageSendEvent_UpdateHTLCs_meth, node_id_arr, updates_ref);
		}
		case LDKMessageSendEvent_SendRevokeAndACK: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_revoke_and_ack.node_id.compressed_form);
			LDKRevokeAndACK msg_var = obj->send_revoke_and_ack.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendRevokeAndACK_class, LDKMessageSendEvent_SendRevokeAndACK_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendClosingSigned: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_closing_signed.node_id.compressed_form);
			LDKClosingSigned msg_var = obj->send_closing_signed.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendClosingSigned_class, LDKMessageSendEvent_SendClosingSigned_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendShutdown: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_shutdown.node_id.compressed_form);
			LDKShutdown msg_var = obj->send_shutdown.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendShutdown_class, LDKMessageSendEvent_SendShutdown_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendChannelReestablish: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_channel_reestablish.node_id.compressed_form);
			LDKChannelReestablish msg_var = obj->send_channel_reestablish.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendChannelReestablish_class, LDKMessageSendEvent_SendChannelReestablish_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_BroadcastChannelAnnouncement: {
			LDKChannelAnnouncement msg_var = obj->broadcast_channel_announcement.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			LDKChannelUpdate update_msg_var = obj->broadcast_channel_announcement.update_msg;
			uintptr_t update_msg_ref = 0;
			CHECK((((uintptr_t)update_msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&update_msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(update_msg_var);
			update_msg_ref = (uintptr_t)update_msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_BroadcastChannelAnnouncement_class, LDKMessageSendEvent_BroadcastChannelAnnouncement_meth, msg_ref, update_msg_ref);
		}
		case LDKMessageSendEvent_BroadcastNodeAnnouncement: {
			LDKNodeAnnouncement msg_var = obj->broadcast_node_announcement.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_BroadcastNodeAnnouncement_class, LDKMessageSendEvent_BroadcastNodeAnnouncement_meth, msg_ref);
		}
		case LDKMessageSendEvent_BroadcastChannelUpdate: {
			LDKChannelUpdate msg_var = obj->broadcast_channel_update.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_BroadcastChannelUpdate_class, LDKMessageSendEvent_BroadcastChannelUpdate_meth, msg_ref);
		}
		case LDKMessageSendEvent_SendChannelUpdate: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_channel_update.node_id.compressed_form);
			LDKChannelUpdate msg_var = obj->send_channel_update.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendChannelUpdate_class, LDKMessageSendEvent_SendChannelUpdate_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_HandleError: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->handle_error.node_id.compressed_form);
			uintptr_t action_ref = ((uintptr_t)&obj->handle_error.action) | 1;
			return (*env)->NewObject(env, LDKMessageSendEvent_HandleError_class, LDKMessageSendEvent_HandleError_meth, node_id_arr, action_ref);
		}
		case LDKMessageSendEvent_SendChannelRangeQuery: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_channel_range_query.node_id.compressed_form);
			LDKQueryChannelRange msg_var = obj->send_channel_range_query.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendChannelRangeQuery_class, LDKMessageSendEvent_SendChannelRangeQuery_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendShortIdsQuery: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_short_ids_query.node_id.compressed_form);
			LDKQueryShortChannelIds msg_var = obj->send_short_ids_query.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendShortIdsQuery_class, LDKMessageSendEvent_SendShortIdsQuery_meth, node_id_arr, msg_ref);
		}
		case LDKMessageSendEvent_SendReplyChannelRange: {
			int8_tArray node_id_arr = (*env)->NewByteArray(env, 33);
			(*env)->SetByteArrayRegion(env, node_id_arr, 0, 33, obj->send_reply_channel_range.node_id.compressed_form);
			LDKReplyChannelRange msg_var = obj->send_reply_channel_range.msg;
			uintptr_t msg_ref = 0;
			CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
			msg_ref = (uintptr_t)msg_var.inner & ~1;
			return (*env)->NewObject(env, LDKMessageSendEvent_SendReplyChannelRange_class, LDKMessageSendEvent_SendReplyChannelRange_meth, node_id_arr, msg_ref);
		}
		default: abort();
	}
}
static inline LDKCVec_MessageSendEventZ CVec_MessageSendEventZ_clone(const LDKCVec_MessageSendEventZ *orig) {
	LDKCVec_MessageSendEventZ ret = { .data = MALLOC(sizeof(LDKMessageSendEvent) * orig->datalen, "LDKCVec_MessageSendEventZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = MessageSendEvent_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKFixedPenaltyScorer CResult_FixedPenaltyScorerDecodeErrorZ_get_ok(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return FixedPenaltyScorer_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* owner_conv = (LDKCResult_FixedPenaltyScorerDecodeErrorZ*)(owner & ~1);
	LDKFixedPenaltyScorer ret_var = CResult_FixedPenaltyScorerDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_FixedPenaltyScorerDecodeErrorZ_get_err(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* owner_conv = (LDKCResult_FixedPenaltyScorerDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_FixedPenaltyScorerDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKScoringParameters CResult_ScoringParametersDecodeErrorZ_get_ok(LDKCResult_ScoringParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ScoringParameters_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ScoringParametersDecodeErrorZ* owner_conv = (LDKCResult_ScoringParametersDecodeErrorZ*)(owner & ~1);
	LDKScoringParameters ret_var = CResult_ScoringParametersDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ScoringParametersDecodeErrorZ_get_err(LDKCResult_ScoringParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ScoringParametersDecodeErrorZ* owner_conv = (LDKCResult_ScoringParametersDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ScoringParametersDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKScorer *CResult_ScorerDecodeErrorZ_get_ok(LDKCResult_ScorerDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return &*owner->contents.result;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScorerDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ScorerDecodeErrorZ* owner_conv = (LDKCResult_ScorerDecodeErrorZ*)(owner & ~1);
	LDKScorer ret_var = *CResult_ScorerDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner & ~1;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ScorerDecodeErrorZ_get_err(LDKCResult_ScorerDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScorerDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ScorerDecodeErrorZ* owner_conv = (LDKCResult_ScorerDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ScorerDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKProbabilisticScoringParameters CResult_ProbabilisticScoringParametersDecodeErrorZ_get_ok(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ProbabilisticScoringParameters_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* owner_conv = (LDKCResult_ProbabilisticScoringParametersDecodeErrorZ*)(owner & ~1);
	LDKProbabilisticScoringParameters ret_var = CResult_ProbabilisticScoringParametersDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ProbabilisticScoringParametersDecodeErrorZ_get_err(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* owner_conv = (LDKCResult_ProbabilisticScoringParametersDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ProbabilisticScoringParametersDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKInitFeatures CResult_InitFeaturesDecodeErrorZ_get_ok(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return InitFeatures_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitFeaturesDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InitFeaturesDecodeErrorZ* owner_conv = (LDKCResult_InitFeaturesDecodeErrorZ*)(owner & ~1);
	LDKInitFeatures ret_var = CResult_InitFeaturesDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_InitFeaturesDecodeErrorZ_get_err(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitFeaturesDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InitFeaturesDecodeErrorZ* owner_conv = (LDKCResult_InitFeaturesDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_InitFeaturesDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelFeatures CResult_ChannelFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelFeatures_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelFeaturesDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelFeaturesDecodeErrorZ* owner_conv = (LDKCResult_ChannelFeaturesDecodeErrorZ*)(owner & ~1);
	LDKChannelFeatures ret_var = CResult_ChannelFeaturesDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelFeaturesDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelFeaturesDecodeErrorZ* owner_conv = (LDKCResult_ChannelFeaturesDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelFeaturesDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKNodeFeatures CResult_NodeFeaturesDecodeErrorZ_get_ok(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return NodeFeatures_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeFeaturesDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeFeaturesDecodeErrorZ* owner_conv = (LDKCResult_NodeFeaturesDecodeErrorZ*)(owner & ~1);
	LDKNodeFeatures ret_var = CResult_NodeFeaturesDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_NodeFeaturesDecodeErrorZ_get_err(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeFeaturesDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeFeaturesDecodeErrorZ* owner_conv = (LDKCResult_NodeFeaturesDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_NodeFeaturesDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKInvoiceFeatures CResult_InvoiceFeaturesDecodeErrorZ_get_ok(LDKCResult_InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return InvoiceFeatures_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceFeaturesDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceFeaturesDecodeErrorZ* owner_conv = (LDKCResult_InvoiceFeaturesDecodeErrorZ*)(owner & ~1);
	LDKInvoiceFeatures ret_var = CResult_InvoiceFeaturesDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_InvoiceFeaturesDecodeErrorZ_get_err(LDKCResult_InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceFeaturesDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceFeaturesDecodeErrorZ* owner_conv = (LDKCResult_InvoiceFeaturesDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_InvoiceFeaturesDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelTypeFeatures CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelTypeFeatures_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTypeFeaturesDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelTypeFeaturesDecodeErrorZ* owner_conv = (LDKCResult_ChannelTypeFeaturesDecodeErrorZ*)(owner & ~1);
	LDKChannelTypeFeatures ret_var = CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelTypeFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTypeFeaturesDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelTypeFeaturesDecodeErrorZ* owner_conv = (LDKCResult_ChannelTypeFeaturesDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelTypeFeaturesDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDelayedPaymentOutputDescriptor CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return DelayedPaymentOutputDescriptor_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* owner_conv = (LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ*)(owner & ~1);
	LDKDelayedPaymentOutputDescriptor ret_var = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* owner_conv = (LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKStaticPaymentOutputDescriptor CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return StaticPaymentOutputDescriptor_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* owner_conv = (LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ*)(owner & ~1);
	LDKStaticPaymentOutputDescriptor ret_var = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* owner_conv = (LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKSpendableOutputDescriptor CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return SpendableOutputDescriptor_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* owner_conv = (LDKCResult_SpendableOutputDescriptorDecodeErrorZ*)(owner & ~1);
	LDKSpendableOutputDescriptor *ret_copy = MALLOC(sizeof(LDKSpendableOutputDescriptor), "LDKSpendableOutputDescriptor");
	*ret_copy = CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_SpendableOutputDescriptorDecodeErrorZ_get_err(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* owner_conv = (LDKCResult_SpendableOutputDescriptorDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_SpendableOutputDescriptorDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_PaymentPreimageZ CVec_PaymentPreimageZ_clone(const LDKCVec_PaymentPreimageZ *orig) {
	LDKCVec_PaymentPreimageZ ret = { .data = MALLOC(sizeof(LDKThirtyTwoBytes) * orig->datalen, "LDKCVec_PaymentPreimageZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = ThirtyTwoBytes_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKSignature C2Tuple_SignatureCVec_SignatureZZ_get_a(LDKC2Tuple_SignatureCVec_SignatureZZ *NONNULL_PTR owner){
	return owner->a;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureCVec_1SignatureZZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_SignatureCVec_SignatureZZ* owner_conv = (LDKC2Tuple_SignatureCVec_SignatureZZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, C2Tuple_SignatureCVec_SignatureZZ_get_a(owner_conv).compact_form);
	return ret_arr;
}

static inline struct LDKCVec_SignatureZ C2Tuple_SignatureCVec_SignatureZZ_get_b(LDKC2Tuple_SignatureCVec_SignatureZZ *NONNULL_PTR owner){
	return owner->b;
}
JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureCVec_1SignatureZZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_SignatureCVec_SignatureZZ* owner_conv = (LDKC2Tuple_SignatureCVec_SignatureZZ*)(owner & ~1);
	LDKCVec_SignatureZ ret_var = C2Tuple_SignatureCVec_SignatureZZ_get_b(owner_conv);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < ret_var.datalen; i++) {
		int8_tArray ret_conv_8_arr = (*env)->NewByteArray(env, 64);
		(*env)->SetByteArrayRegion(env, ret_conv_8_arr, 0, 64, ret_var.data[i].compact_form);
		(*env)->SetObjectArrayElement(env, ret_arr, i, ret_conv_8_arr);
	}
	
	return ret_arr;
}

static inline struct LDKC2Tuple_SignatureCVec_SignatureZZ CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_ok(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return C2Tuple_SignatureCVec_SignatureZZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* owner_conv = (LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(owner & ~1);
	LDKC2Tuple_SignatureCVec_SignatureZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureCVec_SignatureZZ), "LDKC2Tuple_SignatureCVec_SignatureZZ");
	*ret_conv = CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_ok(owner_conv);
	return ((uintptr_t)ret_conv);
}

static inline void CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_err(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* owner_conv = (LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(owner & ~1);
	CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_err(owner_conv);
}

static inline struct LDKSignature CResult_SignatureNoneZ_get_ok(LDKCResult_SignatureNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SignatureNoneZ* owner_conv = (LDKCResult_SignatureNoneZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, CResult_SignatureNoneZ_get_ok(owner_conv).compact_form);
	return ret_arr;
}

static inline void CResult_SignatureNoneZ_get_err(LDKCResult_SignatureNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SignatureNoneZ* owner_conv = (LDKCResult_SignatureNoneZ*)(owner & ~1);
	CResult_SignatureNoneZ_get_err(owner_conv);
}

static inline struct LDKSignature C2Tuple_SignatureSignatureZ_get_a(LDKC2Tuple_SignatureSignatureZ *NONNULL_PTR owner){
	return owner->a;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureSignatureZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_SignatureSignatureZ* owner_conv = (LDKC2Tuple_SignatureSignatureZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, C2Tuple_SignatureSignatureZ_get_a(owner_conv).compact_form);
	return ret_arr;
}

static inline struct LDKSignature C2Tuple_SignatureSignatureZ_get_b(LDKC2Tuple_SignatureSignatureZ *NONNULL_PTR owner){
	return owner->b;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureSignatureZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_SignatureSignatureZ* owner_conv = (LDKC2Tuple_SignatureSignatureZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, C2Tuple_SignatureSignatureZ_get_b(owner_conv).compact_form);
	return ret_arr;
}

static inline struct LDKC2Tuple_SignatureSignatureZ CResult_C2Tuple_SignatureSignatureZNoneZ_get_ok(LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return C2Tuple_SignatureSignatureZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* owner_conv = (LDKCResult_C2Tuple_SignatureSignatureZNoneZ*)(owner & ~1);
	LDKC2Tuple_SignatureSignatureZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureSignatureZ), "LDKC2Tuple_SignatureSignatureZ");
	*ret_conv = CResult_C2Tuple_SignatureSignatureZNoneZ_get_ok(owner_conv);
	return ((uintptr_t)ret_conv);
}

static inline void CResult_C2Tuple_SignatureSignatureZNoneZ_get_err(LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* owner_conv = (LDKCResult_C2Tuple_SignatureSignatureZNoneZ*)(owner & ~1);
	CResult_C2Tuple_SignatureSignatureZNoneZ_get_err(owner_conv);
}

static inline struct LDKSecretKey CResult_SecretKeyNoneZ_get_ok(LDKCResult_SecretKeyNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SecretKeyNoneZ* owner_conv = (LDKCResult_SecretKeyNoneZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult_SecretKeyNoneZ_get_ok(owner_conv).bytes);
	return ret_arr;
}

static inline void CResult_SecretKeyNoneZ_get_err(LDKCResult_SecretKeyNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SecretKeyNoneZ* owner_conv = (LDKCResult_SecretKeyNoneZ*)(owner & ~1);
	CResult_SecretKeyNoneZ_get_err(owner_conv);
}

typedef struct LDKBaseSign_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID get_per_commitment_point_meth;
	jmethodID release_commitment_secret_meth;
	jmethodID validate_holder_commitment_meth;
	jmethodID channel_keys_id_meth;
	jmethodID sign_counterparty_commitment_meth;
	jmethodID validate_counterparty_revocation_meth;
	jmethodID sign_holder_commitment_and_htlcs_meth;
	jmethodID sign_justice_revoked_output_meth;
	jmethodID sign_justice_revoked_htlc_meth;
	jmethodID sign_counterparty_htlc_transaction_meth;
	jmethodID sign_closing_transaction_meth;
	jmethodID sign_channel_announcement_meth;
	jmethodID ready_channel_meth;
} LDKBaseSign_JCalls;
static void LDKBaseSign_JCalls_free(void* this_arg) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKPublicKey get_per_commitment_point_LDKBaseSign_jcall(const void* this_arg, uint64_t idx) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_per_commitment_point_meth, idx);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_per_commitment_point in LDKBaseSign from rust threw an exception.");
	}
	LDKPublicKey ret_ref;
	CHECK((*env)->GetArrayLength(env, ret) == 33);
	(*env)->GetByteArrayRegion(env, ret, 0, 33, ret_ref.compressed_form);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
LDKThirtyTwoBytes release_commitment_secret_LDKBaseSign_jcall(const void* this_arg, uint64_t idx) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->release_commitment_secret_meth, idx);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to release_commitment_secret in LDKBaseSign from rust threw an exception.");
	}
	LDKThirtyTwoBytes ret_ref;
	CHECK((*env)->GetArrayLength(env, ret) == 32);
	(*env)->GetByteArrayRegion(env, ret, 0, 32, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
LDKCResult_NoneNoneZ validate_holder_commitment_LDKBaseSign_jcall(const void* this_arg, const LDKHolderCommitmentTransaction * holder_tx, LDKCVec_PaymentPreimageZ preimages) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKHolderCommitmentTransaction holder_tx_var = *holder_tx;
	uintptr_t holder_tx_ref = 0;
	holder_tx_var = HolderCommitmentTransaction_clone(holder_tx);
	CHECK((((uintptr_t)holder_tx_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&holder_tx_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(holder_tx_var);
	holder_tx_ref = (uintptr_t)holder_tx_var.inner;
	if (holder_tx_var.is_owned) {
		holder_tx_ref |= 1;
	}
	LDKCVec_PaymentPreimageZ preimages_var = preimages;
	jobjectArray preimages_arr = NULL;
	preimages_arr = (*env)->NewObjectArray(env, preimages_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < preimages_var.datalen; i++) {
		int8_tArray preimages_conv_8_arr = (*env)->NewByteArray(env, 32);
		(*env)->SetByteArrayRegion(env, preimages_conv_8_arr, 0, 32, preimages_var.data[i].data);
		(*env)->SetObjectArrayElement(env, preimages_arr, i, preimages_conv_8_arr);
	}
	
	FREE(preimages_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->validate_holder_commitment_meth, holder_tx_ref, preimages_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to validate_holder_commitment in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneNoneZ ret_conv = *(LDKCResult_NoneNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKThirtyTwoBytes channel_keys_id_LDKBaseSign_jcall(const void* this_arg) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->channel_keys_id_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to channel_keys_id in LDKBaseSign from rust threw an exception.");
	}
	LDKThirtyTwoBytes ret_ref;
	CHECK((*env)->GetArrayLength(env, ret) == 32);
	(*env)->GetByteArrayRegion(env, ret, 0, 32, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ sign_counterparty_commitment_LDKBaseSign_jcall(const void* this_arg, const LDKCommitmentTransaction * commitment_tx, LDKCVec_PaymentPreimageZ preimages) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKCommitmentTransaction commitment_tx_var = *commitment_tx;
	uintptr_t commitment_tx_ref = 0;
	commitment_tx_var = CommitmentTransaction_clone(commitment_tx);
	CHECK((((uintptr_t)commitment_tx_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&commitment_tx_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(commitment_tx_var);
	commitment_tx_ref = (uintptr_t)commitment_tx_var.inner;
	if (commitment_tx_var.is_owned) {
		commitment_tx_ref |= 1;
	}
	LDKCVec_PaymentPreimageZ preimages_var = preimages;
	jobjectArray preimages_arr = NULL;
	preimages_arr = (*env)->NewObjectArray(env, preimages_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < preimages_var.datalen; i++) {
		int8_tArray preimages_conv_8_arr = (*env)->NewByteArray(env, 32);
		(*env)->SetByteArrayRegion(env, preimages_conv_8_arr, 0, 32, preimages_var.data[i].data);
		(*env)->SetObjectArrayElement(env, preimages_arr, i, preimages_conv_8_arr);
	}
	
	FREE(preimages_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_counterparty_commitment_meth, commitment_tx_ref, preimages_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_counterparty_commitment in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ ret_conv = *(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_NoneNoneZ validate_counterparty_revocation_LDKBaseSign_jcall(const void* this_arg, uint64_t idx, const uint8_t (* secret)[32]) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray secret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, secret_arr, 0, 32, *secret);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->validate_counterparty_revocation_meth, idx, secret_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to validate_counterparty_revocation in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneNoneZ ret_conv = *(LDKCResult_NoneNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ sign_holder_commitment_and_htlcs_LDKBaseSign_jcall(const void* this_arg, const LDKHolderCommitmentTransaction * commitment_tx) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKHolderCommitmentTransaction commitment_tx_var = *commitment_tx;
	uintptr_t commitment_tx_ref = 0;
	commitment_tx_var = HolderCommitmentTransaction_clone(commitment_tx);
	CHECK((((uintptr_t)commitment_tx_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&commitment_tx_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(commitment_tx_var);
	commitment_tx_ref = (uintptr_t)commitment_tx_var.inner;
	if (commitment_tx_var.is_owned) {
		commitment_tx_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_holder_commitment_and_htlcs_meth, commitment_tx_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_holder_commitment_and_htlcs in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ ret_conv = *(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_SignatureNoneZ sign_justice_revoked_output_LDKBaseSign_jcall(const void* this_arg, LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (* per_commitment_key)[32]) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKTransaction justice_tx_var = justice_tx;
	int8_tArray justice_tx_arr = (*env)->NewByteArray(env, justice_tx_var.datalen);
	(*env)->SetByteArrayRegion(env, justice_tx_arr, 0, justice_tx_var.datalen, justice_tx_var.data);
	Transaction_free(justice_tx_var);
	int8_tArray per_commitment_key_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, per_commitment_key_arr, 0, 32, *per_commitment_key);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_justice_revoked_output_meth, justice_tx_arr, input, amount, per_commitment_key_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_justice_revoked_output in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_SignatureNoneZ ret_conv = *(LDKCResult_SignatureNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_SignatureNoneZ sign_justice_revoked_htlc_LDKBaseSign_jcall(const void* this_arg, LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (* per_commitment_key)[32], const LDKHTLCOutputInCommitment * htlc) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKTransaction justice_tx_var = justice_tx;
	int8_tArray justice_tx_arr = (*env)->NewByteArray(env, justice_tx_var.datalen);
	(*env)->SetByteArrayRegion(env, justice_tx_arr, 0, justice_tx_var.datalen, justice_tx_var.data);
	Transaction_free(justice_tx_var);
	int8_tArray per_commitment_key_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, per_commitment_key_arr, 0, 32, *per_commitment_key);
	LDKHTLCOutputInCommitment htlc_var = *htlc;
	uintptr_t htlc_ref = 0;
	htlc_var = HTLCOutputInCommitment_clone(htlc);
	CHECK((((uintptr_t)htlc_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&htlc_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(htlc_var);
	htlc_ref = (uintptr_t)htlc_var.inner;
	if (htlc_var.is_owned) {
		htlc_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_justice_revoked_htlc_meth, justice_tx_arr, input, amount, per_commitment_key_arr, htlc_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_justice_revoked_htlc in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_SignatureNoneZ ret_conv = *(LDKCResult_SignatureNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_SignatureNoneZ sign_counterparty_htlc_transaction_LDKBaseSign_jcall(const void* this_arg, LDKTransaction htlc_tx, uintptr_t input, uint64_t amount, LDKPublicKey per_commitment_point, const LDKHTLCOutputInCommitment * htlc) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKTransaction htlc_tx_var = htlc_tx;
	int8_tArray htlc_tx_arr = (*env)->NewByteArray(env, htlc_tx_var.datalen);
	(*env)->SetByteArrayRegion(env, htlc_tx_arr, 0, htlc_tx_var.datalen, htlc_tx_var.data);
	Transaction_free(htlc_tx_var);
	int8_tArray per_commitment_point_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, per_commitment_point_arr, 0, 33, per_commitment_point.compressed_form);
	LDKHTLCOutputInCommitment htlc_var = *htlc;
	uintptr_t htlc_ref = 0;
	htlc_var = HTLCOutputInCommitment_clone(htlc);
	CHECK((((uintptr_t)htlc_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&htlc_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(htlc_var);
	htlc_ref = (uintptr_t)htlc_var.inner;
	if (htlc_var.is_owned) {
		htlc_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_counterparty_htlc_transaction_meth, htlc_tx_arr, input, amount, per_commitment_point_arr, htlc_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_counterparty_htlc_transaction in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_SignatureNoneZ ret_conv = *(LDKCResult_SignatureNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_SignatureNoneZ sign_closing_transaction_LDKBaseSign_jcall(const void* this_arg, const LDKClosingTransaction * closing_tx) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKClosingTransaction closing_tx_var = *closing_tx;
	uintptr_t closing_tx_ref = 0;
	closing_tx_var = ClosingTransaction_clone(closing_tx);
	CHECK((((uintptr_t)closing_tx_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&closing_tx_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(closing_tx_var);
	closing_tx_ref = (uintptr_t)closing_tx_var.inner;
	if (closing_tx_var.is_owned) {
		closing_tx_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_closing_transaction_meth, closing_tx_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_closing_transaction in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_SignatureNoneZ ret_conv = *(LDKCResult_SignatureNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_C2Tuple_SignatureSignatureZNoneZ sign_channel_announcement_LDKBaseSign_jcall(const void* this_arg, const LDKUnsignedChannelAnnouncement * msg) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKUnsignedChannelAnnouncement msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = UnsignedChannelAnnouncement_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_channel_announcement_meth, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_channel_announcement in LDKBaseSign from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ ret_conv = *(LDKCResult_C2Tuple_SignatureSignatureZNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
void ready_channel_LDKBaseSign_jcall(void* this_arg, const LDKChannelTransactionParameters * channel_parameters) {
	LDKBaseSign_JCalls *j_calls = (LDKBaseSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKChannelTransactionParameters channel_parameters_var = *channel_parameters;
	uintptr_t channel_parameters_ref = 0;
	channel_parameters_var = ChannelTransactionParameters_clone(channel_parameters);
	CHECK((((uintptr_t)channel_parameters_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&channel_parameters_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_parameters_var);
	channel_parameters_ref = (uintptr_t)channel_parameters_var.inner;
	if (channel_parameters_var.is_owned) {
		channel_parameters_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->ready_channel_meth, channel_parameters_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to ready_channel in LDKBaseSign from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static inline LDKBaseSign LDKBaseSign_init (JNIEnv *env, jclass clz, jobject o, int64_t pubkeys) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKBaseSign_JCalls *calls = MALLOC(sizeof(LDKBaseSign_JCalls), "LDKBaseSign_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->get_per_commitment_point_meth = (*env)->GetMethodID(env, c, "get_per_commitment_point", "(J)[B");
	CHECK(calls->get_per_commitment_point_meth != NULL);
	calls->release_commitment_secret_meth = (*env)->GetMethodID(env, c, "release_commitment_secret", "(J)[B");
	CHECK(calls->release_commitment_secret_meth != NULL);
	calls->validate_holder_commitment_meth = (*env)->GetMethodID(env, c, "validate_holder_commitment", "(J[[B)J");
	CHECK(calls->validate_holder_commitment_meth != NULL);
	calls->channel_keys_id_meth = (*env)->GetMethodID(env, c, "channel_keys_id", "()[B");
	CHECK(calls->channel_keys_id_meth != NULL);
	calls->sign_counterparty_commitment_meth = (*env)->GetMethodID(env, c, "sign_counterparty_commitment", "(J[[B)J");
	CHECK(calls->sign_counterparty_commitment_meth != NULL);
	calls->validate_counterparty_revocation_meth = (*env)->GetMethodID(env, c, "validate_counterparty_revocation", "(J[B)J");
	CHECK(calls->validate_counterparty_revocation_meth != NULL);
	calls->sign_holder_commitment_and_htlcs_meth = (*env)->GetMethodID(env, c, "sign_holder_commitment_and_htlcs", "(J)J");
	CHECK(calls->sign_holder_commitment_and_htlcs_meth != NULL);
	calls->sign_justice_revoked_output_meth = (*env)->GetMethodID(env, c, "sign_justice_revoked_output", "([BJJ[B)J");
	CHECK(calls->sign_justice_revoked_output_meth != NULL);
	calls->sign_justice_revoked_htlc_meth = (*env)->GetMethodID(env, c, "sign_justice_revoked_htlc", "([BJJ[BJ)J");
	CHECK(calls->sign_justice_revoked_htlc_meth != NULL);
	calls->sign_counterparty_htlc_transaction_meth = (*env)->GetMethodID(env, c, "sign_counterparty_htlc_transaction", "([BJJ[BJ)J");
	CHECK(calls->sign_counterparty_htlc_transaction_meth != NULL);
	calls->sign_closing_transaction_meth = (*env)->GetMethodID(env, c, "sign_closing_transaction", "(J)J");
	CHECK(calls->sign_closing_transaction_meth != NULL);
	calls->sign_channel_announcement_meth = (*env)->GetMethodID(env, c, "sign_channel_announcement", "(J)J");
	CHECK(calls->sign_channel_announcement_meth != NULL);
	calls->ready_channel_meth = (*env)->GetMethodID(env, c, "ready_channel", "(J)V");
	CHECK(calls->ready_channel_meth != NULL);

	LDKChannelPublicKeys pubkeys_conv;
	pubkeys_conv.inner = (void*)(pubkeys & (~1));
	pubkeys_conv.is_owned = (pubkeys & 1) || (pubkeys == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(pubkeys_conv);

	LDKBaseSign ret = {
		.this_arg = (void*) calls,
		.get_per_commitment_point = get_per_commitment_point_LDKBaseSign_jcall,
		.release_commitment_secret = release_commitment_secret_LDKBaseSign_jcall,
		.validate_holder_commitment = validate_holder_commitment_LDKBaseSign_jcall,
		.channel_keys_id = channel_keys_id_LDKBaseSign_jcall,
		.sign_counterparty_commitment = sign_counterparty_commitment_LDKBaseSign_jcall,
		.validate_counterparty_revocation = validate_counterparty_revocation_LDKBaseSign_jcall,
		.sign_holder_commitment_and_htlcs = sign_holder_commitment_and_htlcs_LDKBaseSign_jcall,
		.sign_justice_revoked_output = sign_justice_revoked_output_LDKBaseSign_jcall,
		.sign_justice_revoked_htlc = sign_justice_revoked_htlc_LDKBaseSign_jcall,
		.sign_counterparty_htlc_transaction = sign_counterparty_htlc_transaction_LDKBaseSign_jcall,
		.sign_closing_transaction = sign_closing_transaction_LDKBaseSign_jcall,
		.sign_channel_announcement = sign_channel_announcement_LDKBaseSign_jcall,
		.ready_channel = ready_channel_LDKBaseSign_jcall,
		.free = LDKBaseSign_JCalls_free,
		.pubkeys = pubkeys_conv,
		.set_pubkeys = NULL,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKBaseSign_1new(JNIEnv *env, jclass clz, jobject o, int64_t pubkeys) {
	LDKBaseSign *res_ptr = MALLOC(sizeof(LDKBaseSign), "LDKBaseSign");
	*res_ptr = LDKBaseSign_init(env, clz, o, pubkeys);
	return (uint64_t)res_ptr;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BaseSign_1get_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_arg, int64_t idx) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, (this_arg_conv->get_per_commitment_point)(this_arg_conv->this_arg, idx).compressed_form);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BaseSign_1release_1commitment_1secret(JNIEnv *env, jclass clz, int64_t this_arg, int64_t idx) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, (this_arg_conv->release_commitment_secret)(this_arg_conv->this_arg, idx).data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1validate_1holder_1commitment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t holder_tx, jobjectArray preimages) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKHolderCommitmentTransaction holder_tx_conv;
	holder_tx_conv.inner = (void*)(holder_tx & (~1));
	holder_tx_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(holder_tx_conv);
	LDKCVec_PaymentPreimageZ preimages_constr;
	preimages_constr.datalen = (*env)->GetArrayLength(env, preimages);
	if (preimages_constr.datalen > 0)
		preimages_constr.data = MALLOC(preimages_constr.datalen * sizeof(LDKThirtyTwoBytes), "LDKCVec_PaymentPreimageZ Elements");
	else
		preimages_constr.data = NULL;
	for (size_t i = 0; i < preimages_constr.datalen; i++) {
		int8_tArray preimages_conv_8 = (*env)->GetObjectArrayElement(env, preimages, i);
		LDKThirtyTwoBytes preimages_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, preimages_conv_8) == 32);
		(*env)->GetByteArrayRegion(env, preimages_conv_8, 0, 32, preimages_conv_8_ref.data);
		preimages_constr.data[i] = preimages_conv_8_ref;
	}
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = (this_arg_conv->validate_holder_commitment)(this_arg_conv->this_arg, &holder_tx_conv, preimages_constr);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BaseSign_1channel_1keys_1id(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, (this_arg_conv->channel_keys_id)(this_arg_conv->this_arg).data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1sign_1counterparty_1commitment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t commitment_tx, jobjectArray preimages) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKCommitmentTransaction commitment_tx_conv;
	commitment_tx_conv.inner = (void*)(commitment_tx & (~1));
	commitment_tx_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(commitment_tx_conv);
	LDKCVec_PaymentPreimageZ preimages_constr;
	preimages_constr.datalen = (*env)->GetArrayLength(env, preimages);
	if (preimages_constr.datalen > 0)
		preimages_constr.data = MALLOC(preimages_constr.datalen * sizeof(LDKThirtyTwoBytes), "LDKCVec_PaymentPreimageZ Elements");
	else
		preimages_constr.data = NULL;
	for (size_t i = 0; i < preimages_constr.datalen; i++) {
		int8_tArray preimages_conv_8 = (*env)->GetObjectArrayElement(env, preimages, i);
		LDKThirtyTwoBytes preimages_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, preimages_conv_8) == 32);
		(*env)->GetByteArrayRegion(env, preimages_conv_8, 0, 32, preimages_conv_8_ref.data);
		preimages_constr.data[i] = preimages_conv_8_ref;
	}
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ), "LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ");
	*ret_conv = (this_arg_conv->sign_counterparty_commitment)(this_arg_conv->this_arg, &commitment_tx_conv, preimages_constr);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1validate_1counterparty_1revocation(JNIEnv *env, jclass clz, int64_t this_arg, int64_t idx, int8_tArray secret) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	unsigned char secret_arr[32];
	CHECK((*env)->GetArrayLength(env, secret) == 32);
	(*env)->GetByteArrayRegion(env, secret, 0, 32, secret_arr);
	unsigned char (*secret_ref)[32] = &secret_arr;
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = (this_arg_conv->validate_counterparty_revocation)(this_arg_conv->this_arg, idx, secret_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1sign_1holder_1commitment_1and_1htlcs(JNIEnv *env, jclass clz, int64_t this_arg, int64_t commitment_tx) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKHolderCommitmentTransaction commitment_tx_conv;
	commitment_tx_conv.inner = (void*)(commitment_tx & (~1));
	commitment_tx_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(commitment_tx_conv);
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ), "LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ");
	*ret_conv = (this_arg_conv->sign_holder_commitment_and_htlcs)(this_arg_conv->this_arg, &commitment_tx_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1sign_1justice_1revoked_1output(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray justice_tx, int64_t input, int64_t amount, int8_tArray per_commitment_key) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKTransaction justice_tx_ref;
	justice_tx_ref.datalen = (*env)->GetArrayLength(env, justice_tx);
	justice_tx_ref.data = MALLOC(justice_tx_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, justice_tx, 0, justice_tx_ref.datalen, justice_tx_ref.data);
	justice_tx_ref.data_is_owned = true;
	unsigned char per_commitment_key_arr[32];
	CHECK((*env)->GetArrayLength(env, per_commitment_key) == 32);
	(*env)->GetByteArrayRegion(env, per_commitment_key, 0, 32, per_commitment_key_arr);
	unsigned char (*per_commitment_key_ref)[32] = &per_commitment_key_arr;
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = (this_arg_conv->sign_justice_revoked_output)(this_arg_conv->this_arg, justice_tx_ref, input, amount, per_commitment_key_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1sign_1justice_1revoked_1htlc(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray justice_tx, int64_t input, int64_t amount, int8_tArray per_commitment_key, int64_t htlc) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKTransaction justice_tx_ref;
	justice_tx_ref.datalen = (*env)->GetArrayLength(env, justice_tx);
	justice_tx_ref.data = MALLOC(justice_tx_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, justice_tx, 0, justice_tx_ref.datalen, justice_tx_ref.data);
	justice_tx_ref.data_is_owned = true;
	unsigned char per_commitment_key_arr[32];
	CHECK((*env)->GetArrayLength(env, per_commitment_key) == 32);
	(*env)->GetByteArrayRegion(env, per_commitment_key, 0, 32, per_commitment_key_arr);
	unsigned char (*per_commitment_key_ref)[32] = &per_commitment_key_arr;
	LDKHTLCOutputInCommitment htlc_conv;
	htlc_conv.inner = (void*)(htlc & (~1));
	htlc_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(htlc_conv);
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = (this_arg_conv->sign_justice_revoked_htlc)(this_arg_conv->this_arg, justice_tx_ref, input, amount, per_commitment_key_ref, &htlc_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1sign_1counterparty_1htlc_1transaction(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray htlc_tx, int64_t input, int64_t amount, int8_tArray per_commitment_point, int64_t htlc) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKTransaction htlc_tx_ref;
	htlc_tx_ref.datalen = (*env)->GetArrayLength(env, htlc_tx);
	htlc_tx_ref.data = MALLOC(htlc_tx_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, htlc_tx, 0, htlc_tx_ref.datalen, htlc_tx_ref.data);
	htlc_tx_ref.data_is_owned = true;
	LDKPublicKey per_commitment_point_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point, 0, 33, per_commitment_point_ref.compressed_form);
	LDKHTLCOutputInCommitment htlc_conv;
	htlc_conv.inner = (void*)(htlc & (~1));
	htlc_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(htlc_conv);
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = (this_arg_conv->sign_counterparty_htlc_transaction)(this_arg_conv->this_arg, htlc_tx_ref, input, amount, per_commitment_point_ref, &htlc_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1sign_1closing_1transaction(JNIEnv *env, jclass clz, int64_t this_arg, int64_t closing_tx) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKClosingTransaction closing_tx_conv;
	closing_tx_conv.inner = (void*)(closing_tx & (~1));
	closing_tx_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(closing_tx_conv);
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = (this_arg_conv->sign_closing_transaction)(this_arg_conv->this_arg, &closing_tx_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1sign_1channel_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKUnsignedChannelAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureSignatureZNoneZ), "LDKCResult_C2Tuple_SignatureSignatureZNoneZ");
	*ret_conv = (this_arg_conv->sign_channel_announcement)(this_arg_conv->this_arg, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BaseSign_1ready_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int64_t channel_parameters) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKChannelTransactionParameters channel_parameters_conv;
	channel_parameters_conv.inner = (void*)(channel_parameters & (~1));
	channel_parameters_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_parameters_conv);
	(this_arg_conv->ready_channel)(this_arg_conv->this_arg, &channel_parameters_conv);
}

LDKChannelPublicKeys LDKBaseSign_set_get_pubkeys(LDKBaseSign* this_arg) {
	if (this_arg->set_pubkeys != NULL)
		this_arg->set_pubkeys(this_arg);
	return this_arg->pubkeys;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BaseSign_1get_1pubkeys(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBaseSign* this_arg_conv = (LDKBaseSign*)this_arg_ptr;
	LDKChannelPublicKeys ret_var = LDKBaseSign_set_get_pubkeys(this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

typedef struct LDKSign_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	LDKBaseSign_JCalls* BaseSign;
	jmethodID write_meth;
} LDKSign_JCalls;
static void LDKSign_JCalls_free(void* this_arg) {
	LDKSign_JCalls *j_calls = (LDKSign_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCVec_u8Z write_LDKSign_jcall(const void* this_arg) {
	LDKSign_JCalls *j_calls = (LDKSign_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->write_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to write in LDKSign from rust threw an exception.");
	}
	LDKCVec_u8Z ret_ref;
	ret_ref.datalen = (*env)->GetArrayLength(env, ret);
	ret_ref.data = MALLOC(ret_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, ret, 0, ret_ref.datalen, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
static void LDKSign_JCalls_cloned(LDKSign* new_obj) {
	LDKSign_JCalls *j_calls = (LDKSign_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
	atomic_fetch_add_explicit(&j_calls->BaseSign->refcnt, 1, memory_order_release);
}
static inline LDKSign LDKSign_init (JNIEnv *env, jclass clz, jobject o, jobject BaseSign, int64_t pubkeys) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKSign_JCalls *calls = MALLOC(sizeof(LDKSign_JCalls), "LDKSign_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->write_meth = (*env)->GetMethodID(env, c, "write", "()[B");
	CHECK(calls->write_meth != NULL);

	LDKChannelPublicKeys pubkeys_conv;
	pubkeys_conv.inner = (void*)(pubkeys & (~1));
	pubkeys_conv.is_owned = (pubkeys & 1) || (pubkeys == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(pubkeys_conv);

	LDKSign ret = {
		.this_arg = (void*) calls,
		.write = write_LDKSign_jcall,
		.cloned = LDKSign_JCalls_cloned,
		.free = LDKSign_JCalls_free,
		.BaseSign = LDKBaseSign_init(env, clz, BaseSign, pubkeys),
	};
	calls->BaseSign = ret.BaseSign.this_arg;
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKSign_1new(JNIEnv *env, jclass clz, jobject o, jobject BaseSign, int64_t pubkeys) {
	LDKSign *res_ptr = MALLOC(sizeof(LDKSign), "LDKSign");
	*res_ptr = LDKSign_init(env, clz, o, BaseSign, pubkeys);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKSign_1get_1BaseSign(JNIEnv *env, jclass clz, int64_t arg) {
	LDKSign *inp = (LDKSign *)(arg & ~1);
	uint64_t res_ptr = (uint64_t)&inp->BaseSign;
	DO_ASSERT((res_ptr & 1) == 0);
	return (int64_t)(res_ptr | 1);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Sign_1write(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKSign* this_arg_conv = (LDKSign*)this_arg_ptr;
	LDKCVec_u8Z ret_var = (this_arg_conv->write)(this_arg_conv->this_arg);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

static inline struct LDKSign CResult_SignDecodeErrorZ_get_ok(LDKCResult_SignDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Sign_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SignDecodeErrorZ* owner_conv = (LDKCResult_SignDecodeErrorZ*)(owner & ~1);
	LDKSign* ret_ret = MALLOC(sizeof(LDKSign), "LDKSign");
	*ret_ret = CResult_SignDecodeErrorZ_get_ok(owner_conv);
	return (uintptr_t)ret_ret;
}

static inline struct LDKDecodeError CResult_SignDecodeErrorZ_get_err(LDKCResult_SignDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SignDecodeErrorZ* owner_conv = (LDKCResult_SignDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_SignDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKRecoverableSignature CResult_RecoverableSignatureNoneZ_get_ok(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RecoverableSignatureNoneZ* owner_conv = (LDKCResult_RecoverableSignatureNoneZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 68);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 68, CResult_RecoverableSignatureNoneZ_get_ok(owner_conv).serialized_form);
	return ret_arr;
}

static inline void CResult_RecoverableSignatureNoneZ_get_err(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RecoverableSignatureNoneZ* owner_conv = (LDKCResult_RecoverableSignatureNoneZ*)(owner & ~1);
	CResult_RecoverableSignatureNoneZ_get_err(owner_conv);
}

static inline LDKCVec_CVec_u8ZZ CVec_CVec_u8ZZ_clone(const LDKCVec_CVec_u8ZZ *orig) {
	LDKCVec_CVec_u8ZZ ret = { .data = MALLOC(sizeof(LDKCVec_u8Z) * orig->datalen, "LDKCVec_CVec_u8ZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = CVec_u8Z_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKCVec_CVec_u8ZZ CResult_CVec_CVec_u8ZZNoneZ_get_ok(LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CVec_CVec_u8ZZ_clone(&*owner->contents.result);
}
JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_CVec_u8ZZNoneZ* owner_conv = (LDKCResult_CVec_CVec_u8ZZNoneZ*)(owner & ~1);
	LDKCVec_CVec_u8ZZ ret_var = CResult_CVec_CVec_u8ZZNoneZ_get_ok(owner_conv);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < ret_var.datalen; i++) {
		LDKCVec_u8Z ret_conv_8_var = ret_var.data[i];
		int8_tArray ret_conv_8_arr = (*env)->NewByteArray(env, ret_conv_8_var.datalen);
		(*env)->SetByteArrayRegion(env, ret_conv_8_arr, 0, ret_conv_8_var.datalen, ret_conv_8_var.data);
		CVec_u8Z_free(ret_conv_8_var);
		(*env)->SetObjectArrayElement(env, ret_arr, i, ret_conv_8_arr);
	}
	
	FREE(ret_var.data);
	return ret_arr;
}

static inline void CResult_CVec_CVec_u8ZZNoneZ_get_err(LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_CVec_u8ZZNoneZ* owner_conv = (LDKCResult_CVec_CVec_u8ZZNoneZ*)(owner & ~1);
	CResult_CVec_CVec_u8ZZNoneZ_get_err(owner_conv);
}

static inline struct LDKInMemorySigner CResult_InMemorySignerDecodeErrorZ_get_ok(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return InMemorySigner_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InMemorySignerDecodeErrorZ* owner_conv = (LDKCResult_InMemorySignerDecodeErrorZ*)(owner & ~1);
	LDKInMemorySigner ret_var = CResult_InMemorySignerDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_InMemorySignerDecodeErrorZ_get_err(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InMemorySignerDecodeErrorZ* owner_conv = (LDKCResult_InMemorySignerDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_InMemorySignerDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_TxOutZ CVec_TxOutZ_clone(const LDKCVec_TxOutZ *orig) {
	LDKCVec_TxOutZ ret = { .data = MALLOC(sizeof(LDKTxOut) * orig->datalen, "LDKCVec_TxOutZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = TxOut_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKTransaction CResult_TransactionNoneZ_get_ok(LDKCResult_TransactionNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TransactionNoneZ* owner_conv = (LDKCResult_TransactionNoneZ*)(owner & ~1);
	LDKTransaction ret_var = CResult_TransactionNoneZ_get_ok(owner_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

static inline void CResult_TransactionNoneZ_get_err(LDKCResult_TransactionNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_TransactionNoneZ* owner_conv = (LDKCResult_TransactionNoneZ*)(owner & ~1);
	CResult_TransactionNoneZ_get_err(owner_conv);
}

static inline struct LDKThirtyTwoBytes C2Tuple_BlockHashChannelMonitorZ_get_a(LDKC2Tuple_BlockHashChannelMonitorZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->a);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelMonitorZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_BlockHashChannelMonitorZ* owner_conv = (LDKC2Tuple_BlockHashChannelMonitorZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_BlockHashChannelMonitorZ_get_a(owner_conv).data);
	return ret_arr;
}

static inline struct LDKChannelMonitor C2Tuple_BlockHashChannelMonitorZ_get_b(LDKC2Tuple_BlockHashChannelMonitorZ *NONNULL_PTR owner){
	return ChannelMonitor_clone(&owner->b);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelMonitorZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_BlockHashChannelMonitorZ* owner_conv = (LDKC2Tuple_BlockHashChannelMonitorZ*)(owner & ~1);
	LDKChannelMonitor ret_var = C2Tuple_BlockHashChannelMonitorZ_get_b(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_C2Tuple_BlockHashChannelMonitorZZ CVec_C2Tuple_BlockHashChannelMonitorZZ_clone(const LDKCVec_C2Tuple_BlockHashChannelMonitorZZ *orig) {
	LDKCVec_C2Tuple_BlockHashChannelMonitorZZ ret = { .data = MALLOC(sizeof(LDKC2Tuple_BlockHashChannelMonitorZ) * orig->datalen, "LDKCVec_C2Tuple_BlockHashChannelMonitorZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C2Tuple_BlockHashChannelMonitorZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKCVec_C2Tuple_BlockHashChannelMonitorZZ CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_ok(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CVec_C2Tuple_BlockHashChannelMonitorZZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* owner_conv = (LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ*)(owner & ~1);
	LDKCVec_C2Tuple_BlockHashChannelMonitorZZ ret_var = CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_ok(owner_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t j = 0; j < ret_var.datalen; j++) {
		LDKC2Tuple_BlockHashChannelMonitorZ* ret_conv_35_conv = MALLOC(sizeof(LDKC2Tuple_BlockHashChannelMonitorZ), "LDKC2Tuple_BlockHashChannelMonitorZ");
		*ret_conv_35_conv = ret_var.data[j];
		ret_arr_ptr[j] = ((uintptr_t)ret_conv_35_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

static inline enum LDKIOError CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_err(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* owner_conv = (LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ*)(owner & ~1);
	jclass ret_conv = LDKIOError_to_java(env, CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_err(owner_conv));
	return ret_conv;
}

static jclass LDKCOption_u16Z_Some_class = NULL;
static jmethodID LDKCOption_u16Z_Some_meth = NULL;
static jclass LDKCOption_u16Z_None_class = NULL;
static jmethodID LDKCOption_u16Z_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1u16Z_init (JNIEnv *env, jclass clz) {
	LDKCOption_u16Z_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_u16Z$Some"));
	CHECK(LDKCOption_u16Z_Some_class != NULL);
	LDKCOption_u16Z_Some_meth = (*env)->GetMethodID(env, LDKCOption_u16Z_Some_class, "<init>", "(S)V");
	CHECK(LDKCOption_u16Z_Some_meth != NULL);
	LDKCOption_u16Z_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_u16Z$None"));
	CHECK(LDKCOption_u16Z_None_class != NULL);
	LDKCOption_u16Z_None_meth = (*env)->GetMethodID(env, LDKCOption_u16Z_None_class, "<init>", "()V");
	CHECK(LDKCOption_u16Z_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1u16Z_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_u16Z *obj = (LDKCOption_u16Z*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_u16Z_Some: {
			return (*env)->NewObject(env, LDKCOption_u16Z_Some_class, LDKCOption_u16Z_Some_meth, obj->some);
		}
		case LDKCOption_u16Z_None: {
			return (*env)->NewObject(env, LDKCOption_u16Z_None_class, LDKCOption_u16Z_None_meth);
		}
		default: abort();
	}
}
static jclass LDKAPIError_APIMisuseError_class = NULL;
static jmethodID LDKAPIError_APIMisuseError_meth = NULL;
static jclass LDKAPIError_FeeRateTooHigh_class = NULL;
static jmethodID LDKAPIError_FeeRateTooHigh_meth = NULL;
static jclass LDKAPIError_RouteError_class = NULL;
static jmethodID LDKAPIError_RouteError_meth = NULL;
static jclass LDKAPIError_ChannelUnavailable_class = NULL;
static jmethodID LDKAPIError_ChannelUnavailable_meth = NULL;
static jclass LDKAPIError_MonitorUpdateFailed_class = NULL;
static jmethodID LDKAPIError_MonitorUpdateFailed_meth = NULL;
static jclass LDKAPIError_IncompatibleShutdownScript_class = NULL;
static jmethodID LDKAPIError_IncompatibleShutdownScript_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKAPIError_init (JNIEnv *env, jclass clz) {
	LDKAPIError_APIMisuseError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKAPIError$APIMisuseError"));
	CHECK(LDKAPIError_APIMisuseError_class != NULL);
	LDKAPIError_APIMisuseError_meth = (*env)->GetMethodID(env, LDKAPIError_APIMisuseError_class, "<init>", "(Ljava/lang/String;)V");
	CHECK(LDKAPIError_APIMisuseError_meth != NULL);
	LDKAPIError_FeeRateTooHigh_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKAPIError$FeeRateTooHigh"));
	CHECK(LDKAPIError_FeeRateTooHigh_class != NULL);
	LDKAPIError_FeeRateTooHigh_meth = (*env)->GetMethodID(env, LDKAPIError_FeeRateTooHigh_class, "<init>", "(Ljava/lang/String;I)V");
	CHECK(LDKAPIError_FeeRateTooHigh_meth != NULL);
	LDKAPIError_RouteError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKAPIError$RouteError"));
	CHECK(LDKAPIError_RouteError_class != NULL);
	LDKAPIError_RouteError_meth = (*env)->GetMethodID(env, LDKAPIError_RouteError_class, "<init>", "(Ljava/lang/String;)V");
	CHECK(LDKAPIError_RouteError_meth != NULL);
	LDKAPIError_ChannelUnavailable_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKAPIError$ChannelUnavailable"));
	CHECK(LDKAPIError_ChannelUnavailable_class != NULL);
	LDKAPIError_ChannelUnavailable_meth = (*env)->GetMethodID(env, LDKAPIError_ChannelUnavailable_class, "<init>", "(Ljava/lang/String;)V");
	CHECK(LDKAPIError_ChannelUnavailable_meth != NULL);
	LDKAPIError_MonitorUpdateFailed_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKAPIError$MonitorUpdateFailed"));
	CHECK(LDKAPIError_MonitorUpdateFailed_class != NULL);
	LDKAPIError_MonitorUpdateFailed_meth = (*env)->GetMethodID(env, LDKAPIError_MonitorUpdateFailed_class, "<init>", "()V");
	CHECK(LDKAPIError_MonitorUpdateFailed_meth != NULL);
	LDKAPIError_IncompatibleShutdownScript_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKAPIError$IncompatibleShutdownScript"));
	CHECK(LDKAPIError_IncompatibleShutdownScript_class != NULL);
	LDKAPIError_IncompatibleShutdownScript_meth = (*env)->GetMethodID(env, LDKAPIError_IncompatibleShutdownScript_class, "<init>", "(J)V");
	CHECK(LDKAPIError_IncompatibleShutdownScript_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKAPIError_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKAPIError *obj = (LDKAPIError*)(ptr & ~1);
	switch(obj->tag) {
		case LDKAPIError_APIMisuseError: {
			LDKStr err_str = obj->api_misuse_error.err;
			jstring err_conv = str_ref_to_java(env, err_str.chars, err_str.len);
			return (*env)->NewObject(env, LDKAPIError_APIMisuseError_class, LDKAPIError_APIMisuseError_meth, err_conv);
		}
		case LDKAPIError_FeeRateTooHigh: {
			LDKStr err_str = obj->fee_rate_too_high.err;
			jstring err_conv = str_ref_to_java(env, err_str.chars, err_str.len);
			return (*env)->NewObject(env, LDKAPIError_FeeRateTooHigh_class, LDKAPIError_FeeRateTooHigh_meth, err_conv, obj->fee_rate_too_high.feerate);
		}
		case LDKAPIError_RouteError: {
			LDKStr err_str = obj->route_error.err;
			jstring err_conv = str_ref_to_java(env, err_str.chars, err_str.len);
			return (*env)->NewObject(env, LDKAPIError_RouteError_class, LDKAPIError_RouteError_meth, err_conv);
		}
		case LDKAPIError_ChannelUnavailable: {
			LDKStr err_str = obj->channel_unavailable.err;
			jstring err_conv = str_ref_to_java(env, err_str.chars, err_str.len);
			return (*env)->NewObject(env, LDKAPIError_ChannelUnavailable_class, LDKAPIError_ChannelUnavailable_meth, err_conv);
		}
		case LDKAPIError_MonitorUpdateFailed: {
			return (*env)->NewObject(env, LDKAPIError_MonitorUpdateFailed_class, LDKAPIError_MonitorUpdateFailed_meth);
		}
		case LDKAPIError_IncompatibleShutdownScript: {
			LDKShutdownScript script_var = obj->incompatible_shutdown_script.script;
			uintptr_t script_ref = 0;
			CHECK((((uintptr_t)script_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&script_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(script_var);
			script_ref = (uintptr_t)script_var.inner & ~1;
			return (*env)->NewObject(env, LDKAPIError_IncompatibleShutdownScript_class, LDKAPIError_IncompatibleShutdownScript_meth, script_ref);
		}
		default: abort();
	}
}
static inline void CResult_NoneAPIErrorZ_get_ok(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneAPIErrorZ* owner_conv = (LDKCResult_NoneAPIErrorZ*)(owner & ~1);
	CResult_NoneAPIErrorZ_get_ok(owner_conv);
}

static inline struct LDKAPIError CResult_NoneAPIErrorZ_get_err(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return APIError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneAPIErrorZ* owner_conv = (LDKCResult_NoneAPIErrorZ*)(owner & ~1);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = CResult_NoneAPIErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline LDKCVec_CResult_NoneAPIErrorZZ CVec_CResult_NoneAPIErrorZZ_clone(const LDKCVec_CResult_NoneAPIErrorZZ *orig) {
	LDKCVec_CResult_NoneAPIErrorZZ ret = { .data = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ) * orig->datalen, "LDKCVec_CResult_NoneAPIErrorZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = CResult_NoneAPIErrorZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_APIErrorZ CVec_APIErrorZ_clone(const LDKCVec_APIErrorZ *orig) {
	LDKCVec_APIErrorZ ret = { .data = MALLOC(sizeof(LDKAPIError) * orig->datalen, "LDKCVec_APIErrorZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = APIError_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKThirtyTwoBytes CResult__u832APIErrorZ_get_ok(LDKCResult__u832APIErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ThirtyTwoBytes_clone(&*owner->contents.result);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult__u832APIErrorZ* owner_conv = (LDKCResult__u832APIErrorZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult__u832APIErrorZ_get_ok(owner_conv).data);
	return ret_arr;
}

static inline struct LDKAPIError CResult__u832APIErrorZ_get_err(LDKCResult__u832APIErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return APIError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult__u832APIErrorZ* owner_conv = (LDKCResult__u832APIErrorZ*)(owner & ~1);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = CResult__u832APIErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static jclass LDKPaymentSendFailure_ParameterError_class = NULL;
static jmethodID LDKPaymentSendFailure_ParameterError_meth = NULL;
static jclass LDKPaymentSendFailure_PathParameterError_class = NULL;
static jmethodID LDKPaymentSendFailure_PathParameterError_meth = NULL;
static jclass LDKPaymentSendFailure_AllFailedRetrySafe_class = NULL;
static jmethodID LDKPaymentSendFailure_AllFailedRetrySafe_meth = NULL;
static jclass LDKPaymentSendFailure_PartialFailure_class = NULL;
static jmethodID LDKPaymentSendFailure_PartialFailure_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKPaymentSendFailure_init (JNIEnv *env, jclass clz) {
	LDKPaymentSendFailure_ParameterError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentSendFailure$ParameterError"));
	CHECK(LDKPaymentSendFailure_ParameterError_class != NULL);
	LDKPaymentSendFailure_ParameterError_meth = (*env)->GetMethodID(env, LDKPaymentSendFailure_ParameterError_class, "<init>", "(J)V");
	CHECK(LDKPaymentSendFailure_ParameterError_meth != NULL);
	LDKPaymentSendFailure_PathParameterError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentSendFailure$PathParameterError"));
	CHECK(LDKPaymentSendFailure_PathParameterError_class != NULL);
	LDKPaymentSendFailure_PathParameterError_meth = (*env)->GetMethodID(env, LDKPaymentSendFailure_PathParameterError_class, "<init>", "([J)V");
	CHECK(LDKPaymentSendFailure_PathParameterError_meth != NULL);
	LDKPaymentSendFailure_AllFailedRetrySafe_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentSendFailure$AllFailedRetrySafe"));
	CHECK(LDKPaymentSendFailure_AllFailedRetrySafe_class != NULL);
	LDKPaymentSendFailure_AllFailedRetrySafe_meth = (*env)->GetMethodID(env, LDKPaymentSendFailure_AllFailedRetrySafe_class, "<init>", "([J)V");
	CHECK(LDKPaymentSendFailure_AllFailedRetrySafe_meth != NULL);
	LDKPaymentSendFailure_PartialFailure_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentSendFailure$PartialFailure"));
	CHECK(LDKPaymentSendFailure_PartialFailure_class != NULL);
	LDKPaymentSendFailure_PartialFailure_meth = (*env)->GetMethodID(env, LDKPaymentSendFailure_PartialFailure_class, "<init>", "([JJ[B)V");
	CHECK(LDKPaymentSendFailure_PartialFailure_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKPaymentSendFailure_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKPaymentSendFailure *obj = (LDKPaymentSendFailure*)(ptr & ~1);
	switch(obj->tag) {
		case LDKPaymentSendFailure_ParameterError: {
			uintptr_t parameter_error_ref = ((uintptr_t)&obj->parameter_error) | 1;
			return (*env)->NewObject(env, LDKPaymentSendFailure_ParameterError_class, LDKPaymentSendFailure_ParameterError_meth, parameter_error_ref);
		}
		case LDKPaymentSendFailure_PathParameterError: {
			LDKCVec_CResult_NoneAPIErrorZZ path_parameter_error_var = obj->path_parameter_error;
			int64_tArray path_parameter_error_arr = NULL;
			path_parameter_error_arr = (*env)->NewLongArray(env, path_parameter_error_var.datalen);
			int64_t *path_parameter_error_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, path_parameter_error_arr, NULL);
			for (size_t w = 0; w < path_parameter_error_var.datalen; w++) {
				LDKCResult_NoneAPIErrorZ* path_parameter_error_conv_22_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
				*path_parameter_error_conv_22_conv = path_parameter_error_var.data[w];
				*path_parameter_error_conv_22_conv = CResult_NoneAPIErrorZ_clone(path_parameter_error_conv_22_conv);
				path_parameter_error_arr_ptr[w] = (uintptr_t)path_parameter_error_conv_22_conv;
			}
			(*env)->ReleasePrimitiveArrayCritical(env, path_parameter_error_arr, path_parameter_error_arr_ptr, 0);
			return (*env)->NewObject(env, LDKPaymentSendFailure_PathParameterError_class, LDKPaymentSendFailure_PathParameterError_meth, path_parameter_error_arr);
		}
		case LDKPaymentSendFailure_AllFailedRetrySafe: {
			LDKCVec_APIErrorZ all_failed_retry_safe_var = obj->all_failed_retry_safe;
			int64_tArray all_failed_retry_safe_arr = NULL;
			all_failed_retry_safe_arr = (*env)->NewLongArray(env, all_failed_retry_safe_var.datalen);
			int64_t *all_failed_retry_safe_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, all_failed_retry_safe_arr, NULL);
			for (size_t k = 0; k < all_failed_retry_safe_var.datalen; k++) {
				uintptr_t all_failed_retry_safe_conv_10_ref = ((uintptr_t)&all_failed_retry_safe_var.data[k]) | 1;
				all_failed_retry_safe_arr_ptr[k] = all_failed_retry_safe_conv_10_ref;
			}
			(*env)->ReleasePrimitiveArrayCritical(env, all_failed_retry_safe_arr, all_failed_retry_safe_arr_ptr, 0);
			return (*env)->NewObject(env, LDKPaymentSendFailure_AllFailedRetrySafe_class, LDKPaymentSendFailure_AllFailedRetrySafe_meth, all_failed_retry_safe_arr);
		}
		case LDKPaymentSendFailure_PartialFailure: {
			LDKCVec_CResult_NoneAPIErrorZZ results_var = obj->partial_failure.results;
			int64_tArray results_arr = NULL;
			results_arr = (*env)->NewLongArray(env, results_var.datalen);
			int64_t *results_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, results_arr, NULL);
			for (size_t w = 0; w < results_var.datalen; w++) {
				LDKCResult_NoneAPIErrorZ* results_conv_22_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
				*results_conv_22_conv = results_var.data[w];
				*results_conv_22_conv = CResult_NoneAPIErrorZ_clone(results_conv_22_conv);
				results_arr_ptr[w] = (uintptr_t)results_conv_22_conv;
			}
			(*env)->ReleasePrimitiveArrayCritical(env, results_arr, results_arr_ptr, 0);
			LDKRouteParameters failed_paths_retry_var = obj->partial_failure.failed_paths_retry;
			uintptr_t failed_paths_retry_ref = 0;
			if ((uintptr_t)failed_paths_retry_var.inner > 4096) {
				CHECK((((uintptr_t)failed_paths_retry_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
				CHECK((((uintptr_t)&failed_paths_retry_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(failed_paths_retry_var);
				failed_paths_retry_ref = (uintptr_t)failed_paths_retry_var.inner & ~1;
			}
			int8_tArray payment_id_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, payment_id_arr, 0, 32, obj->partial_failure.payment_id.data);
			return (*env)->NewObject(env, LDKPaymentSendFailure_PartialFailure_class, LDKPaymentSendFailure_PartialFailure_meth, results_arr, failed_paths_retry_ref, payment_id_arr);
		}
		default: abort();
	}
}
static inline struct LDKThirtyTwoBytes CResult_PaymentIdPaymentSendFailureZ_get_ok(LDKCResult_PaymentIdPaymentSendFailureZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ThirtyTwoBytes_clone(&*owner->contents.result);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentIdPaymentSendFailureZ* owner_conv = (LDKCResult_PaymentIdPaymentSendFailureZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult_PaymentIdPaymentSendFailureZ_get_ok(owner_conv).data);
	return ret_arr;
}

static inline struct LDKPaymentSendFailure CResult_PaymentIdPaymentSendFailureZ_get_err(LDKCResult_PaymentIdPaymentSendFailureZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return PaymentSendFailure_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentIdPaymentSendFailureZ* owner_conv = (LDKCResult_PaymentIdPaymentSendFailureZ*)(owner & ~1);
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = CResult_PaymentIdPaymentSendFailureZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline void CResult_NonePaymentSendFailureZ_get_ok(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NonePaymentSendFailureZ* owner_conv = (LDKCResult_NonePaymentSendFailureZ*)(owner & ~1);
	CResult_NonePaymentSendFailureZ_get_ok(owner_conv);
}

static inline struct LDKPaymentSendFailure CResult_NonePaymentSendFailureZ_get_err(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return PaymentSendFailure_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NonePaymentSendFailureZ* owner_conv = (LDKCResult_NonePaymentSendFailureZ*)(owner & ~1);
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = CResult_NonePaymentSendFailureZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentIdZ_get_a(LDKC2Tuple_PaymentHashPaymentIdZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->a);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentIdZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_PaymentHashPaymentIdZ* owner_conv = (LDKC2Tuple_PaymentHashPaymentIdZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_PaymentHashPaymentIdZ_get_a(owner_conv).data);
	return ret_arr;
}

static inline struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentIdZ_get_b(LDKC2Tuple_PaymentHashPaymentIdZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->b);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentIdZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_PaymentHashPaymentIdZ* owner_conv = (LDKC2Tuple_PaymentHashPaymentIdZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_PaymentHashPaymentIdZ_get_b(owner_conv).data);
	return ret_arr;
}

static inline struct LDKC2Tuple_PaymentHashPaymentIdZ CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_ok(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return C2Tuple_PaymentHashPaymentIdZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* owner_conv = (LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ*)(owner & ~1);
	LDKC2Tuple_PaymentHashPaymentIdZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentIdZ), "LDKC2Tuple_PaymentHashPaymentIdZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_ok(owner_conv);
	return ((uintptr_t)ret_conv);
}

static inline struct LDKPaymentSendFailure CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_err(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return PaymentSendFailure_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* owner_conv = (LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ*)(owner & ~1);
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static jclass LDKNetAddress_IPv4_class = NULL;
static jmethodID LDKNetAddress_IPv4_meth = NULL;
static jclass LDKNetAddress_IPv6_class = NULL;
static jmethodID LDKNetAddress_IPv6_meth = NULL;
static jclass LDKNetAddress_OnionV2_class = NULL;
static jmethodID LDKNetAddress_OnionV2_meth = NULL;
static jclass LDKNetAddress_OnionV3_class = NULL;
static jmethodID LDKNetAddress_OnionV3_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKNetAddress_init (JNIEnv *env, jclass clz) {
	LDKNetAddress_IPv4_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKNetAddress$IPv4"));
	CHECK(LDKNetAddress_IPv4_class != NULL);
	LDKNetAddress_IPv4_meth = (*env)->GetMethodID(env, LDKNetAddress_IPv4_class, "<init>", "([BS)V");
	CHECK(LDKNetAddress_IPv4_meth != NULL);
	LDKNetAddress_IPv6_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKNetAddress$IPv6"));
	CHECK(LDKNetAddress_IPv6_class != NULL);
	LDKNetAddress_IPv6_meth = (*env)->GetMethodID(env, LDKNetAddress_IPv6_class, "<init>", "([BS)V");
	CHECK(LDKNetAddress_IPv6_meth != NULL);
	LDKNetAddress_OnionV2_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKNetAddress$OnionV2"));
	CHECK(LDKNetAddress_OnionV2_class != NULL);
	LDKNetAddress_OnionV2_meth = (*env)->GetMethodID(env, LDKNetAddress_OnionV2_class, "<init>", "([B)V");
	CHECK(LDKNetAddress_OnionV2_meth != NULL);
	LDKNetAddress_OnionV3_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKNetAddress$OnionV3"));
	CHECK(LDKNetAddress_OnionV3_class != NULL);
	LDKNetAddress_OnionV3_meth = (*env)->GetMethodID(env, LDKNetAddress_OnionV3_class, "<init>", "([BSBS)V");
	CHECK(LDKNetAddress_OnionV3_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKNetAddress_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKNetAddress *obj = (LDKNetAddress*)(ptr & ~1);
	switch(obj->tag) {
		case LDKNetAddress_IPv4: {
			int8_tArray addr_arr = (*env)->NewByteArray(env, 4);
			(*env)->SetByteArrayRegion(env, addr_arr, 0, 4, obj->i_pv4.addr.data);
			return (*env)->NewObject(env, LDKNetAddress_IPv4_class, LDKNetAddress_IPv4_meth, addr_arr, obj->i_pv4.port);
		}
		case LDKNetAddress_IPv6: {
			int8_tArray addr_arr = (*env)->NewByteArray(env, 16);
			(*env)->SetByteArrayRegion(env, addr_arr, 0, 16, obj->i_pv6.addr.data);
			return (*env)->NewObject(env, LDKNetAddress_IPv6_class, LDKNetAddress_IPv6_meth, addr_arr, obj->i_pv6.port);
		}
		case LDKNetAddress_OnionV2: {
			int8_tArray onion_v2_arr = (*env)->NewByteArray(env, 12);
			(*env)->SetByteArrayRegion(env, onion_v2_arr, 0, 12, obj->onion_v2.data);
			return (*env)->NewObject(env, LDKNetAddress_OnionV2_class, LDKNetAddress_OnionV2_meth, onion_v2_arr);
		}
		case LDKNetAddress_OnionV3: {
			int8_tArray ed25519_pubkey_arr = (*env)->NewByteArray(env, 32);
			(*env)->SetByteArrayRegion(env, ed25519_pubkey_arr, 0, 32, obj->onion_v3.ed25519_pubkey.data);
			return (*env)->NewObject(env, LDKNetAddress_OnionV3_class, LDKNetAddress_OnionV3_meth, ed25519_pubkey_arr, obj->onion_v3.checksum, obj->onion_v3.version, obj->onion_v3.port);
		}
		default: abort();
	}
}
static inline LDKCVec_NetAddressZ CVec_NetAddressZ_clone(const LDKCVec_NetAddressZ *orig) {
	LDKCVec_NetAddressZ ret = { .data = MALLOC(sizeof(LDKNetAddress) * orig->datalen, "LDKCVec_NetAddressZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = NetAddress_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentSecretZ_get_a(LDKC2Tuple_PaymentHashPaymentSecretZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->a);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentSecretZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_PaymentHashPaymentSecretZ* owner_conv = (LDKC2Tuple_PaymentHashPaymentSecretZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_PaymentHashPaymentSecretZ_get_a(owner_conv).data);
	return ret_arr;
}

static inline struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentSecretZ_get_b(LDKC2Tuple_PaymentHashPaymentSecretZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->b);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentSecretZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_PaymentHashPaymentSecretZ* owner_conv = (LDKC2Tuple_PaymentHashPaymentSecretZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_PaymentHashPaymentSecretZ_get_b(owner_conv).data);
	return ret_arr;
}

static inline struct LDKC2Tuple_PaymentHashPaymentSecretZ CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_ok(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return C2Tuple_PaymentHashPaymentSecretZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* owner_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ*)(owner & ~1);
	LDKC2Tuple_PaymentHashPaymentSecretZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentSecretZ), "LDKC2Tuple_PaymentHashPaymentSecretZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_ok(owner_conv);
	return ((uintptr_t)ret_conv);
}

static inline void CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_err(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* owner_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ*)(owner & ~1);
	CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_err(owner_conv);
}

static inline struct LDKC2Tuple_PaymentHashPaymentSecretZ CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_ok(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return C2Tuple_PaymentHashPaymentSecretZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* owner_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ*)(owner & ~1);
	LDKC2Tuple_PaymentHashPaymentSecretZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentSecretZ), "LDKC2Tuple_PaymentHashPaymentSecretZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_ok(owner_conv);
	return ((uintptr_t)ret_conv);
}

static inline struct LDKAPIError CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_err(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return APIError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* owner_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ*)(owner & ~1);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKThirtyTwoBytes CResult_PaymentSecretNoneZ_get_ok(LDKCResult_PaymentSecretNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ThirtyTwoBytes_clone(&*owner->contents.result);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentSecretNoneZ* owner_conv = (LDKCResult_PaymentSecretNoneZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult_PaymentSecretNoneZ_get_ok(owner_conv).data);
	return ret_arr;
}

static inline void CResult_PaymentSecretNoneZ_get_err(LDKCResult_PaymentSecretNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentSecretNoneZ* owner_conv = (LDKCResult_PaymentSecretNoneZ*)(owner & ~1);
	CResult_PaymentSecretNoneZ_get_err(owner_conv);
}

static inline struct LDKThirtyTwoBytes CResult_PaymentSecretAPIErrorZ_get_ok(LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ThirtyTwoBytes_clone(&*owner->contents.result);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentSecretAPIErrorZ* owner_conv = (LDKCResult_PaymentSecretAPIErrorZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult_PaymentSecretAPIErrorZ_get_ok(owner_conv).data);
	return ret_arr;
}

static inline struct LDKAPIError CResult_PaymentSecretAPIErrorZ_get_err(LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return APIError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentSecretAPIErrorZ* owner_conv = (LDKCResult_PaymentSecretAPIErrorZ*)(owner & ~1);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = CResult_PaymentSecretAPIErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKThirtyTwoBytes CResult_PaymentPreimageAPIErrorZ_get_ok(LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ThirtyTwoBytes_clone(&*owner->contents.result);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentPreimageAPIErrorZ* owner_conv = (LDKCResult_PaymentPreimageAPIErrorZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult_PaymentPreimageAPIErrorZ_get_ok(owner_conv).data);
	return ret_arr;
}

static inline struct LDKAPIError CResult_PaymentPreimageAPIErrorZ_get_err(LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return APIError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentPreimageAPIErrorZ* owner_conv = (LDKCResult_PaymentPreimageAPIErrorZ*)(owner & ~1);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = CResult_PaymentPreimageAPIErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKCounterpartyForwardingInfo CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CounterpartyForwardingInfo_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* owner_conv = (LDKCResult_CounterpartyForwardingInfoDecodeErrorZ*)(owner & ~1);
	LDKCounterpartyForwardingInfo ret_var = CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* owner_conv = (LDKCResult_CounterpartyForwardingInfoDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelCounterparty CResult_ChannelCounterpartyDecodeErrorZ_get_ok(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelCounterparty_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelCounterpartyDecodeErrorZ* owner_conv = (LDKCResult_ChannelCounterpartyDecodeErrorZ*)(owner & ~1);
	LDKChannelCounterparty ret_var = CResult_ChannelCounterpartyDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelCounterpartyDecodeErrorZ_get_err(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelCounterpartyDecodeErrorZ* owner_conv = (LDKCResult_ChannelCounterpartyDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelCounterpartyDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelDetails CResult_ChannelDetailsDecodeErrorZ_get_ok(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelDetails_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelDetailsDecodeErrorZ* owner_conv = (LDKCResult_ChannelDetailsDecodeErrorZ*)(owner & ~1);
	LDKChannelDetails ret_var = CResult_ChannelDetailsDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelDetailsDecodeErrorZ_get_err(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelDetailsDecodeErrorZ* owner_conv = (LDKCResult_ChannelDetailsDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelDetailsDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKPhantomRouteHints CResult_PhantomRouteHintsDecodeErrorZ_get_ok(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return PhantomRouteHints_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PhantomRouteHintsDecodeErrorZ* owner_conv = (LDKCResult_PhantomRouteHintsDecodeErrorZ*)(owner & ~1);
	LDKPhantomRouteHints ret_var = CResult_PhantomRouteHintsDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_PhantomRouteHintsDecodeErrorZ_get_err(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PhantomRouteHintsDecodeErrorZ* owner_conv = (LDKCResult_PhantomRouteHintsDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_PhantomRouteHintsDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_ChannelMonitorZ CVec_ChannelMonitorZ_clone(const LDKCVec_ChannelMonitorZ *orig) {
	LDKCVec_ChannelMonitorZ ret = { .data = MALLOC(sizeof(LDKChannelMonitor) * orig->datalen, "LDKCVec_ChannelMonitorZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = ChannelMonitor_clone(&orig->data[i]);
	}
	return ret;
}
typedef struct LDKWatch_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID watch_channel_meth;
	jmethodID update_channel_meth;
	jmethodID release_pending_monitor_events_meth;
} LDKWatch_JCalls;
static void LDKWatch_JCalls_free(void* this_arg) {
	LDKWatch_JCalls *j_calls = (LDKWatch_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_NoneChannelMonitorUpdateErrZ watch_channel_LDKWatch_jcall(const void* this_arg, LDKOutPoint funding_txo, LDKChannelMonitor monitor) {
	LDKWatch_JCalls *j_calls = (LDKWatch_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKOutPoint funding_txo_var = funding_txo;
	uintptr_t funding_txo_ref = 0;
	CHECK((((uintptr_t)funding_txo_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&funding_txo_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_var);
	funding_txo_ref = (uintptr_t)funding_txo_var.inner;
	if (funding_txo_var.is_owned) {
		funding_txo_ref |= 1;
	}
	LDKChannelMonitor monitor_var = monitor;
	uintptr_t monitor_ref = 0;
	CHECK((((uintptr_t)monitor_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&monitor_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(monitor_var);
	monitor_ref = (uintptr_t)monitor_var.inner;
	if (monitor_var.is_owned) {
		monitor_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->watch_channel_meth, funding_txo_ref, monitor_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to watch_channel in LDKWatch from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneChannelMonitorUpdateErrZ ret_conv = *(LDKCResult_NoneChannelMonitorUpdateErrZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_NoneChannelMonitorUpdateErrZ update_channel_LDKWatch_jcall(const void* this_arg, LDKOutPoint funding_txo, LDKChannelMonitorUpdate update) {
	LDKWatch_JCalls *j_calls = (LDKWatch_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKOutPoint funding_txo_var = funding_txo;
	uintptr_t funding_txo_ref = 0;
	CHECK((((uintptr_t)funding_txo_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&funding_txo_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_var);
	funding_txo_ref = (uintptr_t)funding_txo_var.inner;
	if (funding_txo_var.is_owned) {
		funding_txo_ref |= 1;
	}
	LDKChannelMonitorUpdate update_var = update;
	uintptr_t update_ref = 0;
	CHECK((((uintptr_t)update_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&update_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_var);
	update_ref = (uintptr_t)update_var.inner;
	if (update_var.is_owned) {
		update_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->update_channel_meth, funding_txo_ref, update_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to update_channel in LDKWatch from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneChannelMonitorUpdateErrZ ret_conv = *(LDKCResult_NoneChannelMonitorUpdateErrZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCVec_MonitorEventZ release_pending_monitor_events_LDKWatch_jcall(const void* this_arg) {
	LDKWatch_JCalls *j_calls = (LDKWatch_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->release_pending_monitor_events_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to release_pending_monitor_events in LDKWatch from rust threw an exception.");
	}
	LDKCVec_MonitorEventZ ret_constr;
	ret_constr.datalen = (*env)->GetArrayLength(env, ret);
	if (ret_constr.datalen > 0)
		ret_constr.data = MALLOC(ret_constr.datalen * sizeof(LDKMonitorEvent), "LDKCVec_MonitorEventZ Elements");
	else
		ret_constr.data = NULL;
	int64_t* ret_vals = (*env)->GetLongArrayElements (env, ret, NULL);
	for (size_t o = 0; o < ret_constr.datalen; o++) {
		int64_t ret_conv_14 = ret_vals[o];
		void* ret_conv_14_ptr = (void*)(((uintptr_t)ret_conv_14) & ~1);
		CHECK_ACCESS(ret_conv_14_ptr);
		LDKMonitorEvent ret_conv_14_conv = *(LDKMonitorEvent*)(ret_conv_14_ptr);
		FREE((void*)ret_conv_14);
		ret_constr.data[o] = ret_conv_14_conv;
	}
	(*env)->ReleaseLongArrayElements(env, ret, ret_vals, 0);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_constr;
}
static void LDKWatch_JCalls_cloned(LDKWatch* new_obj) {
	LDKWatch_JCalls *j_calls = (LDKWatch_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKWatch LDKWatch_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKWatch_JCalls *calls = MALLOC(sizeof(LDKWatch_JCalls), "LDKWatch_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->watch_channel_meth = (*env)->GetMethodID(env, c, "watch_channel", "(JJ)J");
	CHECK(calls->watch_channel_meth != NULL);
	calls->update_channel_meth = (*env)->GetMethodID(env, c, "update_channel", "(JJ)J");
	CHECK(calls->update_channel_meth != NULL);
	calls->release_pending_monitor_events_meth = (*env)->GetMethodID(env, c, "release_pending_monitor_events", "()[J");
	CHECK(calls->release_pending_monitor_events_meth != NULL);

	LDKWatch ret = {
		.this_arg = (void*) calls,
		.watch_channel = watch_channel_LDKWatch_jcall,
		.update_channel = update_channel_LDKWatch_jcall,
		.release_pending_monitor_events = release_pending_monitor_events_LDKWatch_jcall,
		.free = LDKWatch_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKWatch_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKWatch *res_ptr = MALLOC(sizeof(LDKWatch), "LDKWatch");
	*res_ptr = LDKWatch_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Watch_1watch_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int64_t funding_txo, int64_t monitor) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKWatch* this_arg_conv = (LDKWatch*)this_arg_ptr;
	LDKOutPoint funding_txo_conv;
	funding_txo_conv.inner = (void*)(funding_txo & (~1));
	funding_txo_conv.is_owned = (funding_txo & 1) || (funding_txo == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_conv);
	funding_txo_conv = OutPoint_clone(&funding_txo_conv);
	LDKChannelMonitor monitor_conv;
	monitor_conv.inner = (void*)(monitor & (~1));
	monitor_conv.is_owned = (monitor & 1) || (monitor == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(monitor_conv);
	monitor_conv = ChannelMonitor_clone(&monitor_conv);
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = (this_arg_conv->watch_channel)(this_arg_conv->this_arg, funding_txo_conv, monitor_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Watch_1update_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int64_t funding_txo, int64_t update) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKWatch* this_arg_conv = (LDKWatch*)this_arg_ptr;
	LDKOutPoint funding_txo_conv;
	funding_txo_conv.inner = (void*)(funding_txo & (~1));
	funding_txo_conv.is_owned = (funding_txo & 1) || (funding_txo == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_conv);
	funding_txo_conv = OutPoint_clone(&funding_txo_conv);
	LDKChannelMonitorUpdate update_conv;
	update_conv.inner = (void*)(update & (~1));
	update_conv.is_owned = (update & 1) || (update == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_conv);
	update_conv = ChannelMonitorUpdate_clone(&update_conv);
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = (this_arg_conv->update_channel)(this_arg_conv->this_arg, funding_txo_conv, update_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_Watch_1release_1pending_1monitor_1events(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKWatch* this_arg_conv = (LDKWatch*)this_arg_ptr;
	LDKCVec_MonitorEventZ ret_var = (this_arg_conv->release_pending_monitor_events)(this_arg_conv->this_arg);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t o = 0; o < ret_var.datalen; o++) {
		LDKMonitorEvent *ret_conv_14_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
		*ret_conv_14_copy = ret_var.data[o];
		uintptr_t ret_conv_14_ref = (uintptr_t)ret_conv_14_copy;
		ret_arr_ptr[o] = ret_conv_14_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

typedef struct LDKBroadcasterInterface_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID broadcast_transaction_meth;
} LDKBroadcasterInterface_JCalls;
static void LDKBroadcasterInterface_JCalls_free(void* this_arg) {
	LDKBroadcasterInterface_JCalls *j_calls = (LDKBroadcasterInterface_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void broadcast_transaction_LDKBroadcasterInterface_jcall(const void* this_arg, LDKTransaction tx) {
	LDKBroadcasterInterface_JCalls *j_calls = (LDKBroadcasterInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKTransaction tx_var = tx;
	int8_tArray tx_arr = (*env)->NewByteArray(env, tx_var.datalen);
	(*env)->SetByteArrayRegion(env, tx_arr, 0, tx_var.datalen, tx_var.data);
	Transaction_free(tx_var);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->broadcast_transaction_meth, tx_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to broadcast_transaction in LDKBroadcasterInterface from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static void LDKBroadcasterInterface_JCalls_cloned(LDKBroadcasterInterface* new_obj) {
	LDKBroadcasterInterface_JCalls *j_calls = (LDKBroadcasterInterface_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKBroadcasterInterface LDKBroadcasterInterface_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKBroadcasterInterface_JCalls *calls = MALLOC(sizeof(LDKBroadcasterInterface_JCalls), "LDKBroadcasterInterface_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->broadcast_transaction_meth = (*env)->GetMethodID(env, c, "broadcast_transaction", "([B)V");
	CHECK(calls->broadcast_transaction_meth != NULL);

	LDKBroadcasterInterface ret = {
		.this_arg = (void*) calls,
		.broadcast_transaction = broadcast_transaction_LDKBroadcasterInterface_jcall,
		.free = LDKBroadcasterInterface_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKBroadcasterInterface_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKBroadcasterInterface *res_ptr = MALLOC(sizeof(LDKBroadcasterInterface), "LDKBroadcasterInterface");
	*res_ptr = LDKBroadcasterInterface_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BroadcasterInterface_1broadcast_1transaction(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray tx) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKBroadcasterInterface* this_arg_conv = (LDKBroadcasterInterface*)this_arg_ptr;
	LDKTransaction tx_ref;
	tx_ref.datalen = (*env)->GetArrayLength(env, tx);
	tx_ref.data = MALLOC(tx_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, tx, 0, tx_ref.datalen, tx_ref.data);
	tx_ref.data_is_owned = true;
	(this_arg_conv->broadcast_transaction)(this_arg_conv->this_arg, tx_ref);
}

typedef struct LDKKeysInterface_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID get_node_secret_meth;
	jmethodID get_destination_script_meth;
	jmethodID get_shutdown_scriptpubkey_meth;
	jmethodID get_channel_signer_meth;
	jmethodID get_secure_random_bytes_meth;
	jmethodID read_chan_signer_meth;
	jmethodID sign_invoice_meth;
	jmethodID get_inbound_payment_key_material_meth;
} LDKKeysInterface_JCalls;
static void LDKKeysInterface_JCalls_free(void* this_arg) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_SecretKeyNoneZ get_node_secret_LDKKeysInterface_jcall(const void* this_arg, LDKRecipient recipient) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jclass recipient_conv = LDKRecipient_to_java(env, recipient);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->get_node_secret_meth, recipient_conv);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_node_secret in LDKKeysInterface from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_SecretKeyNoneZ ret_conv = *(LDKCResult_SecretKeyNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCVec_u8Z get_destination_script_LDKKeysInterface_jcall(const void* this_arg) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_destination_script_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_destination_script in LDKKeysInterface from rust threw an exception.");
	}
	LDKCVec_u8Z ret_ref;
	ret_ref.datalen = (*env)->GetArrayLength(env, ret);
	ret_ref.data = MALLOC(ret_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, ret, 0, ret_ref.datalen, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
LDKShutdownScript get_shutdown_scriptpubkey_LDKKeysInterface_jcall(const void* this_arg) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->get_shutdown_scriptpubkey_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_shutdown_scriptpubkey in LDKKeysInterface from rust threw an exception.");
	}
	LDKShutdownScript ret_conv;
	ret_conv.inner = (void*)(ret & (~1));
	ret_conv.is_owned = (ret & 1) || (ret == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKSign get_channel_signer_LDKKeysInterface_jcall(const void* this_arg, bool inbound, uint64_t channel_value_satoshis) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->get_channel_signer_meth, inbound, channel_value_satoshis);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_channel_signer in LDKKeysInterface from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKSign ret_conv = *(LDKSign*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKThirtyTwoBytes get_secure_random_bytes_LDKKeysInterface_jcall(const void* this_arg) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_secure_random_bytes_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_secure_random_bytes in LDKKeysInterface from rust threw an exception.");
	}
	LDKThirtyTwoBytes ret_ref;
	CHECK((*env)->GetArrayLength(env, ret) == 32);
	(*env)->GetByteArrayRegion(env, ret, 0, 32, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
LDKCResult_SignDecodeErrorZ read_chan_signer_LDKKeysInterface_jcall(const void* this_arg, LDKu8slice reader) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKu8slice reader_var = reader;
	int8_tArray reader_arr = (*env)->NewByteArray(env, reader_var.datalen);
	(*env)->SetByteArrayRegion(env, reader_arr, 0, reader_var.datalen, reader_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->read_chan_signer_meth, reader_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to read_chan_signer in LDKKeysInterface from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_SignDecodeErrorZ ret_conv = *(LDKCResult_SignDecodeErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_RecoverableSignatureNoneZ sign_invoice_LDKKeysInterface_jcall(const void* this_arg, LDKu8slice hrp_bytes, LDKCVec_u5Z invoice_data, LDKRecipient receipient) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKu8slice hrp_bytes_var = hrp_bytes;
	int8_tArray hrp_bytes_arr = (*env)->NewByteArray(env, hrp_bytes_var.datalen);
	(*env)->SetByteArrayRegion(env, hrp_bytes_arr, 0, hrp_bytes_var.datalen, hrp_bytes_var.data);
	LDKCVec_u5Z invoice_data_var = invoice_data;
	jobjectArray invoice_data_arr = NULL;
	invoice_data_arr = (*env)->NewByteArray(env, invoice_data_var.datalen);
	int8_t *invoice_data_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, invoice_data_arr, NULL);
	for (size_t h = 0; h < invoice_data_var.datalen; h++) {
		uint8_t invoice_data_conv_7_val = invoice_data_var.data[h]._0;
		invoice_data_arr_ptr[h] = invoice_data_conv_7_val;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, invoice_data_arr, invoice_data_arr_ptr, 0);
	FREE(invoice_data_var.data);
	jclass receipient_conv = LDKRecipient_to_java(env, receipient);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->sign_invoice_meth, hrp_bytes_arr, invoice_data_arr, receipient_conv);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sign_invoice in LDKKeysInterface from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_RecoverableSignatureNoneZ ret_conv = *(LDKCResult_RecoverableSignatureNoneZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKThirtyTwoBytes get_inbound_payment_key_material_LDKKeysInterface_jcall(const void* this_arg) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_inbound_payment_key_material_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_inbound_payment_key_material in LDKKeysInterface from rust threw an exception.");
	}
	LDKThirtyTwoBytes ret_ref;
	CHECK((*env)->GetArrayLength(env, ret) == 32);
	(*env)->GetByteArrayRegion(env, ret, 0, 32, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
static void LDKKeysInterface_JCalls_cloned(LDKKeysInterface* new_obj) {
	LDKKeysInterface_JCalls *j_calls = (LDKKeysInterface_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKKeysInterface LDKKeysInterface_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKKeysInterface_JCalls *calls = MALLOC(sizeof(LDKKeysInterface_JCalls), "LDKKeysInterface_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->get_node_secret_meth = (*env)->GetMethodID(env, c, "get_node_secret", "(Lorg/ldk/enums/Recipient;)J");
	CHECK(calls->get_node_secret_meth != NULL);
	calls->get_destination_script_meth = (*env)->GetMethodID(env, c, "get_destination_script", "()[B");
	CHECK(calls->get_destination_script_meth != NULL);
	calls->get_shutdown_scriptpubkey_meth = (*env)->GetMethodID(env, c, "get_shutdown_scriptpubkey", "()J");
	CHECK(calls->get_shutdown_scriptpubkey_meth != NULL);
	calls->get_channel_signer_meth = (*env)->GetMethodID(env, c, "get_channel_signer", "(ZJ)J");
	CHECK(calls->get_channel_signer_meth != NULL);
	calls->get_secure_random_bytes_meth = (*env)->GetMethodID(env, c, "get_secure_random_bytes", "()[B");
	CHECK(calls->get_secure_random_bytes_meth != NULL);
	calls->read_chan_signer_meth = (*env)->GetMethodID(env, c, "read_chan_signer", "([B)J");
	CHECK(calls->read_chan_signer_meth != NULL);
	calls->sign_invoice_meth = (*env)->GetMethodID(env, c, "sign_invoice", "([B[BLorg/ldk/enums/Recipient;)J");
	CHECK(calls->sign_invoice_meth != NULL);
	calls->get_inbound_payment_key_material_meth = (*env)->GetMethodID(env, c, "get_inbound_payment_key_material", "()[B");
	CHECK(calls->get_inbound_payment_key_material_meth != NULL);

	LDKKeysInterface ret = {
		.this_arg = (void*) calls,
		.get_node_secret = get_node_secret_LDKKeysInterface_jcall,
		.get_destination_script = get_destination_script_LDKKeysInterface_jcall,
		.get_shutdown_scriptpubkey = get_shutdown_scriptpubkey_LDKKeysInterface_jcall,
		.get_channel_signer = get_channel_signer_LDKKeysInterface_jcall,
		.get_secure_random_bytes = get_secure_random_bytes_LDKKeysInterface_jcall,
		.read_chan_signer = read_chan_signer_LDKKeysInterface_jcall,
		.sign_invoice = sign_invoice_LDKKeysInterface_jcall,
		.get_inbound_payment_key_material = get_inbound_payment_key_material_LDKKeysInterface_jcall,
		.free = LDKKeysInterface_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKKeysInterface_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKKeysInterface *res_ptr = MALLOC(sizeof(LDKKeysInterface), "LDKKeysInterface");
	*res_ptr = LDKKeysInterface_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysInterface_1get_1node_1secret(JNIEnv *env, jclass clz, int64_t this_arg, jclass recipient) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	LDKRecipient recipient_conv = LDKRecipient_from_java(env, recipient);
	LDKCResult_SecretKeyNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyNoneZ), "LDKCResult_SecretKeyNoneZ");
	*ret_conv = (this_arg_conv->get_node_secret)(this_arg_conv->this_arg, recipient_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_KeysInterface_1get_1destination_1script(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	LDKCVec_u8Z ret_var = (this_arg_conv->get_destination_script)(this_arg_conv->this_arg);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysInterface_1get_1shutdown_1scriptpubkey(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	LDKShutdownScript ret_var = (this_arg_conv->get_shutdown_scriptpubkey)(this_arg_conv->this_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysInterface_1get_1channel_1signer(JNIEnv *env, jclass clz, int64_t this_arg, jboolean inbound, int64_t channel_value_satoshis) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	LDKSign* ret_ret = MALLOC(sizeof(LDKSign), "LDKSign");
	*ret_ret = (this_arg_conv->get_channel_signer)(this_arg_conv->this_arg, inbound, channel_value_satoshis);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_KeysInterface_1get_1secure_1random_1bytes(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, (this_arg_conv->get_secure_random_bytes)(this_arg_conv->this_arg).data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysInterface_1read_1chan_1signer(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray reader) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	LDKu8slice reader_ref;
	reader_ref.datalen = (*env)->GetArrayLength(env, reader);
	reader_ref.data = (*env)->GetByteArrayElements (env, reader, NULL);
	LDKCResult_SignDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SignDecodeErrorZ), "LDKCResult_SignDecodeErrorZ");
	*ret_conv = (this_arg_conv->read_chan_signer)(this_arg_conv->this_arg, reader_ref);
	(*env)->ReleaseByteArrayElements(env, reader, (int8_t*)reader_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysInterface_1sign_1invoice(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray hrp_bytes, jobjectArray invoice_data, jclass receipient) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	LDKu8slice hrp_bytes_ref;
	hrp_bytes_ref.datalen = (*env)->GetArrayLength(env, hrp_bytes);
	hrp_bytes_ref.data = (*env)->GetByteArrayElements (env, hrp_bytes, NULL);
	LDKCVec_u5Z invoice_data_constr;
	invoice_data_constr.datalen = (*env)->GetArrayLength(env, invoice_data);
	if (invoice_data_constr.datalen > 0)
		invoice_data_constr.data = MALLOC(invoice_data_constr.datalen * sizeof(LDKu5), "LDKCVec_u5Z Elements");
	else
		invoice_data_constr.data = NULL;
	int8_t* invoice_data_vals = (*env)->GetByteArrayElements (env, invoice_data, NULL);
	for (size_t h = 0; h < invoice_data_constr.datalen; h++) {
		int8_t invoice_data_conv_7 = invoice_data_vals[h];
		
		invoice_data_constr.data[h] = (LDKu5){ ._0 = invoice_data_conv_7 };
	}
	(*env)->ReleaseByteArrayElements(env, invoice_data, invoice_data_vals, 0);
	LDKRecipient receipient_conv = LDKRecipient_from_java(env, receipient);
	LDKCResult_RecoverableSignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_RecoverableSignatureNoneZ), "LDKCResult_RecoverableSignatureNoneZ");
	*ret_conv = (this_arg_conv->sign_invoice)(this_arg_conv->this_arg, hrp_bytes_ref, invoice_data_constr, receipient_conv);
	(*env)->ReleaseByteArrayElements(env, hrp_bytes, (int8_t*)hrp_bytes_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_KeysInterface_1get_1inbound_1payment_1key_1material(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKKeysInterface* this_arg_conv = (LDKKeysInterface*)this_arg_ptr;
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, (this_arg_conv->get_inbound_payment_key_material)(this_arg_conv->this_arg).data);
	return ret_arr;
}

typedef struct LDKFeeEstimator_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID get_est_sat_per_1000_weight_meth;
} LDKFeeEstimator_JCalls;
static void LDKFeeEstimator_JCalls_free(void* this_arg) {
	LDKFeeEstimator_JCalls *j_calls = (LDKFeeEstimator_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
uint32_t get_est_sat_per_1000_weight_LDKFeeEstimator_jcall(const void* this_arg, LDKConfirmationTarget confirmation_target) {
	LDKFeeEstimator_JCalls *j_calls = (LDKFeeEstimator_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jclass confirmation_target_conv = LDKConfirmationTarget_to_java(env, confirmation_target);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int32_t ret = (*env)->CallIntMethod(env, obj, j_calls->get_est_sat_per_1000_weight_meth, confirmation_target_conv);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_est_sat_per_1000_weight in LDKFeeEstimator from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret;
}
static void LDKFeeEstimator_JCalls_cloned(LDKFeeEstimator* new_obj) {
	LDKFeeEstimator_JCalls *j_calls = (LDKFeeEstimator_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKFeeEstimator LDKFeeEstimator_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKFeeEstimator_JCalls *calls = MALLOC(sizeof(LDKFeeEstimator_JCalls), "LDKFeeEstimator_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->get_est_sat_per_1000_weight_meth = (*env)->GetMethodID(env, c, "get_est_sat_per_1000_weight", "(Lorg/ldk/enums/ConfirmationTarget;)I");
	CHECK(calls->get_est_sat_per_1000_weight_meth != NULL);

	LDKFeeEstimator ret = {
		.this_arg = (void*) calls,
		.get_est_sat_per_1000_weight = get_est_sat_per_1000_weight_LDKFeeEstimator_jcall,
		.free = LDKFeeEstimator_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKFeeEstimator_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKFeeEstimator *res_ptr = MALLOC(sizeof(LDKFeeEstimator), "LDKFeeEstimator");
	*res_ptr = LDKFeeEstimator_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_FeeEstimator_1get_1est_1sat_1per_11000_1weight(JNIEnv *env, jclass clz, int64_t this_arg, jclass confirmation_target) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKFeeEstimator* this_arg_conv = (LDKFeeEstimator*)this_arg_ptr;
	LDKConfirmationTarget confirmation_target_conv = LDKConfirmationTarget_from_java(env, confirmation_target);
	int32_t ret_val = (this_arg_conv->get_est_sat_per_1000_weight)(this_arg_conv->this_arg, confirmation_target_conv);
	return ret_val;
}

typedef struct LDKLogger_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID log_meth;
} LDKLogger_JCalls;
static void LDKLogger_JCalls_free(void* this_arg) {
	LDKLogger_JCalls *j_calls = (LDKLogger_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void log_LDKLogger_jcall(const void* this_arg, const LDKRecord * record) {
	LDKLogger_JCalls *j_calls = (LDKLogger_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKRecord record_var = *record;
	uintptr_t record_ref = 0;
	record_var = Record_clone(record);
	CHECK((((uintptr_t)record_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&record_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(record_var);
	record_ref = (uintptr_t)record_var.inner;
	if (record_var.is_owned) {
		record_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->log_meth, record_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to log in LDKLogger from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static void LDKLogger_JCalls_cloned(LDKLogger* new_obj) {
	LDKLogger_JCalls *j_calls = (LDKLogger_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKLogger LDKLogger_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKLogger_JCalls *calls = MALLOC(sizeof(LDKLogger_JCalls), "LDKLogger_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->log_meth = (*env)->GetMethodID(env, c, "log", "(J)V");
	CHECK(calls->log_meth != NULL);

	LDKLogger ret = {
		.this_arg = (void*) calls,
		.log = log_LDKLogger_jcall,
		.free = LDKLogger_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKLogger_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKLogger *res_ptr = MALLOC(sizeof(LDKLogger), "LDKLogger");
	*res_ptr = LDKLogger_init(env, clz, o);
	return (uint64_t)res_ptr;
}
static inline struct LDKThirtyTwoBytes C2Tuple_BlockHashChannelManagerZ_get_a(LDKC2Tuple_BlockHashChannelManagerZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->a);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelManagerZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_BlockHashChannelManagerZ* owner_conv = (LDKC2Tuple_BlockHashChannelManagerZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_BlockHashChannelManagerZ_get_a(owner_conv).data);
	return ret_arr;
}

static inline struct LDKChannelManager *C2Tuple_BlockHashChannelManagerZ_get_b(LDKC2Tuple_BlockHashChannelManagerZ *NONNULL_PTR owner){
	return &owner->b;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelManagerZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_BlockHashChannelManagerZ* owner_conv = (LDKC2Tuple_BlockHashChannelManagerZ*)(owner & ~1);
	LDKChannelManager ret_var = *C2Tuple_BlockHashChannelManagerZ_get_b(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner & ~1;
	return ret_ref;
}

static inline struct LDKC2Tuple_BlockHashChannelManagerZ *CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return &*owner->contents.result;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelManagerZDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ* owner_conv = (LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ*)(owner & ~1);
	uintptr_t ret_ret = (uintptr_t)CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_ok(owner_conv) | 1;
	return ret_ret;
}

static inline struct LDKDecodeError CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_err(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelManagerZDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ* owner_conv = (LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelConfig CResult_ChannelConfigDecodeErrorZ_get_ok(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelConfig_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelConfigDecodeErrorZ* owner_conv = (LDKCResult_ChannelConfigDecodeErrorZ*)(owner & ~1);
	LDKChannelConfig ret_var = CResult_ChannelConfigDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelConfigDecodeErrorZ_get_err(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelConfigDecodeErrorZ* owner_conv = (LDKCResult_ChannelConfigDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelConfigDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKOutPoint CResult_OutPointDecodeErrorZ_get_ok(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return OutPoint_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_OutPointDecodeErrorZ* owner_conv = (LDKCResult_OutPointDecodeErrorZ*)(owner & ~1);
	LDKOutPoint ret_var = CResult_OutPointDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_OutPointDecodeErrorZ_get_err(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_OutPointDecodeErrorZ* owner_conv = (LDKCResult_OutPointDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_OutPointDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

typedef struct LDKType_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID type_id_meth;
	jmethodID debug_str_meth;
	jmethodID write_meth;
} LDKType_JCalls;
static void LDKType_JCalls_free(void* this_arg) {
	LDKType_JCalls *j_calls = (LDKType_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
uint16_t type_id_LDKType_jcall(const void* this_arg) {
	LDKType_JCalls *j_calls = (LDKType_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int16_t ret = (*env)->CallShortMethod(env, obj, j_calls->type_id_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to type_id in LDKType from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret;
}
LDKStr debug_str_LDKType_jcall(const void* this_arg) {
	LDKType_JCalls *j_calls = (LDKType_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	jstring ret = (*env)->CallObjectMethod(env, obj, j_calls->debug_str_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to debug_str in LDKType from rust threw an exception.");
	}
	LDKStr ret_conv = java_to_owned_str(env, ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCVec_u8Z write_LDKType_jcall(const void* this_arg) {
	LDKType_JCalls *j_calls = (LDKType_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->write_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to write in LDKType from rust threw an exception.");
	}
	LDKCVec_u8Z ret_ref;
	ret_ref.datalen = (*env)->GetArrayLength(env, ret);
	ret_ref.data = MALLOC(ret_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, ret, 0, ret_ref.datalen, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
static void LDKType_JCalls_cloned(LDKType* new_obj) {
	LDKType_JCalls *j_calls = (LDKType_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKType LDKType_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKType_JCalls *calls = MALLOC(sizeof(LDKType_JCalls), "LDKType_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->type_id_meth = (*env)->GetMethodID(env, c, "type_id", "()S");
	CHECK(calls->type_id_meth != NULL);
	calls->debug_str_meth = (*env)->GetMethodID(env, c, "debug_str", "()Ljava/lang/String;");
	CHECK(calls->debug_str_meth != NULL);
	calls->write_meth = (*env)->GetMethodID(env, c, "write", "()[B");
	CHECK(calls->write_meth != NULL);

	LDKType ret = {
		.this_arg = (void*) calls,
		.type_id = type_id_LDKType_jcall,
		.debug_str = debug_str_LDKType_jcall,
		.write = write_LDKType_jcall,
		.cloned = LDKType_JCalls_cloned,
		.free = LDKType_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKType_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKType *res_ptr = MALLOC(sizeof(LDKType), "LDKType");
	*res_ptr = LDKType_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_Type_1type_1id(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKType* this_arg_conv = (LDKType*)this_arg_ptr;
	int16_t ret_val = (this_arg_conv->type_id)(this_arg_conv->this_arg);
	return ret_val;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_Type_1debug_1str(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKType* this_arg_conv = (LDKType*)this_arg_ptr;
	LDKStr ret_str = (this_arg_conv->debug_str)(this_arg_conv->this_arg);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Type_1write(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKType* this_arg_conv = (LDKType*)this_arg_ptr;
	LDKCVec_u8Z ret_var = (this_arg_conv->write)(this_arg_conv->this_arg);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

static jclass LDKCOption_TypeZ_Some_class = NULL;
static jmethodID LDKCOption_TypeZ_Some_meth = NULL;
static jclass LDKCOption_TypeZ_None_class = NULL;
static jmethodID LDKCOption_TypeZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1TypeZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_TypeZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_TypeZ$Some"));
	CHECK(LDKCOption_TypeZ_Some_class != NULL);
	LDKCOption_TypeZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_TypeZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_TypeZ_Some_meth != NULL);
	LDKCOption_TypeZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_TypeZ$None"));
	CHECK(LDKCOption_TypeZ_None_class != NULL);
	LDKCOption_TypeZ_None_meth = (*env)->GetMethodID(env, LDKCOption_TypeZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_TypeZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1TypeZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_TypeZ *obj = (LDKCOption_TypeZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_TypeZ_Some: {
			LDKType* some_ret = MALLOC(sizeof(LDKType), "LDKType");
			*some_ret = Type_clone(&obj->some);
			return (*env)->NewObject(env, LDKCOption_TypeZ_Some_class, LDKCOption_TypeZ_Some_meth, (uintptr_t)some_ret);
		}
		case LDKCOption_TypeZ_None: {
			return (*env)->NewObject(env, LDKCOption_TypeZ_None_class, LDKCOption_TypeZ_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKCOption_TypeZ CResult_COption_TypeZDecodeErrorZ_get_ok(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return COption_TypeZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_TypeZDecodeErrorZ* owner_conv = (LDKCResult_COption_TypeZDecodeErrorZ*)(owner & ~1);
	LDKCOption_TypeZ *ret_copy = MALLOC(sizeof(LDKCOption_TypeZ), "LDKCOption_TypeZ");
	*ret_copy = CResult_COption_TypeZDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_COption_TypeZDecodeErrorZ_get_err(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_TypeZDecodeErrorZ* owner_conv = (LDKCResult_COption_TypeZDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_COption_TypeZDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static jclass LDKPaymentError_Invoice_class = NULL;
static jmethodID LDKPaymentError_Invoice_meth = NULL;
static jclass LDKPaymentError_Routing_class = NULL;
static jmethodID LDKPaymentError_Routing_meth = NULL;
static jclass LDKPaymentError_Sending_class = NULL;
static jmethodID LDKPaymentError_Sending_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKPaymentError_init (JNIEnv *env, jclass clz) {
	LDKPaymentError_Invoice_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentError$Invoice"));
	CHECK(LDKPaymentError_Invoice_class != NULL);
	LDKPaymentError_Invoice_meth = (*env)->GetMethodID(env, LDKPaymentError_Invoice_class, "<init>", "(Ljava/lang/String;)V");
	CHECK(LDKPaymentError_Invoice_meth != NULL);
	LDKPaymentError_Routing_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentError$Routing"));
	CHECK(LDKPaymentError_Routing_class != NULL);
	LDKPaymentError_Routing_meth = (*env)->GetMethodID(env, LDKPaymentError_Routing_class, "<init>", "(J)V");
	CHECK(LDKPaymentError_Routing_meth != NULL);
	LDKPaymentError_Sending_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKPaymentError$Sending"));
	CHECK(LDKPaymentError_Sending_class != NULL);
	LDKPaymentError_Sending_meth = (*env)->GetMethodID(env, LDKPaymentError_Sending_class, "<init>", "(J)V");
	CHECK(LDKPaymentError_Sending_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKPaymentError_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKPaymentError *obj = (LDKPaymentError*)(ptr & ~1);
	switch(obj->tag) {
		case LDKPaymentError_Invoice: {
			LDKStr invoice_str = obj->invoice;
			jstring invoice_conv = str_ref_to_java(env, invoice_str.chars, invoice_str.len);
			return (*env)->NewObject(env, LDKPaymentError_Invoice_class, LDKPaymentError_Invoice_meth, invoice_conv);
		}
		case LDKPaymentError_Routing: {
			LDKLightningError routing_var = obj->routing;
			uintptr_t routing_ref = 0;
			CHECK((((uintptr_t)routing_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&routing_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(routing_var);
			routing_ref = (uintptr_t)routing_var.inner & ~1;
			return (*env)->NewObject(env, LDKPaymentError_Routing_class, LDKPaymentError_Routing_meth, routing_ref);
		}
		case LDKPaymentError_Sending: {
			uintptr_t sending_ref = ((uintptr_t)&obj->sending) | 1;
			return (*env)->NewObject(env, LDKPaymentError_Sending_class, LDKPaymentError_Sending_meth, sending_ref);
		}
		default: abort();
	}
}
static inline struct LDKThirtyTwoBytes CResult_PaymentIdPaymentErrorZ_get_ok(LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ThirtyTwoBytes_clone(&*owner->contents.result);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentIdPaymentErrorZ* owner_conv = (LDKCResult_PaymentIdPaymentErrorZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CResult_PaymentIdPaymentErrorZ_get_ok(owner_conv).data);
	return ret_arr;
}

static inline struct LDKPaymentError CResult_PaymentIdPaymentErrorZ_get_err(LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return PaymentError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PaymentIdPaymentErrorZ* owner_conv = (LDKCResult_PaymentIdPaymentErrorZ*)(owner & ~1);
	LDKPaymentError *ret_copy = MALLOC(sizeof(LDKPaymentError), "LDKPaymentError");
	*ret_copy = CResult_PaymentIdPaymentErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline enum LDKSiPrefix CResult_SiPrefixNoneZ_get_ok(LDKCResult_SiPrefixNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return SiPrefix_clone(&*owner->contents.result);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SiPrefixNoneZ* owner_conv = (LDKCResult_SiPrefixNoneZ*)(owner & ~1);
	jclass ret_conv = LDKSiPrefix_to_java(env, CResult_SiPrefixNoneZ_get_ok(owner_conv));
	return ret_conv;
}

static inline void CResult_SiPrefixNoneZ_get_err(LDKCResult_SiPrefixNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SiPrefixNoneZ* owner_conv = (LDKCResult_SiPrefixNoneZ*)(owner & ~1);
	CResult_SiPrefixNoneZ_get_err(owner_conv);
}

static inline struct LDKInvoice CResult_InvoiceNoneZ_get_ok(LDKCResult_InvoiceNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Invoice_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceNoneZ* owner_conv = (LDKCResult_InvoiceNoneZ*)(owner & ~1);
	LDKInvoice ret_var = CResult_InvoiceNoneZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline void CResult_InvoiceNoneZ_get_err(LDKCResult_InvoiceNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceNoneZ* owner_conv = (LDKCResult_InvoiceNoneZ*)(owner & ~1);
	CResult_InvoiceNoneZ_get_err(owner_conv);
}

static inline struct LDKSignedRawInvoice CResult_SignedRawInvoiceNoneZ_get_ok(LDKCResult_SignedRawInvoiceNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return SignedRawInvoice_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SignedRawInvoiceNoneZ* owner_conv = (LDKCResult_SignedRawInvoiceNoneZ*)(owner & ~1);
	LDKSignedRawInvoice ret_var = CResult_SignedRawInvoiceNoneZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline void CResult_SignedRawInvoiceNoneZ_get_err(LDKCResult_SignedRawInvoiceNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_SignedRawInvoiceNoneZ* owner_conv = (LDKCResult_SignedRawInvoiceNoneZ*)(owner & ~1);
	CResult_SignedRawInvoiceNoneZ_get_err(owner_conv);
}

static inline struct LDKRawInvoice C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_a(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR owner){
	return RawInvoice_clone(&owner->a);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1RawInvoice_1u832InvoiceSignatureZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* owner_conv = (LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ*)(owner & ~1);
	LDKRawInvoice ret_var = C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_a(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKThirtyTwoBytes C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_b(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->b);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C3Tuple_1RawInvoice_1u832InvoiceSignatureZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* owner_conv = (LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_b(owner_conv).data);
	return ret_arr;
}

static inline struct LDKInvoiceSignature C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_c(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR owner){
	return InvoiceSignature_clone(&owner->c);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1RawInvoice_1u832InvoiceSignatureZ_1get_1c(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* owner_conv = (LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ*)(owner & ~1);
	LDKInvoiceSignature ret_var = C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_c(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKPayeePubKey CResult_PayeePubKeyErrorZ_get_ok(LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return PayeePubKey_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PayeePubKeyErrorZ* owner_conv = (LDKCResult_PayeePubKeyErrorZ*)(owner & ~1);
	LDKPayeePubKey ret_var = CResult_PayeePubKeyErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline enum LDKSecp256k1Error CResult_PayeePubKeyErrorZ_get_err(LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PayeePubKeyErrorZ* owner_conv = (LDKCResult_PayeePubKeyErrorZ*)(owner & ~1);
	jclass ret_conv = LDKSecp256k1Error_to_java(env, CResult_PayeePubKeyErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline LDKCVec_PrivateRouteZ CVec_PrivateRouteZ_clone(const LDKCVec_PrivateRouteZ *orig) {
	LDKCVec_PrivateRouteZ ret = { .data = MALLOC(sizeof(LDKPrivateRoute) * orig->datalen, "LDKCVec_PrivateRouteZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = PrivateRoute_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKPositiveTimestamp CResult_PositiveTimestampCreationErrorZ_get_ok(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return PositiveTimestamp_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PositiveTimestampCreationErrorZ* owner_conv = (LDKCResult_PositiveTimestampCreationErrorZ*)(owner & ~1);
	LDKPositiveTimestamp ret_var = CResult_PositiveTimestampCreationErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline enum LDKCreationError CResult_PositiveTimestampCreationErrorZ_get_err(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return CreationError_clone(&*owner->contents.err);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PositiveTimestampCreationErrorZ* owner_conv = (LDKCResult_PositiveTimestampCreationErrorZ*)(owner & ~1);
	jclass ret_conv = LDKCreationError_to_java(env, CResult_PositiveTimestampCreationErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline void CResult_NoneSemanticErrorZ_get_ok(LDKCResult_NoneSemanticErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneSemanticErrorZ* owner_conv = (LDKCResult_NoneSemanticErrorZ*)(owner & ~1);
	CResult_NoneSemanticErrorZ_get_ok(owner_conv);
}

static inline enum LDKSemanticError CResult_NoneSemanticErrorZ_get_err(LDKCResult_NoneSemanticErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return SemanticError_clone(&*owner->contents.err);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneSemanticErrorZ* owner_conv = (LDKCResult_NoneSemanticErrorZ*)(owner & ~1);
	jclass ret_conv = LDKSemanticError_to_java(env, CResult_NoneSemanticErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKInvoice CResult_InvoiceSemanticErrorZ_get_ok(LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Invoice_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceSemanticErrorZ* owner_conv = (LDKCResult_InvoiceSemanticErrorZ*)(owner & ~1);
	LDKInvoice ret_var = CResult_InvoiceSemanticErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline enum LDKSemanticError CResult_InvoiceSemanticErrorZ_get_err(LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return SemanticError_clone(&*owner->contents.err);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceSemanticErrorZ* owner_conv = (LDKCResult_InvoiceSemanticErrorZ*)(owner & ~1);
	jclass ret_conv = LDKSemanticError_to_java(env, CResult_InvoiceSemanticErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKDescription CResult_DescriptionCreationErrorZ_get_ok(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Description_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_DescriptionCreationErrorZ* owner_conv = (LDKCResult_DescriptionCreationErrorZ*)(owner & ~1);
	LDKDescription ret_var = CResult_DescriptionCreationErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline enum LDKCreationError CResult_DescriptionCreationErrorZ_get_err(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return CreationError_clone(&*owner->contents.err);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_DescriptionCreationErrorZ* owner_conv = (LDKCResult_DescriptionCreationErrorZ*)(owner & ~1);
	jclass ret_conv = LDKCreationError_to_java(env, CResult_DescriptionCreationErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKPrivateRoute CResult_PrivateRouteCreationErrorZ_get_ok(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return PrivateRoute_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PrivateRouteCreationErrorZ* owner_conv = (LDKCResult_PrivateRouteCreationErrorZ*)(owner & ~1);
	LDKPrivateRoute ret_var = CResult_PrivateRouteCreationErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline enum LDKCreationError CResult_PrivateRouteCreationErrorZ_get_err(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return CreationError_clone(&*owner->contents.err);
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PrivateRouteCreationErrorZ* owner_conv = (LDKCResult_PrivateRouteCreationErrorZ*)(owner & ~1);
	jclass ret_conv = LDKCreationError_to_java(env, CResult_PrivateRouteCreationErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKStr CResult_StringErrorZ_get_ok(LDKCResult_StringErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_CResult_1StringErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_StringErrorZ* owner_conv = (LDKCResult_StringErrorZ*)(owner & ~1);
	LDKStr ret_str = CResult_StringErrorZ_get_ok(owner_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	return ret_conv;
}

static inline enum LDKSecp256k1Error CResult_StringErrorZ_get_err(LDKCResult_StringErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CResult_1StringErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_StringErrorZ* owner_conv = (LDKCResult_StringErrorZ*)(owner & ~1);
	jclass ret_conv = LDKSecp256k1Error_to_java(env, CResult_StringErrorZ_get_err(owner_conv));
	return ret_conv;
}

static inline struct LDKChannelMonitorUpdate CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelMonitorUpdate_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* owner_conv = (LDKCResult_ChannelMonitorUpdateDecodeErrorZ*)(owner & ~1);
	LDKChannelMonitorUpdate ret_var = CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelMonitorUpdateDecodeErrorZ_get_err(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* owner_conv = (LDKCResult_ChannelMonitorUpdateDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelMonitorUpdateDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static jclass LDKCOption_MonitorEventZ_Some_class = NULL;
static jmethodID LDKCOption_MonitorEventZ_Some_meth = NULL;
static jclass LDKCOption_MonitorEventZ_None_class = NULL;
static jmethodID LDKCOption_MonitorEventZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1MonitorEventZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_MonitorEventZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_MonitorEventZ$Some"));
	CHECK(LDKCOption_MonitorEventZ_Some_class != NULL);
	LDKCOption_MonitorEventZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_MonitorEventZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_MonitorEventZ_Some_meth != NULL);
	LDKCOption_MonitorEventZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_MonitorEventZ$None"));
	CHECK(LDKCOption_MonitorEventZ_None_class != NULL);
	LDKCOption_MonitorEventZ_None_meth = (*env)->GetMethodID(env, LDKCOption_MonitorEventZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_MonitorEventZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1MonitorEventZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_MonitorEventZ *obj = (LDKCOption_MonitorEventZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_MonitorEventZ_Some: {
			uintptr_t some_ref = ((uintptr_t)&obj->some) | 1;
			return (*env)->NewObject(env, LDKCOption_MonitorEventZ_Some_class, LDKCOption_MonitorEventZ_Some_meth, some_ref);
		}
		case LDKCOption_MonitorEventZ_None: {
			return (*env)->NewObject(env, LDKCOption_MonitorEventZ_None_class, LDKCOption_MonitorEventZ_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKCOption_MonitorEventZ CResult_COption_MonitorEventZDecodeErrorZ_get_ok(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return COption_MonitorEventZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_MonitorEventZDecodeErrorZ* owner_conv = (LDKCResult_COption_MonitorEventZDecodeErrorZ*)(owner & ~1);
	LDKCOption_MonitorEventZ *ret_copy = MALLOC(sizeof(LDKCOption_MonitorEventZ), "LDKCOption_MonitorEventZ");
	*ret_copy = CResult_COption_MonitorEventZDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_COption_MonitorEventZDecodeErrorZ_get_err(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_MonitorEventZDecodeErrorZ* owner_conv = (LDKCResult_COption_MonitorEventZDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_COption_MonitorEventZDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKHTLCUpdate CResult_HTLCUpdateDecodeErrorZ_get_ok(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return HTLCUpdate_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_HTLCUpdateDecodeErrorZ* owner_conv = (LDKCResult_HTLCUpdateDecodeErrorZ*)(owner & ~1);
	LDKHTLCUpdate ret_var = CResult_HTLCUpdateDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_HTLCUpdateDecodeErrorZ_get_err(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_HTLCUpdateDecodeErrorZ* owner_conv = (LDKCResult_HTLCUpdateDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_HTLCUpdateDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKOutPoint C2Tuple_OutPointScriptZ_get_a(LDKC2Tuple_OutPointScriptZ *NONNULL_PTR owner){
	return OutPoint_clone(&owner->a);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1OutPointScriptZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_OutPointScriptZ* owner_conv = (LDKC2Tuple_OutPointScriptZ*)(owner & ~1);
	LDKOutPoint ret_var = C2Tuple_OutPointScriptZ_get_a(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKCVec_u8Z C2Tuple_OutPointScriptZ_get_b(LDKC2Tuple_OutPointScriptZ *NONNULL_PTR owner){
	return CVec_u8Z_clone(&owner->b);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1OutPointScriptZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_OutPointScriptZ* owner_conv = (LDKC2Tuple_OutPointScriptZ*)(owner & ~1);
	LDKCVec_u8Z ret_var = C2Tuple_OutPointScriptZ_get_b(owner_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

static inline uint32_t C2Tuple_u32ScriptZ_get_a(LDKC2Tuple_u32ScriptZ *NONNULL_PTR owner){
	return owner->a;
}
JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32ScriptZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_u32ScriptZ* owner_conv = (LDKC2Tuple_u32ScriptZ*)(owner & ~1);
	int32_t ret_val = C2Tuple_u32ScriptZ_get_a(owner_conv);
	return ret_val;
}

static inline struct LDKCVec_u8Z C2Tuple_u32ScriptZ_get_b(LDKC2Tuple_u32ScriptZ *NONNULL_PTR owner){
	return CVec_u8Z_clone(&owner->b);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32ScriptZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_u32ScriptZ* owner_conv = (LDKC2Tuple_u32ScriptZ*)(owner & ~1);
	LDKCVec_u8Z ret_var = C2Tuple_u32ScriptZ_get_b(owner_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

static inline LDKCVec_C2Tuple_u32ScriptZZ CVec_C2Tuple_u32ScriptZZ_clone(const LDKCVec_C2Tuple_u32ScriptZZ *orig) {
	LDKCVec_C2Tuple_u32ScriptZZ ret = { .data = MALLOC(sizeof(LDKC2Tuple_u32ScriptZ) * orig->datalen, "LDKCVec_C2Tuple_u32ScriptZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C2Tuple_u32ScriptZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKThirtyTwoBytes C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_a(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->a);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32ScriptZZZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* owner_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_a(owner_conv).data);
	return ret_arr;
}

static inline struct LDKCVec_C2Tuple_u32ScriptZZ C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_b(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ *NONNULL_PTR owner){
	return CVec_C2Tuple_u32ScriptZZ_clone(&owner->b);
}
JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32ScriptZZZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* owner_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ*)(owner & ~1);
	LDKCVec_C2Tuple_u32ScriptZZ ret_var = C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_b(owner_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t v = 0; v < ret_var.datalen; v++) {
		LDKC2Tuple_u32ScriptZ* ret_conv_21_conv = MALLOC(sizeof(LDKC2Tuple_u32ScriptZ), "LDKC2Tuple_u32ScriptZ");
		*ret_conv_21_conv = ret_var.data[v];
		ret_arr_ptr[v] = ((uintptr_t)ret_conv_21_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

static inline LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ CVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_clone(const LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ *orig) {
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ ret = { .data = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ) * orig->datalen, "LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_EventZ CVec_EventZ_clone(const LDKCVec_EventZ *orig) {
	LDKCVec_EventZ ret = { .data = MALLOC(sizeof(LDKEvent) * orig->datalen, "LDKCVec_EventZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = Event_clone(&orig->data[i]);
	}
	return ret;
}
static inline uint32_t C2Tuple_u32TxOutZ_get_a(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner){
	return owner->a;
}
JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32TxOutZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_u32TxOutZ* owner_conv = (LDKC2Tuple_u32TxOutZ*)(owner & ~1);
	int32_t ret_val = C2Tuple_u32TxOutZ_get_a(owner_conv);
	return ret_val;
}

static inline struct LDKTxOut C2Tuple_u32TxOutZ_get_b(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner){
	return TxOut_clone(&owner->b);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32TxOutZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_u32TxOutZ* owner_conv = (LDKC2Tuple_u32TxOutZ*)(owner & ~1);
	LDKTxOut* ret_ref = MALLOC(sizeof(LDKTxOut), "LDKTxOut");
	*ret_ref = C2Tuple_u32TxOutZ_get_b(owner_conv);
	return (uintptr_t)ret_ref;
}

static inline LDKCVec_C2Tuple_u32TxOutZZ CVec_C2Tuple_u32TxOutZZ_clone(const LDKCVec_C2Tuple_u32TxOutZZ *orig) {
	LDKCVec_C2Tuple_u32TxOutZZ ret = { .data = MALLOC(sizeof(LDKC2Tuple_u32TxOutZ) * orig->datalen, "LDKCVec_C2Tuple_u32TxOutZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C2Tuple_u32TxOutZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKThirtyTwoBytes C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_a(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner){
	return ThirtyTwoBytes_clone(&owner->a);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32TxOutZZZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* owner_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_a(owner_conv).data);
	return ret_arr;
}

static inline struct LDKCVec_C2Tuple_u32TxOutZZ C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_b(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner){
	return CVec_C2Tuple_u32TxOutZZ_clone(&owner->b);
}
JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32TxOutZZZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* owner_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ*)(owner & ~1);
	LDKCVec_C2Tuple_u32TxOutZZ ret_var = C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_b(owner_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t u = 0; u < ret_var.datalen; u++) {
		LDKC2Tuple_u32TxOutZ* ret_conv_20_conv = MALLOC(sizeof(LDKC2Tuple_u32TxOutZ), "LDKC2Tuple_u32TxOutZ");
		*ret_conv_20_conv = ret_var.data[u];
		ret_arr_ptr[u] = ((uintptr_t)ret_conv_20_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

static inline LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ CVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ_clone(const LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ *orig) {
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ ret = { .data = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ) * orig->datalen, "LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone(&orig->data[i]);
	}
	return ret;
}
static jclass LDKBalance_ClaimableOnChannelClose_class = NULL;
static jmethodID LDKBalance_ClaimableOnChannelClose_meth = NULL;
static jclass LDKBalance_ClaimableAwaitingConfirmations_class = NULL;
static jmethodID LDKBalance_ClaimableAwaitingConfirmations_meth = NULL;
static jclass LDKBalance_ContentiousClaimable_class = NULL;
static jmethodID LDKBalance_ContentiousClaimable_meth = NULL;
static jclass LDKBalance_MaybeClaimableHTLCAwaitingTimeout_class = NULL;
static jmethodID LDKBalance_MaybeClaimableHTLCAwaitingTimeout_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKBalance_init (JNIEnv *env, jclass clz) {
	LDKBalance_ClaimableOnChannelClose_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKBalance$ClaimableOnChannelClose"));
	CHECK(LDKBalance_ClaimableOnChannelClose_class != NULL);
	LDKBalance_ClaimableOnChannelClose_meth = (*env)->GetMethodID(env, LDKBalance_ClaimableOnChannelClose_class, "<init>", "(J)V");
	CHECK(LDKBalance_ClaimableOnChannelClose_meth != NULL);
	LDKBalance_ClaimableAwaitingConfirmations_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKBalance$ClaimableAwaitingConfirmations"));
	CHECK(LDKBalance_ClaimableAwaitingConfirmations_class != NULL);
	LDKBalance_ClaimableAwaitingConfirmations_meth = (*env)->GetMethodID(env, LDKBalance_ClaimableAwaitingConfirmations_class, "<init>", "(JI)V");
	CHECK(LDKBalance_ClaimableAwaitingConfirmations_meth != NULL);
	LDKBalance_ContentiousClaimable_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKBalance$ContentiousClaimable"));
	CHECK(LDKBalance_ContentiousClaimable_class != NULL);
	LDKBalance_ContentiousClaimable_meth = (*env)->GetMethodID(env, LDKBalance_ContentiousClaimable_class, "<init>", "(JI)V");
	CHECK(LDKBalance_ContentiousClaimable_meth != NULL);
	LDKBalance_MaybeClaimableHTLCAwaitingTimeout_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKBalance$MaybeClaimableHTLCAwaitingTimeout"));
	CHECK(LDKBalance_MaybeClaimableHTLCAwaitingTimeout_class != NULL);
	LDKBalance_MaybeClaimableHTLCAwaitingTimeout_meth = (*env)->GetMethodID(env, LDKBalance_MaybeClaimableHTLCAwaitingTimeout_class, "<init>", "(JI)V");
	CHECK(LDKBalance_MaybeClaimableHTLCAwaitingTimeout_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKBalance_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKBalance *obj = (LDKBalance*)(ptr & ~1);
	switch(obj->tag) {
		case LDKBalance_ClaimableOnChannelClose: {
			return (*env)->NewObject(env, LDKBalance_ClaimableOnChannelClose_class, LDKBalance_ClaimableOnChannelClose_meth, obj->claimable_on_channel_close.claimable_amount_satoshis);
		}
		case LDKBalance_ClaimableAwaitingConfirmations: {
			return (*env)->NewObject(env, LDKBalance_ClaimableAwaitingConfirmations_class, LDKBalance_ClaimableAwaitingConfirmations_meth, obj->claimable_awaiting_confirmations.claimable_amount_satoshis, obj->claimable_awaiting_confirmations.confirmation_height);
		}
		case LDKBalance_ContentiousClaimable: {
			return (*env)->NewObject(env, LDKBalance_ContentiousClaimable_class, LDKBalance_ContentiousClaimable_meth, obj->contentious_claimable.claimable_amount_satoshis, obj->contentious_claimable.timeout_height);
		}
		case LDKBalance_MaybeClaimableHTLCAwaitingTimeout: {
			return (*env)->NewObject(env, LDKBalance_MaybeClaimableHTLCAwaitingTimeout_class, LDKBalance_MaybeClaimableHTLCAwaitingTimeout_meth, obj->maybe_claimable_htlc_awaiting_timeout.claimable_amount_satoshis, obj->maybe_claimable_htlc_awaiting_timeout.claimable_height);
		}
		default: abort();
	}
}
static inline LDKCVec_BalanceZ CVec_BalanceZ_clone(const LDKCVec_BalanceZ *orig) {
	LDKCVec_BalanceZ ret = { .data = MALLOC(sizeof(LDKBalance) * orig->datalen, "LDKCVec_BalanceZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = Balance_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKC2Tuple_BlockHashChannelMonitorZ CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return C2Tuple_BlockHashChannelMonitorZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* owner_conv = (LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ*)(owner & ~1);
	LDKC2Tuple_BlockHashChannelMonitorZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_BlockHashChannelMonitorZ), "LDKC2Tuple_BlockHashChannelMonitorZ");
	*ret_conv = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_ok(owner_conv);
	return ((uintptr_t)ret_conv);
}

static inline struct LDKDecodeError CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_err(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* owner_conv = (LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline void CResult_NoneLightningErrorZ_get_ok(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneLightningErrorZ* owner_conv = (LDKCResult_NoneLightningErrorZ*)(owner & ~1);
	CResult_NoneLightningErrorZ_get_ok(owner_conv);
}

static inline struct LDKLightningError CResult_NoneLightningErrorZ_get_err(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return LightningError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NoneLightningErrorZ* owner_conv = (LDKCResult_NoneLightningErrorZ*)(owner & ~1);
	LDKLightningError ret_var = CResult_NoneLightningErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKPublicKey C2Tuple_PublicKeyTypeZ_get_a(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner){
	return owner->a;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PublicKeyTypeZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_PublicKeyTypeZ* owner_conv = (LDKC2Tuple_PublicKeyTypeZ*)(owner & ~1);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, C2Tuple_PublicKeyTypeZ_get_a(owner_conv).compressed_form);
	return ret_arr;
}

static inline struct LDKType C2Tuple_PublicKeyTypeZ_get_b(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner){
	return Type_clone(&owner->b);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PublicKeyTypeZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC2Tuple_PublicKeyTypeZ* owner_conv = (LDKC2Tuple_PublicKeyTypeZ*)(owner & ~1);
	LDKType* ret_ret = MALLOC(sizeof(LDKType), "LDKType");
	*ret_ret = C2Tuple_PublicKeyTypeZ_get_b(owner_conv);
	return (uintptr_t)ret_ret;
}

static inline LDKCVec_C2Tuple_PublicKeyTypeZZ CVec_C2Tuple_PublicKeyTypeZZ_clone(const LDKCVec_C2Tuple_PublicKeyTypeZZ *orig) {
	LDKCVec_C2Tuple_PublicKeyTypeZZ ret = { .data = MALLOC(sizeof(LDKC2Tuple_PublicKeyTypeZ) * orig->datalen, "LDKCVec_C2Tuple_PublicKeyTypeZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C2Tuple_PublicKeyTypeZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline bool CResult_boolLightningErrorZ_get_ok(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_boolLightningErrorZ* owner_conv = (LDKCResult_boolLightningErrorZ*)(owner & ~1);
	jboolean ret_val = CResult_boolLightningErrorZ_get_ok(owner_conv);
	return ret_val;
}

static inline struct LDKLightningError CResult_boolLightningErrorZ_get_err(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return LightningError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_boolLightningErrorZ* owner_conv = (LDKCResult_boolLightningErrorZ*)(owner & ~1);
	LDKLightningError ret_var = CResult_boolLightningErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelAnnouncement C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner){
	return ChannelAnnouncement_clone(&owner->a);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZ_1get_1a(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* owner_conv = (LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(owner & ~1);
	LDKChannelAnnouncement ret_var = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner){
	return ChannelUpdate_clone(&owner->b);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZ_1get_1b(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* owner_conv = (LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(owner & ~1);
	LDKChannelUpdate ret_var = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner){
	return ChannelUpdate_clone(&owner->c);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZ_1get_1c(JNIEnv *env, jclass clz, int64_t owner) {
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* owner_conv = (LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(owner & ~1);
	LDKChannelUpdate ret_var = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ CVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone(const LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ *orig) {
	LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ ret = { .data = MALLOC(sizeof(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ) * orig->datalen, "LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_NodeAnnouncementZ CVec_NodeAnnouncementZ_clone(const LDKCVec_NodeAnnouncementZ *orig) {
	LDKCVec_NodeAnnouncementZ ret = { .data = MALLOC(sizeof(LDKNodeAnnouncement) * orig->datalen, "LDKCVec_NodeAnnouncementZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = NodeAnnouncement_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKCVec_u8Z CResult_CVec_u8ZPeerHandleErrorZ_get_ok(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CVec_u8Z_clone(&*owner->contents.result);
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_u8ZPeerHandleErrorZ* owner_conv = (LDKCResult_CVec_u8ZPeerHandleErrorZ*)(owner & ~1);
	LDKCVec_u8Z ret_var = CResult_CVec_u8ZPeerHandleErrorZ_get_ok(owner_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

static inline struct LDKPeerHandleError CResult_CVec_u8ZPeerHandleErrorZ_get_err(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return PeerHandleError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CVec_u8ZPeerHandleErrorZ* owner_conv = (LDKCResult_CVec_u8ZPeerHandleErrorZ*)(owner & ~1);
	LDKPeerHandleError ret_var = CResult_CVec_u8ZPeerHandleErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline void CResult_NonePeerHandleErrorZ_get_ok(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NonePeerHandleErrorZ* owner_conv = (LDKCResult_NonePeerHandleErrorZ*)(owner & ~1);
	CResult_NonePeerHandleErrorZ_get_ok(owner_conv);
}

static inline struct LDKPeerHandleError CResult_NonePeerHandleErrorZ_get_err(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return PeerHandleError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NonePeerHandleErrorZ* owner_conv = (LDKCResult_NonePeerHandleErrorZ*)(owner & ~1);
	LDKPeerHandleError ret_var = CResult_NonePeerHandleErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline bool CResult_boolPeerHandleErrorZ_get_ok(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return *owner->contents.result;
}
JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_boolPeerHandleErrorZ* owner_conv = (LDKCResult_boolPeerHandleErrorZ*)(owner & ~1);
	jboolean ret_val = CResult_boolPeerHandleErrorZ_get_ok(owner_conv);
	return ret_val;
}

static inline struct LDKPeerHandleError CResult_boolPeerHandleErrorZ_get_err(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return PeerHandleError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_boolPeerHandleErrorZ* owner_conv = (LDKCResult_boolPeerHandleErrorZ*)(owner & ~1);
	LDKPeerHandleError ret_var = CResult_boolPeerHandleErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKNodeId CResult_NodeIdDecodeErrorZ_get_ok(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return NodeId_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeIdDecodeErrorZ* owner_conv = (LDKCResult_NodeIdDecodeErrorZ*)(owner & ~1);
	LDKNodeId ret_var = CResult_NodeIdDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_NodeIdDecodeErrorZ_get_err(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeIdDecodeErrorZ* owner_conv = (LDKCResult_NodeIdDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_NodeIdDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKCOption_NetworkUpdateZ CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return COption_NetworkUpdateZ_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* owner_conv = (LDKCResult_COption_NetworkUpdateZDecodeErrorZ*)(owner & ~1);
	LDKCOption_NetworkUpdateZ *ret_copy = MALLOC(sizeof(LDKCOption_NetworkUpdateZ), "LDKCOption_NetworkUpdateZ");
	*ret_copy = CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_COption_NetworkUpdateZDecodeErrorZ_get_err(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* owner_conv = (LDKCResult_COption_NetworkUpdateZDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_COption_NetworkUpdateZDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

typedef struct LDKAccess_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID get_utxo_meth;
} LDKAccess_JCalls;
static void LDKAccess_JCalls_free(void* this_arg) {
	LDKAccess_JCalls *j_calls = (LDKAccess_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_TxOutAccessErrorZ get_utxo_LDKAccess_jcall(const void* this_arg, const uint8_t (* genesis_hash)[32], uint64_t short_channel_id) {
	LDKAccess_JCalls *j_calls = (LDKAccess_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray genesis_hash_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, genesis_hash_arr, 0, 32, *genesis_hash);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->get_utxo_meth, genesis_hash_arr, short_channel_id);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_utxo in LDKAccess from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_TxOutAccessErrorZ ret_conv = *(LDKCResult_TxOutAccessErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKAccess_JCalls_cloned(LDKAccess* new_obj) {
	LDKAccess_JCalls *j_calls = (LDKAccess_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKAccess LDKAccess_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKAccess_JCalls *calls = MALLOC(sizeof(LDKAccess_JCalls), "LDKAccess_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->get_utxo_meth = (*env)->GetMethodID(env, c, "get_utxo", "([BJ)J");
	CHECK(calls->get_utxo_meth != NULL);

	LDKAccess ret = {
		.this_arg = (void*) calls,
		.get_utxo = get_utxo_LDKAccess_jcall,
		.free = LDKAccess_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKAccess_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKAccess *res_ptr = MALLOC(sizeof(LDKAccess), "LDKAccess");
	*res_ptr = LDKAccess_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Access_1get_1utxo(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray genesis_hash, int64_t short_channel_id) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKAccess* this_arg_conv = (LDKAccess*)this_arg_ptr;
	unsigned char genesis_hash_arr[32];
	CHECK((*env)->GetArrayLength(env, genesis_hash) == 32);
	(*env)->GetByteArrayRegion(env, genesis_hash, 0, 32, genesis_hash_arr);
	unsigned char (*genesis_hash_ref)[32] = &genesis_hash_arr;
	LDKCResult_TxOutAccessErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxOutAccessErrorZ), "LDKCResult_TxOutAccessErrorZ");
	*ret_conv = (this_arg_conv->get_utxo)(this_arg_conv->this_arg, genesis_hash_ref, short_channel_id);
	return (uintptr_t)ret_conv;
}

static jclass LDKCOption_AccessZ_Some_class = NULL;
static jmethodID LDKCOption_AccessZ_Some_meth = NULL;
static jclass LDKCOption_AccessZ_None_class = NULL;
static jmethodID LDKCOption_AccessZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1AccessZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_AccessZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_AccessZ$Some"));
	CHECK(LDKCOption_AccessZ_Some_class != NULL);
	LDKCOption_AccessZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_AccessZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_AccessZ_Some_meth != NULL);
	LDKCOption_AccessZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_AccessZ$None"));
	CHECK(LDKCOption_AccessZ_None_class != NULL);
	LDKCOption_AccessZ_None_meth = (*env)->GetMethodID(env, LDKCOption_AccessZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_AccessZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1AccessZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_AccessZ *obj = (LDKCOption_AccessZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_AccessZ_Some: {
			LDKAccess* some_ret = MALLOC(sizeof(LDKAccess), "LDKAccess");
			*some_ret = obj->some;
			// WARNING: We likely need to clone here, but no clone is available, so we just do it for Java instances
			if ((*some_ret).free == LDKAccess_JCalls_free) {
				// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
				LDKAccess_JCalls_cloned(&(*some_ret));
			}
			return (*env)->NewObject(env, LDKCOption_AccessZ_Some_class, LDKCOption_AccessZ_Some_meth, (uintptr_t)some_ret);
		}
		case LDKCOption_AccessZ_None: {
			return (*env)->NewObject(env, LDKCOption_AccessZ_None_class, LDKCOption_AccessZ_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKChannelUpdateInfo CResult_ChannelUpdateInfoDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelUpdateInfo_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* owner_conv = (LDKCResult_ChannelUpdateInfoDecodeErrorZ*)(owner & ~1);
	LDKChannelUpdateInfo ret_var = CResult_ChannelUpdateInfoDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelUpdateInfoDecodeErrorZ_get_err(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* owner_conv = (LDKCResult_ChannelUpdateInfoDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelUpdateInfoDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelInfo CResult_ChannelInfoDecodeErrorZ_get_ok(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelInfo_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelInfoDecodeErrorZ* owner_conv = (LDKCResult_ChannelInfoDecodeErrorZ*)(owner & ~1);
	LDKChannelInfo ret_var = CResult_ChannelInfoDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelInfoDecodeErrorZ_get_err(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelInfoDecodeErrorZ* owner_conv = (LDKCResult_ChannelInfoDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelInfoDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKRoutingFees CResult_RoutingFeesDecodeErrorZ_get_ok(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return RoutingFees_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RoutingFeesDecodeErrorZ* owner_conv = (LDKCResult_RoutingFeesDecodeErrorZ*)(owner & ~1);
	LDKRoutingFees ret_var = CResult_RoutingFeesDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_RoutingFeesDecodeErrorZ_get_err(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RoutingFeesDecodeErrorZ* owner_conv = (LDKCResult_RoutingFeesDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_RoutingFeesDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKNodeAnnouncementInfo CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return NodeAnnouncementInfo_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* owner_conv = (LDKCResult_NodeAnnouncementInfoDecodeErrorZ*)(owner & ~1);
	LDKNodeAnnouncementInfo ret_var = CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_NodeAnnouncementInfoDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* owner_conv = (LDKCResult_NodeAnnouncementInfoDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_NodeAnnouncementInfoDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_u64Z CVec_u64Z_clone(const LDKCVec_u64Z *orig) {
	LDKCVec_u64Z ret = { .data = MALLOC(sizeof(int64_t) * orig->datalen, "LDKCVec_u64Z clone bytes"), .datalen = orig->datalen };
	memcpy(ret.data, orig->data, sizeof(int64_t) * ret.datalen);
	return ret;
}
static inline struct LDKNodeInfo CResult_NodeInfoDecodeErrorZ_get_ok(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return NodeInfo_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeInfoDecodeErrorZ* owner_conv = (LDKCResult_NodeInfoDecodeErrorZ*)(owner & ~1);
	LDKNodeInfo ret_var = CResult_NodeInfoDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_NodeInfoDecodeErrorZ_get_err(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeInfoDecodeErrorZ* owner_conv = (LDKCResult_NodeInfoDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_NodeInfoDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKNetworkGraph CResult_NetworkGraphDecodeErrorZ_get_ok(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return NetworkGraph_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NetworkGraphDecodeErrorZ* owner_conv = (LDKCResult_NetworkGraphDecodeErrorZ*)(owner & ~1);
	LDKNetworkGraph ret_var = CResult_NetworkGraphDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_NetworkGraphDecodeErrorZ_get_err(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NetworkGraphDecodeErrorZ* owner_conv = (LDKCResult_NetworkGraphDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_NetworkGraphDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static jclass LDKCOption_CVec_NetAddressZZ_Some_class = NULL;
static jmethodID LDKCOption_CVec_NetAddressZZ_Some_meth = NULL;
static jclass LDKCOption_CVec_NetAddressZZ_None_class = NULL;
static jmethodID LDKCOption_CVec_NetAddressZZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1CVec_1NetAddressZZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_CVec_NetAddressZZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_CVec_NetAddressZZ$Some"));
	CHECK(LDKCOption_CVec_NetAddressZZ_Some_class != NULL);
	LDKCOption_CVec_NetAddressZZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_CVec_NetAddressZZ_Some_class, "<init>", "([J)V");
	CHECK(LDKCOption_CVec_NetAddressZZ_Some_meth != NULL);
	LDKCOption_CVec_NetAddressZZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_CVec_NetAddressZZ$None"));
	CHECK(LDKCOption_CVec_NetAddressZZ_None_class != NULL);
	LDKCOption_CVec_NetAddressZZ_None_meth = (*env)->GetMethodID(env, LDKCOption_CVec_NetAddressZZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_CVec_NetAddressZZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1CVec_1NetAddressZZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_CVec_NetAddressZZ *obj = (LDKCOption_CVec_NetAddressZZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_CVec_NetAddressZZ_Some: {
			LDKCVec_NetAddressZ some_var = obj->some;
			int64_tArray some_arr = NULL;
			some_arr = (*env)->NewLongArray(env, some_var.datalen);
			int64_t *some_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, some_arr, NULL);
			for (size_t m = 0; m < some_var.datalen; m++) {
				uintptr_t some_conv_12_ref = ((uintptr_t)&some_var.data[m]) | 1;
				some_arr_ptr[m] = some_conv_12_ref;
			}
			(*env)->ReleasePrimitiveArrayCritical(env, some_arr, some_arr_ptr, 0);
			return (*env)->NewObject(env, LDKCOption_CVec_NetAddressZZ_Some_class, LDKCOption_CVec_NetAddressZZ_Some_meth, some_arr);
		}
		case LDKCOption_CVec_NetAddressZZ_None: {
			return (*env)->NewObject(env, LDKCOption_CVec_NetAddressZZ_None_class, LDKCOption_CVec_NetAddressZZ_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKNetAddress CResult_NetAddressDecodeErrorZ_get_ok(LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return NetAddress_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NetAddressDecodeErrorZ* owner_conv = (LDKCResult_NetAddressDecodeErrorZ*)(owner & ~1);
	LDKNetAddress *ret_copy = MALLOC(sizeof(LDKNetAddress), "LDKNetAddress");
	*ret_copy = CResult_NetAddressDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static inline struct LDKDecodeError CResult_NetAddressDecodeErrorZ_get_err(LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NetAddressDecodeErrorZ* owner_conv = (LDKCResult_NetAddressDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_NetAddressDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_UpdateAddHTLCZ CVec_UpdateAddHTLCZ_clone(const LDKCVec_UpdateAddHTLCZ *orig) {
	LDKCVec_UpdateAddHTLCZ ret = { .data = MALLOC(sizeof(LDKUpdateAddHTLC) * orig->datalen, "LDKCVec_UpdateAddHTLCZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = UpdateAddHTLC_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_UpdateFulfillHTLCZ CVec_UpdateFulfillHTLCZ_clone(const LDKCVec_UpdateFulfillHTLCZ *orig) {
	LDKCVec_UpdateFulfillHTLCZ ret = { .data = MALLOC(sizeof(LDKUpdateFulfillHTLC) * orig->datalen, "LDKCVec_UpdateFulfillHTLCZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = UpdateFulfillHTLC_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_UpdateFailHTLCZ CVec_UpdateFailHTLCZ_clone(const LDKCVec_UpdateFailHTLCZ *orig) {
	LDKCVec_UpdateFailHTLCZ ret = { .data = MALLOC(sizeof(LDKUpdateFailHTLC) * orig->datalen, "LDKCVec_UpdateFailHTLCZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = UpdateFailHTLC_clone(&orig->data[i]);
	}
	return ret;
}
static inline LDKCVec_UpdateFailMalformedHTLCZ CVec_UpdateFailMalformedHTLCZ_clone(const LDKCVec_UpdateFailMalformedHTLCZ *orig) {
	LDKCVec_UpdateFailMalformedHTLCZ ret = { .data = MALLOC(sizeof(LDKUpdateFailMalformedHTLC) * orig->datalen, "LDKCVec_UpdateFailMalformedHTLCZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = UpdateFailMalformedHTLC_clone(&orig->data[i]);
	}
	return ret;
}
static inline struct LDKAcceptChannel CResult_AcceptChannelDecodeErrorZ_get_ok(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return AcceptChannel_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_AcceptChannelDecodeErrorZ* owner_conv = (LDKCResult_AcceptChannelDecodeErrorZ*)(owner & ~1);
	LDKAcceptChannel ret_var = CResult_AcceptChannelDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_AcceptChannelDecodeErrorZ_get_err(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_AcceptChannelDecodeErrorZ* owner_conv = (LDKCResult_AcceptChannelDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_AcceptChannelDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKAnnouncementSignatures CResult_AnnouncementSignaturesDecodeErrorZ_get_ok(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return AnnouncementSignatures_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* owner_conv = (LDKCResult_AnnouncementSignaturesDecodeErrorZ*)(owner & ~1);
	LDKAnnouncementSignatures ret_var = CResult_AnnouncementSignaturesDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_AnnouncementSignaturesDecodeErrorZ_get_err(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* owner_conv = (LDKCResult_AnnouncementSignaturesDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_AnnouncementSignaturesDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelReestablish CResult_ChannelReestablishDecodeErrorZ_get_ok(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelReestablish_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelReestablishDecodeErrorZ* owner_conv = (LDKCResult_ChannelReestablishDecodeErrorZ*)(owner & ~1);
	LDKChannelReestablish ret_var = CResult_ChannelReestablishDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelReestablishDecodeErrorZ_get_err(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelReestablishDecodeErrorZ* owner_conv = (LDKCResult_ChannelReestablishDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelReestablishDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKClosingSigned CResult_ClosingSignedDecodeErrorZ_get_ok(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ClosingSigned_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ClosingSignedDecodeErrorZ* owner_conv = (LDKCResult_ClosingSignedDecodeErrorZ*)(owner & ~1);
	LDKClosingSigned ret_var = CResult_ClosingSignedDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ClosingSignedDecodeErrorZ_get_err(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ClosingSignedDecodeErrorZ* owner_conv = (LDKCResult_ClosingSignedDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ClosingSignedDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKClosingSignedFeeRange CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ClosingSignedFeeRange_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* owner_conv = (LDKCResult_ClosingSignedFeeRangeDecodeErrorZ*)(owner & ~1);
	LDKClosingSignedFeeRange ret_var = CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* owner_conv = (LDKCResult_ClosingSignedFeeRangeDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKCommitmentSigned CResult_CommitmentSignedDecodeErrorZ_get_ok(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return CommitmentSigned_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CommitmentSignedDecodeErrorZ* owner_conv = (LDKCResult_CommitmentSignedDecodeErrorZ*)(owner & ~1);
	LDKCommitmentSigned ret_var = CResult_CommitmentSignedDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_CommitmentSignedDecodeErrorZ_get_err(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_CommitmentSignedDecodeErrorZ* owner_conv = (LDKCResult_CommitmentSignedDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_CommitmentSignedDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKFundingCreated CResult_FundingCreatedDecodeErrorZ_get_ok(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return FundingCreated_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FundingCreatedDecodeErrorZ* owner_conv = (LDKCResult_FundingCreatedDecodeErrorZ*)(owner & ~1);
	LDKFundingCreated ret_var = CResult_FundingCreatedDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_FundingCreatedDecodeErrorZ_get_err(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FundingCreatedDecodeErrorZ* owner_conv = (LDKCResult_FundingCreatedDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_FundingCreatedDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKFundingSigned CResult_FundingSignedDecodeErrorZ_get_ok(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return FundingSigned_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FundingSignedDecodeErrorZ* owner_conv = (LDKCResult_FundingSignedDecodeErrorZ*)(owner & ~1);
	LDKFundingSigned ret_var = CResult_FundingSignedDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_FundingSignedDecodeErrorZ_get_err(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FundingSignedDecodeErrorZ* owner_conv = (LDKCResult_FundingSignedDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_FundingSignedDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKFundingLocked CResult_FundingLockedDecodeErrorZ_get_ok(LDKCResult_FundingLockedDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return FundingLocked_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FundingLockedDecodeErrorZ* owner_conv = (LDKCResult_FundingLockedDecodeErrorZ*)(owner & ~1);
	LDKFundingLocked ret_var = CResult_FundingLockedDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_FundingLockedDecodeErrorZ_get_err(LDKCResult_FundingLockedDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_FundingLockedDecodeErrorZ* owner_conv = (LDKCResult_FundingLockedDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_FundingLockedDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKInit CResult_InitDecodeErrorZ_get_ok(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Init_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InitDecodeErrorZ* owner_conv = (LDKCResult_InitDecodeErrorZ*)(owner & ~1);
	LDKInit ret_var = CResult_InitDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_InitDecodeErrorZ_get_err(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InitDecodeErrorZ* owner_conv = (LDKCResult_InitDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_InitDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKOpenChannel CResult_OpenChannelDecodeErrorZ_get_ok(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return OpenChannel_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_OpenChannelDecodeErrorZ* owner_conv = (LDKCResult_OpenChannelDecodeErrorZ*)(owner & ~1);
	LDKOpenChannel ret_var = CResult_OpenChannelDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_OpenChannelDecodeErrorZ_get_err(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_OpenChannelDecodeErrorZ* owner_conv = (LDKCResult_OpenChannelDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_OpenChannelDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKRevokeAndACK CResult_RevokeAndACKDecodeErrorZ_get_ok(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return RevokeAndACK_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RevokeAndACKDecodeErrorZ* owner_conv = (LDKCResult_RevokeAndACKDecodeErrorZ*)(owner & ~1);
	LDKRevokeAndACK ret_var = CResult_RevokeAndACKDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_RevokeAndACKDecodeErrorZ_get_err(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_RevokeAndACKDecodeErrorZ* owner_conv = (LDKCResult_RevokeAndACKDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_RevokeAndACKDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKShutdown CResult_ShutdownDecodeErrorZ_get_ok(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Shutdown_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ShutdownDecodeErrorZ* owner_conv = (LDKCResult_ShutdownDecodeErrorZ*)(owner & ~1);
	LDKShutdown ret_var = CResult_ShutdownDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ShutdownDecodeErrorZ_get_err(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ShutdownDecodeErrorZ* owner_conv = (LDKCResult_ShutdownDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ShutdownDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUpdateFailHTLC CResult_UpdateFailHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UpdateFailHTLC_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFailHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateFailHTLCDecodeErrorZ*)(owner & ~1);
	LDKUpdateFailHTLC ret_var = CResult_UpdateFailHTLCDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UpdateFailHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFailHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateFailHTLCDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UpdateFailHTLCDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUpdateFailMalformedHTLC CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UpdateFailMalformedHTLC_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ*)(owner & ~1);
	LDKUpdateFailMalformedHTLC ret_var = CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUpdateFee CResult_UpdateFeeDecodeErrorZ_get_ok(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UpdateFee_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFeeDecodeErrorZ* owner_conv = (LDKCResult_UpdateFeeDecodeErrorZ*)(owner & ~1);
	LDKUpdateFee ret_var = CResult_UpdateFeeDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UpdateFeeDecodeErrorZ_get_err(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFeeDecodeErrorZ* owner_conv = (LDKCResult_UpdateFeeDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UpdateFeeDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUpdateFulfillHTLC CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UpdateFulfillHTLC_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateFulfillHTLCDecodeErrorZ*)(owner & ~1);
	LDKUpdateFulfillHTLC ret_var = CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UpdateFulfillHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateFulfillHTLCDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UpdateFulfillHTLCDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUpdateAddHTLC CResult_UpdateAddHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UpdateAddHTLC_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateAddHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateAddHTLCDecodeErrorZ*)(owner & ~1);
	LDKUpdateAddHTLC ret_var = CResult_UpdateAddHTLCDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UpdateAddHTLCDecodeErrorZ_get_err(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UpdateAddHTLCDecodeErrorZ* owner_conv = (LDKCResult_UpdateAddHTLCDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UpdateAddHTLCDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKPing CResult_PingDecodeErrorZ_get_ok(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Ping_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PingDecodeErrorZ* owner_conv = (LDKCResult_PingDecodeErrorZ*)(owner & ~1);
	LDKPing ret_var = CResult_PingDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_PingDecodeErrorZ_get_err(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PingDecodeErrorZ* owner_conv = (LDKCResult_PingDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_PingDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKPong CResult_PongDecodeErrorZ_get_ok(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Pong_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PongDecodeErrorZ* owner_conv = (LDKCResult_PongDecodeErrorZ*)(owner & ~1);
	LDKPong ret_var = CResult_PongDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_PongDecodeErrorZ_get_err(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_PongDecodeErrorZ* owner_conv = (LDKCResult_PongDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_PongDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUnsignedChannelAnnouncement CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UnsignedChannelAnnouncement_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKUnsignedChannelAnnouncement ret_var = CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelAnnouncement CResult_ChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelAnnouncement_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_ChannelAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKChannelAnnouncement ret_var = CResult_ChannelAnnouncementDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_ChannelAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelAnnouncementDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUnsignedChannelUpdate CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UnsignedChannelUpdate_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* owner_conv = (LDKCResult_UnsignedChannelUpdateDecodeErrorZ*)(owner & ~1);
	LDKUnsignedChannelUpdate ret_var = CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UnsignedChannelUpdateDecodeErrorZ_get_err(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* owner_conv = (LDKCResult_UnsignedChannelUpdateDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UnsignedChannelUpdateDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKChannelUpdate CResult_ChannelUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ChannelUpdate_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelUpdateDecodeErrorZ* owner_conv = (LDKCResult_ChannelUpdateDecodeErrorZ*)(owner & ~1);
	LDKChannelUpdate ret_var = CResult_ChannelUpdateDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ChannelUpdateDecodeErrorZ_get_err(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ChannelUpdateDecodeErrorZ* owner_conv = (LDKCResult_ChannelUpdateDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ChannelUpdateDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKErrorMessage CResult_ErrorMessageDecodeErrorZ_get_ok(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ErrorMessage_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ErrorMessageDecodeErrorZ* owner_conv = (LDKCResult_ErrorMessageDecodeErrorZ*)(owner & ~1);
	LDKErrorMessage ret_var = CResult_ErrorMessageDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ErrorMessageDecodeErrorZ_get_err(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ErrorMessageDecodeErrorZ* owner_conv = (LDKCResult_ErrorMessageDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ErrorMessageDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKWarningMessage CResult_WarningMessageDecodeErrorZ_get_ok(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return WarningMessage_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_WarningMessageDecodeErrorZ* owner_conv = (LDKCResult_WarningMessageDecodeErrorZ*)(owner & ~1);
	LDKWarningMessage ret_var = CResult_WarningMessageDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_WarningMessageDecodeErrorZ_get_err(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_WarningMessageDecodeErrorZ* owner_conv = (LDKCResult_WarningMessageDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_WarningMessageDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKUnsignedNodeAnnouncement CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return UnsignedNodeAnnouncement_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKUnsignedNodeAnnouncement ret_var = CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKNodeAnnouncement CResult_NodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return NodeAnnouncement_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_NodeAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKNodeAnnouncement ret_var = CResult_NodeAnnouncementDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_NodeAnnouncementDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_NodeAnnouncementDecodeErrorZ* owner_conv = (LDKCResult_NodeAnnouncementDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_NodeAnnouncementDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKQueryShortChannelIds CResult_QueryShortChannelIdsDecodeErrorZ_get_ok(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return QueryShortChannelIds_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* owner_conv = (LDKCResult_QueryShortChannelIdsDecodeErrorZ*)(owner & ~1);
	LDKQueryShortChannelIds ret_var = CResult_QueryShortChannelIdsDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_QueryShortChannelIdsDecodeErrorZ_get_err(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* owner_conv = (LDKCResult_QueryShortChannelIdsDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_QueryShortChannelIdsDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKReplyShortChannelIdsEnd CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ReplyShortChannelIdsEnd_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* owner_conv = (LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ*)(owner & ~1);
	LDKReplyShortChannelIdsEnd ret_var = CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* owner_conv = (LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKQueryChannelRange CResult_QueryChannelRangeDecodeErrorZ_get_ok(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return QueryChannelRange_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_QueryChannelRangeDecodeErrorZ* owner_conv = (LDKCResult_QueryChannelRangeDecodeErrorZ*)(owner & ~1);
	LDKQueryChannelRange ret_var = CResult_QueryChannelRangeDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_QueryChannelRangeDecodeErrorZ_get_err(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_QueryChannelRangeDecodeErrorZ* owner_conv = (LDKCResult_QueryChannelRangeDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_QueryChannelRangeDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKReplyChannelRange CResult_ReplyChannelRangeDecodeErrorZ_get_ok(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return ReplyChannelRange_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ReplyChannelRangeDecodeErrorZ* owner_conv = (LDKCResult_ReplyChannelRangeDecodeErrorZ*)(owner & ~1);
	LDKReplyChannelRange ret_var = CResult_ReplyChannelRangeDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_ReplyChannelRangeDecodeErrorZ_get_err(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_ReplyChannelRangeDecodeErrorZ* owner_conv = (LDKCResult_ReplyChannelRangeDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_ReplyChannelRangeDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKGossipTimestampFilter CResult_GossipTimestampFilterDecodeErrorZ_get_ok(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return GossipTimestampFilter_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_GossipTimestampFilterDecodeErrorZ* owner_conv = (LDKCResult_GossipTimestampFilterDecodeErrorZ*)(owner & ~1);
	LDKGossipTimestampFilter ret_var = CResult_GossipTimestampFilterDecodeErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKDecodeError CResult_GossipTimestampFilterDecodeErrorZ_get_err(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return DecodeError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_GossipTimestampFilterDecodeErrorZ* owner_conv = (LDKCResult_GossipTimestampFilterDecodeErrorZ*)(owner & ~1);
	LDKDecodeError ret_var = CResult_GossipTimestampFilterDecodeErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline LDKCVec_PhantomRouteHintsZ CVec_PhantomRouteHintsZ_clone(const LDKCVec_PhantomRouteHintsZ *orig) {
	LDKCVec_PhantomRouteHintsZ ret = { .data = MALLOC(sizeof(LDKPhantomRouteHints) * orig->datalen, "LDKCVec_PhantomRouteHintsZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = PhantomRouteHints_clone(&orig->data[i]);
	}
	return ret;
}
static jclass LDKSignOrCreationError_SignError_class = NULL;
static jmethodID LDKSignOrCreationError_SignError_meth = NULL;
static jclass LDKSignOrCreationError_CreationError_class = NULL;
static jmethodID LDKSignOrCreationError_CreationError_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKSignOrCreationError_init (JNIEnv *env, jclass clz) {
	LDKSignOrCreationError_SignError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKSignOrCreationError$SignError"));
	CHECK(LDKSignOrCreationError_SignError_class != NULL);
	LDKSignOrCreationError_SignError_meth = (*env)->GetMethodID(env, LDKSignOrCreationError_SignError_class, "<init>", "()V");
	CHECK(LDKSignOrCreationError_SignError_meth != NULL);
	LDKSignOrCreationError_CreationError_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKSignOrCreationError$CreationError"));
	CHECK(LDKSignOrCreationError_CreationError_class != NULL);
	LDKSignOrCreationError_CreationError_meth = (*env)->GetMethodID(env, LDKSignOrCreationError_CreationError_class, "<init>", "(Lorg/ldk/enums/CreationError;)V");
	CHECK(LDKSignOrCreationError_CreationError_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKSignOrCreationError_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKSignOrCreationError *obj = (LDKSignOrCreationError*)(ptr & ~1);
	switch(obj->tag) {
		case LDKSignOrCreationError_SignError: {
			return (*env)->NewObject(env, LDKSignOrCreationError_SignError_class, LDKSignOrCreationError_SignError_meth);
		}
		case LDKSignOrCreationError_CreationError: {
			jclass creation_error_conv = LDKCreationError_to_java(env, obj->creation_error);
			return (*env)->NewObject(env, LDKSignOrCreationError_CreationError_class, LDKSignOrCreationError_CreationError_meth, creation_error_conv);
		}
		default: abort();
	}
}
static inline struct LDKInvoice CResult_InvoiceSignOrCreationErrorZ_get_ok(LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return Invoice_clone(&*owner->contents.result);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceSignOrCreationErrorZ* owner_conv = (LDKCResult_InvoiceSignOrCreationErrorZ*)(owner & ~1);
	LDKInvoice ret_var = CResult_InvoiceSignOrCreationErrorZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline struct LDKSignOrCreationError CResult_InvoiceSignOrCreationErrorZ_get_err(LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return SignOrCreationError_clone(&*owner->contents.err);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_InvoiceSignOrCreationErrorZ* owner_conv = (LDKCResult_InvoiceSignOrCreationErrorZ*)(owner & ~1);
	LDKSignOrCreationError *ret_copy = MALLOC(sizeof(LDKSignOrCreationError), "LDKSignOrCreationError");
	*ret_copy = CResult_InvoiceSignOrCreationErrorZ_get_err(owner_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

typedef struct LDKFilter_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID register_tx_meth;
	jmethodID register_output_meth;
} LDKFilter_JCalls;
static void LDKFilter_JCalls_free(void* this_arg) {
	LDKFilter_JCalls *j_calls = (LDKFilter_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void register_tx_LDKFilter_jcall(const void* this_arg, const uint8_t (* txid)[32], LDKu8slice script_pubkey) {
	LDKFilter_JCalls *j_calls = (LDKFilter_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray txid_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, txid_arr, 0, 32, *txid);
	LDKu8slice script_pubkey_var = script_pubkey;
	int8_tArray script_pubkey_arr = (*env)->NewByteArray(env, script_pubkey_var.datalen);
	(*env)->SetByteArrayRegion(env, script_pubkey_arr, 0, script_pubkey_var.datalen, script_pubkey_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->register_tx_meth, txid_arr, script_pubkey_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to register_tx in LDKFilter from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
LDKCOption_C2Tuple_usizeTransactionZZ register_output_LDKFilter_jcall(const void* this_arg, LDKWatchedOutput output) {
	LDKFilter_JCalls *j_calls = (LDKFilter_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKWatchedOutput output_var = output;
	uintptr_t output_ref = 0;
	CHECK((((uintptr_t)output_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&output_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(output_var);
	output_ref = (uintptr_t)output_var.inner;
	if (output_var.is_owned) {
		output_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->register_output_meth, output_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to register_output in LDKFilter from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCOption_C2Tuple_usizeTransactionZZ ret_conv = *(LDKCOption_C2Tuple_usizeTransactionZZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKFilter_JCalls_cloned(LDKFilter* new_obj) {
	LDKFilter_JCalls *j_calls = (LDKFilter_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKFilter LDKFilter_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKFilter_JCalls *calls = MALLOC(sizeof(LDKFilter_JCalls), "LDKFilter_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->register_tx_meth = (*env)->GetMethodID(env, c, "register_tx", "([B[B)V");
	CHECK(calls->register_tx_meth != NULL);
	calls->register_output_meth = (*env)->GetMethodID(env, c, "register_output", "(J)J");
	CHECK(calls->register_output_meth != NULL);

	LDKFilter ret = {
		.this_arg = (void*) calls,
		.register_tx = register_tx_LDKFilter_jcall,
		.register_output = register_output_LDKFilter_jcall,
		.free = LDKFilter_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKFilter_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKFilter *res_ptr = MALLOC(sizeof(LDKFilter), "LDKFilter");
	*res_ptr = LDKFilter_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Filter_1register_1tx(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray txid, int8_tArray script_pubkey) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKFilter* this_arg_conv = (LDKFilter*)this_arg_ptr;
	unsigned char txid_arr[32];
	CHECK((*env)->GetArrayLength(env, txid) == 32);
	(*env)->GetByteArrayRegion(env, txid, 0, 32, txid_arr);
	unsigned char (*txid_ref)[32] = &txid_arr;
	LDKu8slice script_pubkey_ref;
	script_pubkey_ref.datalen = (*env)->GetArrayLength(env, script_pubkey);
	script_pubkey_ref.data = (*env)->GetByteArrayElements (env, script_pubkey, NULL);
	(this_arg_conv->register_tx)(this_arg_conv->this_arg, txid_ref, script_pubkey_ref);
	(*env)->ReleaseByteArrayElements(env, script_pubkey, (int8_t*)script_pubkey_ref.data, 0);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Filter_1register_1output(JNIEnv *env, jclass clz, int64_t this_arg, int64_t output) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKFilter* this_arg_conv = (LDKFilter*)this_arg_ptr;
	LDKWatchedOutput output_conv;
	output_conv.inner = (void*)(output & (~1));
	output_conv.is_owned = (output & 1) || (output == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(output_conv);
	output_conv = WatchedOutput_clone(&output_conv);
	LDKCOption_C2Tuple_usizeTransactionZZ *ret_copy = MALLOC(sizeof(LDKCOption_C2Tuple_usizeTransactionZZ), "LDKCOption_C2Tuple_usizeTransactionZZ");
	*ret_copy = (this_arg_conv->register_output)(this_arg_conv->this_arg, output_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

static jclass LDKCOption_FilterZ_Some_class = NULL;
static jmethodID LDKCOption_FilterZ_Some_meth = NULL;
static jclass LDKCOption_FilterZ_None_class = NULL;
static jmethodID LDKCOption_FilterZ_None_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKCOption_1FilterZ_init (JNIEnv *env, jclass clz) {
	LDKCOption_FilterZ_Some_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_FilterZ$Some"));
	CHECK(LDKCOption_FilterZ_Some_class != NULL);
	LDKCOption_FilterZ_Some_meth = (*env)->GetMethodID(env, LDKCOption_FilterZ_Some_class, "<init>", "(J)V");
	CHECK(LDKCOption_FilterZ_Some_meth != NULL);
	LDKCOption_FilterZ_None_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKCOption_FilterZ$None"));
	CHECK(LDKCOption_FilterZ_None_class != NULL);
	LDKCOption_FilterZ_None_meth = (*env)->GetMethodID(env, LDKCOption_FilterZ_None_class, "<init>", "()V");
	CHECK(LDKCOption_FilterZ_None_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKCOption_1FilterZ_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKCOption_FilterZ *obj = (LDKCOption_FilterZ*)(ptr & ~1);
	switch(obj->tag) {
		case LDKCOption_FilterZ_Some: {
			LDKFilter* some_ret = MALLOC(sizeof(LDKFilter), "LDKFilter");
			*some_ret = obj->some;
			// WARNING: We likely need to clone here, but no clone is available, so we just do it for Java instances
			if ((*some_ret).free == LDKFilter_JCalls_free) {
				// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
				LDKFilter_JCalls_cloned(&(*some_ret));
			}
			return (*env)->NewObject(env, LDKCOption_FilterZ_Some_class, LDKCOption_FilterZ_Some_meth, (uintptr_t)some_ret);
		}
		case LDKCOption_FilterZ_None: {
			return (*env)->NewObject(env, LDKCOption_FilterZ_None_class, LDKCOption_FilterZ_None_meth);
		}
		default: abort();
	}
}
static inline struct LDKLockedChannelMonitor *CResult_LockedChannelMonitorNoneZ_get_ok(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner){
CHECK(owner->result_ok);
	return &*owner->contents.result;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1LockedChannelMonitorNoneZ_1get_1ok(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_LockedChannelMonitorNoneZ* owner_conv = (LDKCResult_LockedChannelMonitorNoneZ*)(owner & ~1);
	LDKLockedChannelMonitor ret_var = *CResult_LockedChannelMonitorNoneZ_get_ok(owner_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner & ~1;
	return ret_ref;
}

static inline void CResult_LockedChannelMonitorNoneZ_get_err(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner){
CHECK(!owner->result_ok);
	return *owner->contents.err;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1LockedChannelMonitorNoneZ_1get_1err(JNIEnv *env, jclass clz, int64_t owner) {
	LDKCResult_LockedChannelMonitorNoneZ* owner_conv = (LDKCResult_LockedChannelMonitorNoneZ*)(owner & ~1);
	CResult_LockedChannelMonitorNoneZ_get_err(owner_conv);
}

static inline LDKCVec_OutPointZ CVec_OutPointZ_clone(const LDKCVec_OutPointZ *orig) {
	LDKCVec_OutPointZ ret = { .data = MALLOC(sizeof(LDKOutPoint) * orig->datalen, "LDKCVec_OutPointZ clone bytes"), .datalen = orig->datalen };
	for (size_t i = 0; i < ret.datalen; i++) {
		ret.data[i] = OutPoint_clone(&orig->data[i]);
	}
	return ret;
}
typedef struct LDKMessageSendEventsProvider_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID get_and_clear_pending_msg_events_meth;
} LDKMessageSendEventsProvider_JCalls;
static void LDKMessageSendEventsProvider_JCalls_free(void* this_arg) {
	LDKMessageSendEventsProvider_JCalls *j_calls = (LDKMessageSendEventsProvider_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCVec_MessageSendEventZ get_and_clear_pending_msg_events_LDKMessageSendEventsProvider_jcall(const void* this_arg) {
	LDKMessageSendEventsProvider_JCalls *j_calls = (LDKMessageSendEventsProvider_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_and_clear_pending_msg_events_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_and_clear_pending_msg_events in LDKMessageSendEventsProvider from rust threw an exception.");
	}
	LDKCVec_MessageSendEventZ ret_constr;
	ret_constr.datalen = (*env)->GetArrayLength(env, ret);
	if (ret_constr.datalen > 0)
		ret_constr.data = MALLOC(ret_constr.datalen * sizeof(LDKMessageSendEvent), "LDKCVec_MessageSendEventZ Elements");
	else
		ret_constr.data = NULL;
	int64_t* ret_vals = (*env)->GetLongArrayElements (env, ret, NULL);
	for (size_t s = 0; s < ret_constr.datalen; s++) {
		int64_t ret_conv_18 = ret_vals[s];
		void* ret_conv_18_ptr = (void*)(((uintptr_t)ret_conv_18) & ~1);
		CHECK_ACCESS(ret_conv_18_ptr);
		LDKMessageSendEvent ret_conv_18_conv = *(LDKMessageSendEvent*)(ret_conv_18_ptr);
		FREE((void*)ret_conv_18);
		ret_constr.data[s] = ret_conv_18_conv;
	}
	(*env)->ReleaseLongArrayElements(env, ret, ret_vals, 0);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_constr;
}
static void LDKMessageSendEventsProvider_JCalls_cloned(LDKMessageSendEventsProvider* new_obj) {
	LDKMessageSendEventsProvider_JCalls *j_calls = (LDKMessageSendEventsProvider_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKMessageSendEventsProvider LDKMessageSendEventsProvider_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKMessageSendEventsProvider_JCalls *calls = MALLOC(sizeof(LDKMessageSendEventsProvider_JCalls), "LDKMessageSendEventsProvider_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->get_and_clear_pending_msg_events_meth = (*env)->GetMethodID(env, c, "get_and_clear_pending_msg_events", "()[J");
	CHECK(calls->get_and_clear_pending_msg_events_meth != NULL);

	LDKMessageSendEventsProvider ret = {
		.this_arg = (void*) calls,
		.get_and_clear_pending_msg_events = get_and_clear_pending_msg_events_LDKMessageSendEventsProvider_jcall,
		.free = LDKMessageSendEventsProvider_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKMessageSendEventsProvider_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKMessageSendEventsProvider *res_ptr = MALLOC(sizeof(LDKMessageSendEventsProvider), "LDKMessageSendEventsProvider");
	*res_ptr = LDKMessageSendEventsProvider_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_MessageSendEventsProvider_1get_1and_1clear_1pending_1msg_1events(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKMessageSendEventsProvider* this_arg_conv = (LDKMessageSendEventsProvider*)this_arg_ptr;
	LDKCVec_MessageSendEventZ ret_var = (this_arg_conv->get_and_clear_pending_msg_events)(this_arg_conv->this_arg);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t s = 0; s < ret_var.datalen; s++) {
		LDKMessageSendEvent *ret_conv_18_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
		*ret_conv_18_copy = ret_var.data[s];
		uintptr_t ret_conv_18_ref = (uintptr_t)ret_conv_18_copy;
		ret_arr_ptr[s] = ret_conv_18_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

typedef struct LDKEventHandler_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID handle_event_meth;
} LDKEventHandler_JCalls;
static void LDKEventHandler_JCalls_free(void* this_arg) {
	LDKEventHandler_JCalls *j_calls = (LDKEventHandler_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void handle_event_LDKEventHandler_jcall(const void* this_arg, const LDKEvent * event) {
	LDKEventHandler_JCalls *j_calls = (LDKEventHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKEvent *ret_event = MALLOC(sizeof(LDKEvent), "LDKEvent ret conversion");
	*ret_event = Event_clone(event);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_event_meth, (uintptr_t)ret_event);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_event in LDKEventHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static void LDKEventHandler_JCalls_cloned(LDKEventHandler* new_obj) {
	LDKEventHandler_JCalls *j_calls = (LDKEventHandler_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKEventHandler LDKEventHandler_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKEventHandler_JCalls *calls = MALLOC(sizeof(LDKEventHandler_JCalls), "LDKEventHandler_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->handle_event_meth = (*env)->GetMethodID(env, c, "handle_event", "(J)V");
	CHECK(calls->handle_event_meth != NULL);

	LDKEventHandler ret = {
		.this_arg = (void*) calls,
		.handle_event = handle_event_LDKEventHandler_jcall,
		.free = LDKEventHandler_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKEventHandler_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKEventHandler *res_ptr = MALLOC(sizeof(LDKEventHandler), "LDKEventHandler");
	*res_ptr = LDKEventHandler_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_EventHandler_1handle_1event(JNIEnv *env, jclass clz, int64_t this_arg, int64_t event) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKEventHandler* this_arg_conv = (LDKEventHandler*)this_arg_ptr;
	LDKEvent* event_conv = (LDKEvent*)event;
	(this_arg_conv->handle_event)(this_arg_conv->this_arg, event_conv);
}

typedef struct LDKEventsProvider_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID process_pending_events_meth;
} LDKEventsProvider_JCalls;
static void LDKEventsProvider_JCalls_free(void* this_arg) {
	LDKEventsProvider_JCalls *j_calls = (LDKEventsProvider_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void process_pending_events_LDKEventsProvider_jcall(const void* this_arg, LDKEventHandler handler) {
	LDKEventsProvider_JCalls *j_calls = (LDKEventsProvider_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKEventHandler* handler_ret = MALLOC(sizeof(LDKEventHandler), "LDKEventHandler");
	*handler_ret = handler;
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->process_pending_events_meth, (uintptr_t)handler_ret);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to process_pending_events in LDKEventsProvider from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static void LDKEventsProvider_JCalls_cloned(LDKEventsProvider* new_obj) {
	LDKEventsProvider_JCalls *j_calls = (LDKEventsProvider_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKEventsProvider LDKEventsProvider_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKEventsProvider_JCalls *calls = MALLOC(sizeof(LDKEventsProvider_JCalls), "LDKEventsProvider_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->process_pending_events_meth = (*env)->GetMethodID(env, c, "process_pending_events", "(J)V");
	CHECK(calls->process_pending_events_meth != NULL);

	LDKEventsProvider ret = {
		.this_arg = (void*) calls,
		.process_pending_events = process_pending_events_LDKEventsProvider_jcall,
		.free = LDKEventsProvider_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKEventsProvider_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKEventsProvider *res_ptr = MALLOC(sizeof(LDKEventsProvider), "LDKEventsProvider");
	*res_ptr = LDKEventsProvider_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_EventsProvider_1process_1pending_1events(JNIEnv *env, jclass clz, int64_t this_arg, int64_t handler) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKEventsProvider* this_arg_conv = (LDKEventsProvider*)this_arg_ptr;
	void* handler_ptr = (void*)(((uintptr_t)handler) & ~1);
	CHECK_ACCESS(handler_ptr);
	LDKEventHandler handler_conv = *(LDKEventHandler*)(handler_ptr);
	if (handler_conv.free == LDKEventHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKEventHandler_JCalls_cloned(&handler_conv);
	}
	(this_arg_conv->process_pending_events)(this_arg_conv->this_arg, handler_conv);
}

typedef struct LDKListen_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID block_connected_meth;
	jmethodID block_disconnected_meth;
} LDKListen_JCalls;
static void LDKListen_JCalls_free(void* this_arg) {
	LDKListen_JCalls *j_calls = (LDKListen_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void block_connected_LDKListen_jcall(const void* this_arg, LDKu8slice block, uint32_t height) {
	LDKListen_JCalls *j_calls = (LDKListen_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKu8slice block_var = block;
	int8_tArray block_arr = (*env)->NewByteArray(env, block_var.datalen);
	(*env)->SetByteArrayRegion(env, block_arr, 0, block_var.datalen, block_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->block_connected_meth, block_arr, height);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to block_connected in LDKListen from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void block_disconnected_LDKListen_jcall(const void* this_arg, const uint8_t (* header)[80], uint32_t height) {
	LDKListen_JCalls *j_calls = (LDKListen_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray header_arr = (*env)->NewByteArray(env, 80);
	(*env)->SetByteArrayRegion(env, header_arr, 0, 80, *header);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->block_disconnected_meth, header_arr, height);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to block_disconnected in LDKListen from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static void LDKListen_JCalls_cloned(LDKListen* new_obj) {
	LDKListen_JCalls *j_calls = (LDKListen_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKListen LDKListen_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKListen_JCalls *calls = MALLOC(sizeof(LDKListen_JCalls), "LDKListen_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->block_connected_meth = (*env)->GetMethodID(env, c, "block_connected", "([BI)V");
	CHECK(calls->block_connected_meth != NULL);
	calls->block_disconnected_meth = (*env)->GetMethodID(env, c, "block_disconnected", "([BI)V");
	CHECK(calls->block_disconnected_meth != NULL);

	LDKListen ret = {
		.this_arg = (void*) calls,
		.block_connected = block_connected_LDKListen_jcall,
		.block_disconnected = block_disconnected_LDKListen_jcall,
		.free = LDKListen_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKListen_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKListen *res_ptr = MALLOC(sizeof(LDKListen), "LDKListen");
	*res_ptr = LDKListen_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Listen_1block_1connected(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray block, int32_t height) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKListen* this_arg_conv = (LDKListen*)this_arg_ptr;
	LDKu8slice block_ref;
	block_ref.datalen = (*env)->GetArrayLength(env, block);
	block_ref.data = (*env)->GetByteArrayElements (env, block, NULL);
	(this_arg_conv->block_connected)(this_arg_conv->this_arg, block_ref, height);
	(*env)->ReleaseByteArrayElements(env, block, (int8_t*)block_ref.data, 0);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Listen_1block_1disconnected(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray header, int32_t height) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKListen* this_arg_conv = (LDKListen*)this_arg_ptr;
	unsigned char header_arr[80];
	CHECK((*env)->GetArrayLength(env, header) == 80);
	(*env)->GetByteArrayRegion(env, header, 0, 80, header_arr);
	unsigned char (*header_ref)[80] = &header_arr;
	(this_arg_conv->block_disconnected)(this_arg_conv->this_arg, header_ref, height);
}

typedef struct LDKConfirm_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID transactions_confirmed_meth;
	jmethodID transaction_unconfirmed_meth;
	jmethodID best_block_updated_meth;
	jmethodID get_relevant_txids_meth;
} LDKConfirm_JCalls;
static void LDKConfirm_JCalls_free(void* this_arg) {
	LDKConfirm_JCalls *j_calls = (LDKConfirm_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void transactions_confirmed_LDKConfirm_jcall(const void* this_arg, const uint8_t (* header)[80], LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height) {
	LDKConfirm_JCalls *j_calls = (LDKConfirm_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray header_arr = (*env)->NewByteArray(env, 80);
	(*env)->SetByteArrayRegion(env, header_arr, 0, 80, *header);
	LDKCVec_C2Tuple_usizeTransactionZZ txdata_var = txdata;
	int64_tArray txdata_arr = NULL;
	txdata_arr = (*env)->NewLongArray(env, txdata_var.datalen);
	int64_t *txdata_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, txdata_arr, NULL);
	for (size_t c = 0; c < txdata_var.datalen; c++) {
		LDKC2Tuple_usizeTransactionZ* txdata_conv_28_conv = MALLOC(sizeof(LDKC2Tuple_usizeTransactionZ), "LDKC2Tuple_usizeTransactionZ");
		*txdata_conv_28_conv = txdata_var.data[c];
		txdata_arr_ptr[c] = ((uintptr_t)txdata_conv_28_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, txdata_arr, txdata_arr_ptr, 0);
	FREE(txdata_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->transactions_confirmed_meth, header_arr, txdata_arr, height);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to transactions_confirmed in LDKConfirm from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void transaction_unconfirmed_LDKConfirm_jcall(const void* this_arg, const uint8_t (* txid)[32]) {
	LDKConfirm_JCalls *j_calls = (LDKConfirm_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray txid_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, txid_arr, 0, 32, *txid);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->transaction_unconfirmed_meth, txid_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to transaction_unconfirmed in LDKConfirm from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void best_block_updated_LDKConfirm_jcall(const void* this_arg, const uint8_t (* header)[80], uint32_t height) {
	LDKConfirm_JCalls *j_calls = (LDKConfirm_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray header_arr = (*env)->NewByteArray(env, 80);
	(*env)->SetByteArrayRegion(env, header_arr, 0, 80, *header);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->best_block_updated_meth, header_arr, height);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to best_block_updated in LDKConfirm from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
LDKCVec_TxidZ get_relevant_txids_LDKConfirm_jcall(const void* this_arg) {
	LDKConfirm_JCalls *j_calls = (LDKConfirm_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	jobjectArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_relevant_txids_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_relevant_txids in LDKConfirm from rust threw an exception.");
	}
	LDKCVec_TxidZ ret_constr;
	ret_constr.datalen = (*env)->GetArrayLength(env, ret);
	if (ret_constr.datalen > 0)
		ret_constr.data = MALLOC(ret_constr.datalen * sizeof(LDKThirtyTwoBytes), "LDKCVec_TxidZ Elements");
	else
		ret_constr.data = NULL;
	for (size_t i = 0; i < ret_constr.datalen; i++) {
		int8_tArray ret_conv_8 = (*env)->GetObjectArrayElement(env, ret, i);
		LDKThirtyTwoBytes ret_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, ret_conv_8) == 32);
		(*env)->GetByteArrayRegion(env, ret_conv_8, 0, 32, ret_conv_8_ref.data);
		ret_constr.data[i] = ret_conv_8_ref;
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_constr;
}
static void LDKConfirm_JCalls_cloned(LDKConfirm* new_obj) {
	LDKConfirm_JCalls *j_calls = (LDKConfirm_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKConfirm LDKConfirm_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKConfirm_JCalls *calls = MALLOC(sizeof(LDKConfirm_JCalls), "LDKConfirm_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->transactions_confirmed_meth = (*env)->GetMethodID(env, c, "transactions_confirmed", "([B[JI)V");
	CHECK(calls->transactions_confirmed_meth != NULL);
	calls->transaction_unconfirmed_meth = (*env)->GetMethodID(env, c, "transaction_unconfirmed", "([B)V");
	CHECK(calls->transaction_unconfirmed_meth != NULL);
	calls->best_block_updated_meth = (*env)->GetMethodID(env, c, "best_block_updated", "([BI)V");
	CHECK(calls->best_block_updated_meth != NULL);
	calls->get_relevant_txids_meth = (*env)->GetMethodID(env, c, "get_relevant_txids", "()[[B");
	CHECK(calls->get_relevant_txids_meth != NULL);

	LDKConfirm ret = {
		.this_arg = (void*) calls,
		.transactions_confirmed = transactions_confirmed_LDKConfirm_jcall,
		.transaction_unconfirmed = transaction_unconfirmed_LDKConfirm_jcall,
		.best_block_updated = best_block_updated_LDKConfirm_jcall,
		.get_relevant_txids = get_relevant_txids_LDKConfirm_jcall,
		.free = LDKConfirm_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKConfirm_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKConfirm *res_ptr = MALLOC(sizeof(LDKConfirm), "LDKConfirm");
	*res_ptr = LDKConfirm_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Confirm_1transactions_1confirmed(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray header, int64_tArray txdata, int32_t height) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKConfirm* this_arg_conv = (LDKConfirm*)this_arg_ptr;
	unsigned char header_arr[80];
	CHECK((*env)->GetArrayLength(env, header) == 80);
	(*env)->GetByteArrayRegion(env, header, 0, 80, header_arr);
	unsigned char (*header_ref)[80] = &header_arr;
	LDKCVec_C2Tuple_usizeTransactionZZ txdata_constr;
	txdata_constr.datalen = (*env)->GetArrayLength(env, txdata);
	if (txdata_constr.datalen > 0)
		txdata_constr.data = MALLOC(txdata_constr.datalen * sizeof(LDKC2Tuple_usizeTransactionZ), "LDKCVec_C2Tuple_usizeTransactionZZ Elements");
	else
		txdata_constr.data = NULL;
	int64_t* txdata_vals = (*env)->GetLongArrayElements (env, txdata, NULL);
	for (size_t c = 0; c < txdata_constr.datalen; c++) {
		int64_t txdata_conv_28 = txdata_vals[c];
		void* txdata_conv_28_ptr = (void*)(((uintptr_t)txdata_conv_28) & ~1);
		CHECK_ACCESS(txdata_conv_28_ptr);
		LDKC2Tuple_usizeTransactionZ txdata_conv_28_conv = *(LDKC2Tuple_usizeTransactionZ*)(txdata_conv_28_ptr);
		txdata_conv_28_conv = C2Tuple_usizeTransactionZ_clone((LDKC2Tuple_usizeTransactionZ*)(((uintptr_t)txdata_conv_28) & ~1));
		txdata_constr.data[c] = txdata_conv_28_conv;
	}
	(*env)->ReleaseLongArrayElements(env, txdata, txdata_vals, 0);
	(this_arg_conv->transactions_confirmed)(this_arg_conv->this_arg, header_ref, txdata_constr, height);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Confirm_1transaction_1unconfirmed(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray txid) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKConfirm* this_arg_conv = (LDKConfirm*)this_arg_ptr;
	unsigned char txid_arr[32];
	CHECK((*env)->GetArrayLength(env, txid) == 32);
	(*env)->GetByteArrayRegion(env, txid, 0, 32, txid_arr);
	unsigned char (*txid_ref)[32] = &txid_arr;
	(this_arg_conv->transaction_unconfirmed)(this_arg_conv->this_arg, txid_ref);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Confirm_1best_1block_1updated(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray header, int32_t height) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKConfirm* this_arg_conv = (LDKConfirm*)this_arg_ptr;
	unsigned char header_arr[80];
	CHECK((*env)->GetArrayLength(env, header) == 80);
	(*env)->GetByteArrayRegion(env, header, 0, 80, header_arr);
	unsigned char (*header_ref)[80] = &header_arr;
	(this_arg_conv->best_block_updated)(this_arg_conv->this_arg, header_ref, height);
}

JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_Confirm_1get_1relevant_1txids(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKConfirm* this_arg_conv = (LDKConfirm*)this_arg_ptr;
	LDKCVec_TxidZ ret_var = (this_arg_conv->get_relevant_txids)(this_arg_conv->this_arg);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < ret_var.datalen; i++) {
		int8_tArray ret_conv_8_arr = (*env)->NewByteArray(env, 32);
		(*env)->SetByteArrayRegion(env, ret_conv_8_arr, 0, 32, ret_var.data[i].data);
		(*env)->SetObjectArrayElement(env, ret_arr, i, ret_conv_8_arr);
	}
	
	FREE(ret_var.data);
	return ret_arr;
}

typedef struct LDKPersist_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID persist_new_channel_meth;
	jmethodID update_persisted_channel_meth;
} LDKPersist_JCalls;
static void LDKPersist_JCalls_free(void* this_arg) {
	LDKPersist_JCalls *j_calls = (LDKPersist_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_NoneChannelMonitorUpdateErrZ persist_new_channel_LDKPersist_jcall(const void* this_arg, LDKOutPoint channel_id, const LDKChannelMonitor * data, LDKMonitorUpdateId update_id) {
	LDKPersist_JCalls *j_calls = (LDKPersist_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKOutPoint channel_id_var = channel_id;
	uintptr_t channel_id_ref = 0;
	CHECK((((uintptr_t)channel_id_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&channel_id_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_id_var);
	channel_id_ref = (uintptr_t)channel_id_var.inner;
	if (channel_id_var.is_owned) {
		channel_id_ref |= 1;
	}
	LDKChannelMonitor data_var = *data;
	uintptr_t data_ref = 0;
	data_var = ChannelMonitor_clone(data);
	CHECK((((uintptr_t)data_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&data_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(data_var);
	data_ref = (uintptr_t)data_var.inner;
	if (data_var.is_owned) {
		data_ref |= 1;
	}
	LDKMonitorUpdateId update_id_var = update_id;
	uintptr_t update_id_ref = 0;
	CHECK((((uintptr_t)update_id_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&update_id_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_id_var);
	update_id_ref = (uintptr_t)update_id_var.inner;
	if (update_id_var.is_owned) {
		update_id_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->persist_new_channel_meth, channel_id_ref, data_ref, update_id_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to persist_new_channel in LDKPersist from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneChannelMonitorUpdateErrZ ret_conv = *(LDKCResult_NoneChannelMonitorUpdateErrZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_NoneChannelMonitorUpdateErrZ update_persisted_channel_LDKPersist_jcall(const void* this_arg, LDKOutPoint channel_id, const LDKChannelMonitorUpdate * update, const LDKChannelMonitor * data, LDKMonitorUpdateId update_id) {
	LDKPersist_JCalls *j_calls = (LDKPersist_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKOutPoint channel_id_var = channel_id;
	uintptr_t channel_id_ref = 0;
	CHECK((((uintptr_t)channel_id_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&channel_id_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_id_var);
	channel_id_ref = (uintptr_t)channel_id_var.inner;
	if (channel_id_var.is_owned) {
		channel_id_ref |= 1;
	}
	LDKChannelMonitorUpdate update_var = *update;
	uintptr_t update_ref = 0;
	if ((uintptr_t)update_var.inner > 4096) {
		update_var = ChannelMonitorUpdate_clone(update);
		CHECK((((uintptr_t)update_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&update_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_var);
		update_ref = (uintptr_t)update_var.inner;
		if (update_var.is_owned) {
			update_ref |= 1;
		}
	}
	LDKChannelMonitor data_var = *data;
	uintptr_t data_ref = 0;
	data_var = ChannelMonitor_clone(data);
	CHECK((((uintptr_t)data_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&data_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(data_var);
	data_ref = (uintptr_t)data_var.inner;
	if (data_var.is_owned) {
		data_ref |= 1;
	}
	LDKMonitorUpdateId update_id_var = update_id;
	uintptr_t update_id_ref = 0;
	CHECK((((uintptr_t)update_id_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&update_id_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_id_var);
	update_id_ref = (uintptr_t)update_id_var.inner;
	if (update_id_var.is_owned) {
		update_id_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->update_persisted_channel_meth, channel_id_ref, update_ref, data_ref, update_id_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to update_persisted_channel in LDKPersist from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneChannelMonitorUpdateErrZ ret_conv = *(LDKCResult_NoneChannelMonitorUpdateErrZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKPersist_JCalls_cloned(LDKPersist* new_obj) {
	LDKPersist_JCalls *j_calls = (LDKPersist_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKPersist LDKPersist_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKPersist_JCalls *calls = MALLOC(sizeof(LDKPersist_JCalls), "LDKPersist_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->persist_new_channel_meth = (*env)->GetMethodID(env, c, "persist_new_channel", "(JJJ)J");
	CHECK(calls->persist_new_channel_meth != NULL);
	calls->update_persisted_channel_meth = (*env)->GetMethodID(env, c, "update_persisted_channel", "(JJJJ)J");
	CHECK(calls->update_persisted_channel_meth != NULL);

	LDKPersist ret = {
		.this_arg = (void*) calls,
		.persist_new_channel = persist_new_channel_LDKPersist_jcall,
		.update_persisted_channel = update_persisted_channel_LDKPersist_jcall,
		.free = LDKPersist_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKPersist_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKPersist *res_ptr = MALLOC(sizeof(LDKPersist), "LDKPersist");
	*res_ptr = LDKPersist_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Persist_1persist_1new_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int64_t channel_id, int64_t data, int64_t update_id) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPersist* this_arg_conv = (LDKPersist*)this_arg_ptr;
	LDKOutPoint channel_id_conv;
	channel_id_conv.inner = (void*)(channel_id & (~1));
	channel_id_conv.is_owned = (channel_id & 1) || (channel_id == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_id_conv);
	channel_id_conv = OutPoint_clone(&channel_id_conv);
	LDKChannelMonitor data_conv;
	data_conv.inner = (void*)(data & (~1));
	data_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(data_conv);
	LDKMonitorUpdateId update_id_conv;
	update_id_conv.inner = (void*)(update_id & (~1));
	update_id_conv.is_owned = (update_id & 1) || (update_id == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_id_conv);
	update_id_conv = MonitorUpdateId_clone(&update_id_conv);
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = (this_arg_conv->persist_new_channel)(this_arg_conv->this_arg, channel_id_conv, &data_conv, update_id_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Persist_1update_1persisted_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int64_t channel_id, int64_t update, int64_t data, int64_t update_id) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPersist* this_arg_conv = (LDKPersist*)this_arg_ptr;
	LDKOutPoint channel_id_conv;
	channel_id_conv.inner = (void*)(channel_id & (~1));
	channel_id_conv.is_owned = (channel_id & 1) || (channel_id == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_id_conv);
	channel_id_conv = OutPoint_clone(&channel_id_conv);
	LDKChannelMonitorUpdate update_conv;
	update_conv.inner = (void*)(update & (~1));
	update_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_conv);
	LDKChannelMonitor data_conv;
	data_conv.inner = (void*)(data & (~1));
	data_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(data_conv);
	LDKMonitorUpdateId update_id_conv;
	update_id_conv.inner = (void*)(update_id & (~1));
	update_id_conv.is_owned = (update_id & 1) || (update_id == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_id_conv);
	update_id_conv = MonitorUpdateId_clone(&update_id_conv);
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = (this_arg_conv->update_persisted_channel)(this_arg_conv->this_arg, channel_id_conv, &update_conv, &data_conv, update_id_conv);
	return (uintptr_t)ret_conv;
}

typedef struct LDKChannelMessageHandler_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	LDKMessageSendEventsProvider_JCalls* MessageSendEventsProvider;
	jmethodID handle_open_channel_meth;
	jmethodID handle_accept_channel_meth;
	jmethodID handle_funding_created_meth;
	jmethodID handle_funding_signed_meth;
	jmethodID handle_funding_locked_meth;
	jmethodID handle_shutdown_meth;
	jmethodID handle_closing_signed_meth;
	jmethodID handle_update_add_htlc_meth;
	jmethodID handle_update_fulfill_htlc_meth;
	jmethodID handle_update_fail_htlc_meth;
	jmethodID handle_update_fail_malformed_htlc_meth;
	jmethodID handle_commitment_signed_meth;
	jmethodID handle_revoke_and_ack_meth;
	jmethodID handle_update_fee_meth;
	jmethodID handle_announcement_signatures_meth;
	jmethodID peer_disconnected_meth;
	jmethodID peer_connected_meth;
	jmethodID handle_channel_reestablish_meth;
	jmethodID handle_channel_update_meth;
	jmethodID handle_error_meth;
} LDKChannelMessageHandler_JCalls;
static void LDKChannelMessageHandler_JCalls_free(void* this_arg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
void handle_open_channel_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, LDKInitFeatures their_features, const LDKOpenChannel * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKInitFeatures their_features_var = their_features;
	uintptr_t their_features_ref = 0;
	CHECK((((uintptr_t)their_features_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&their_features_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(their_features_var);
	their_features_ref = (uintptr_t)their_features_var.inner;
	if (their_features_var.is_owned) {
		their_features_ref |= 1;
	}
	LDKOpenChannel msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = OpenChannel_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_open_channel_meth, their_node_id_arr, their_features_ref, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_open_channel in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_accept_channel_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, LDKInitFeatures their_features, const LDKAcceptChannel * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKInitFeatures their_features_var = their_features;
	uintptr_t their_features_ref = 0;
	CHECK((((uintptr_t)their_features_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&their_features_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(their_features_var);
	their_features_ref = (uintptr_t)their_features_var.inner;
	if (their_features_var.is_owned) {
		their_features_ref |= 1;
	}
	LDKAcceptChannel msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = AcceptChannel_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_accept_channel_meth, their_node_id_arr, their_features_ref, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_accept_channel in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_funding_created_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKFundingCreated * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKFundingCreated msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = FundingCreated_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_funding_created_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_funding_created in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_funding_signed_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKFundingSigned * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKFundingSigned msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = FundingSigned_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_funding_signed_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_funding_signed in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_funding_locked_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKFundingLocked * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKFundingLocked msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = FundingLocked_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_funding_locked_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_funding_locked in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_shutdown_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKInitFeatures * their_features, const LDKShutdown * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKInitFeatures their_features_var = *their_features;
	uintptr_t their_features_ref = 0;
	their_features_var = InitFeatures_clone(their_features);
	CHECK((((uintptr_t)their_features_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&their_features_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(their_features_var);
	their_features_ref = (uintptr_t)their_features_var.inner;
	if (their_features_var.is_owned) {
		their_features_ref |= 1;
	}
	LDKShutdown msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = Shutdown_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_shutdown_meth, their_node_id_arr, their_features_ref, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_shutdown in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_closing_signed_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKClosingSigned * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKClosingSigned msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = ClosingSigned_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_closing_signed_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_closing_signed in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_update_add_htlc_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKUpdateAddHTLC * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKUpdateAddHTLC msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = UpdateAddHTLC_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_update_add_htlc_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_update_add_htlc in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_update_fulfill_htlc_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKUpdateFulfillHTLC * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKUpdateFulfillHTLC msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = UpdateFulfillHTLC_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_update_fulfill_htlc_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_update_fulfill_htlc in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_update_fail_htlc_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKUpdateFailHTLC * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKUpdateFailHTLC msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = UpdateFailHTLC_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_update_fail_htlc_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_update_fail_htlc in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_update_fail_malformed_htlc_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKUpdateFailMalformedHTLC * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKUpdateFailMalformedHTLC msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = UpdateFailMalformedHTLC_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_update_fail_malformed_htlc_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_update_fail_malformed_htlc in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_commitment_signed_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKCommitmentSigned * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKCommitmentSigned msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = CommitmentSigned_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_commitment_signed_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_commitment_signed in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_revoke_and_ack_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKRevokeAndACK * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKRevokeAndACK msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = RevokeAndACK_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_revoke_and_ack_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_revoke_and_ack in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_update_fee_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKUpdateFee * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKUpdateFee msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = UpdateFee_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_update_fee_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_update_fee in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_announcement_signatures_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKAnnouncementSignatures * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKAnnouncementSignatures msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = AnnouncementSignatures_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_announcement_signatures_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_announcement_signatures in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void peer_disconnected_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, bool no_connection_possible) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->peer_disconnected_meth, their_node_id_arr, no_connection_possible);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to peer_disconnected in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void peer_connected_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKInit * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKInit msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = Init_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->peer_connected_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to peer_connected in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_channel_reestablish_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKChannelReestablish * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKChannelReestablish msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = ChannelReestablish_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_channel_reestablish_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_channel_reestablish in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_channel_update_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKChannelUpdate * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKChannelUpdate msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = ChannelUpdate_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_channel_update_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_channel_update in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void handle_error_LDKChannelMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKErrorMessage * msg) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKErrorMessage msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = ErrorMessage_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->handle_error_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_error in LDKChannelMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static void LDKChannelMessageHandler_JCalls_cloned(LDKChannelMessageHandler* new_obj) {
	LDKChannelMessageHandler_JCalls *j_calls = (LDKChannelMessageHandler_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
	atomic_fetch_add_explicit(&j_calls->MessageSendEventsProvider->refcnt, 1, memory_order_release);
}
static inline LDKChannelMessageHandler LDKChannelMessageHandler_init (JNIEnv *env, jclass clz, jobject o, jobject MessageSendEventsProvider) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKChannelMessageHandler_JCalls *calls = MALLOC(sizeof(LDKChannelMessageHandler_JCalls), "LDKChannelMessageHandler_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->handle_open_channel_meth = (*env)->GetMethodID(env, c, "handle_open_channel", "([BJJ)V");
	CHECK(calls->handle_open_channel_meth != NULL);
	calls->handle_accept_channel_meth = (*env)->GetMethodID(env, c, "handle_accept_channel", "([BJJ)V");
	CHECK(calls->handle_accept_channel_meth != NULL);
	calls->handle_funding_created_meth = (*env)->GetMethodID(env, c, "handle_funding_created", "([BJ)V");
	CHECK(calls->handle_funding_created_meth != NULL);
	calls->handle_funding_signed_meth = (*env)->GetMethodID(env, c, "handle_funding_signed", "([BJ)V");
	CHECK(calls->handle_funding_signed_meth != NULL);
	calls->handle_funding_locked_meth = (*env)->GetMethodID(env, c, "handle_funding_locked", "([BJ)V");
	CHECK(calls->handle_funding_locked_meth != NULL);
	calls->handle_shutdown_meth = (*env)->GetMethodID(env, c, "handle_shutdown", "([BJJ)V");
	CHECK(calls->handle_shutdown_meth != NULL);
	calls->handle_closing_signed_meth = (*env)->GetMethodID(env, c, "handle_closing_signed", "([BJ)V");
	CHECK(calls->handle_closing_signed_meth != NULL);
	calls->handle_update_add_htlc_meth = (*env)->GetMethodID(env, c, "handle_update_add_htlc", "([BJ)V");
	CHECK(calls->handle_update_add_htlc_meth != NULL);
	calls->handle_update_fulfill_htlc_meth = (*env)->GetMethodID(env, c, "handle_update_fulfill_htlc", "([BJ)V");
	CHECK(calls->handle_update_fulfill_htlc_meth != NULL);
	calls->handle_update_fail_htlc_meth = (*env)->GetMethodID(env, c, "handle_update_fail_htlc", "([BJ)V");
	CHECK(calls->handle_update_fail_htlc_meth != NULL);
	calls->handle_update_fail_malformed_htlc_meth = (*env)->GetMethodID(env, c, "handle_update_fail_malformed_htlc", "([BJ)V");
	CHECK(calls->handle_update_fail_malformed_htlc_meth != NULL);
	calls->handle_commitment_signed_meth = (*env)->GetMethodID(env, c, "handle_commitment_signed", "([BJ)V");
	CHECK(calls->handle_commitment_signed_meth != NULL);
	calls->handle_revoke_and_ack_meth = (*env)->GetMethodID(env, c, "handle_revoke_and_ack", "([BJ)V");
	CHECK(calls->handle_revoke_and_ack_meth != NULL);
	calls->handle_update_fee_meth = (*env)->GetMethodID(env, c, "handle_update_fee", "([BJ)V");
	CHECK(calls->handle_update_fee_meth != NULL);
	calls->handle_announcement_signatures_meth = (*env)->GetMethodID(env, c, "handle_announcement_signatures", "([BJ)V");
	CHECK(calls->handle_announcement_signatures_meth != NULL);
	calls->peer_disconnected_meth = (*env)->GetMethodID(env, c, "peer_disconnected", "([BZ)V");
	CHECK(calls->peer_disconnected_meth != NULL);
	calls->peer_connected_meth = (*env)->GetMethodID(env, c, "peer_connected", "([BJ)V");
	CHECK(calls->peer_connected_meth != NULL);
	calls->handle_channel_reestablish_meth = (*env)->GetMethodID(env, c, "handle_channel_reestablish", "([BJ)V");
	CHECK(calls->handle_channel_reestablish_meth != NULL);
	calls->handle_channel_update_meth = (*env)->GetMethodID(env, c, "handle_channel_update", "([BJ)V");
	CHECK(calls->handle_channel_update_meth != NULL);
	calls->handle_error_meth = (*env)->GetMethodID(env, c, "handle_error", "([BJ)V");
	CHECK(calls->handle_error_meth != NULL);

	LDKChannelMessageHandler ret = {
		.this_arg = (void*) calls,
		.handle_open_channel = handle_open_channel_LDKChannelMessageHandler_jcall,
		.handle_accept_channel = handle_accept_channel_LDKChannelMessageHandler_jcall,
		.handle_funding_created = handle_funding_created_LDKChannelMessageHandler_jcall,
		.handle_funding_signed = handle_funding_signed_LDKChannelMessageHandler_jcall,
		.handle_funding_locked = handle_funding_locked_LDKChannelMessageHandler_jcall,
		.handle_shutdown = handle_shutdown_LDKChannelMessageHandler_jcall,
		.handle_closing_signed = handle_closing_signed_LDKChannelMessageHandler_jcall,
		.handle_update_add_htlc = handle_update_add_htlc_LDKChannelMessageHandler_jcall,
		.handle_update_fulfill_htlc = handle_update_fulfill_htlc_LDKChannelMessageHandler_jcall,
		.handle_update_fail_htlc = handle_update_fail_htlc_LDKChannelMessageHandler_jcall,
		.handle_update_fail_malformed_htlc = handle_update_fail_malformed_htlc_LDKChannelMessageHandler_jcall,
		.handle_commitment_signed = handle_commitment_signed_LDKChannelMessageHandler_jcall,
		.handle_revoke_and_ack = handle_revoke_and_ack_LDKChannelMessageHandler_jcall,
		.handle_update_fee = handle_update_fee_LDKChannelMessageHandler_jcall,
		.handle_announcement_signatures = handle_announcement_signatures_LDKChannelMessageHandler_jcall,
		.peer_disconnected = peer_disconnected_LDKChannelMessageHandler_jcall,
		.peer_connected = peer_connected_LDKChannelMessageHandler_jcall,
		.handle_channel_reestablish = handle_channel_reestablish_LDKChannelMessageHandler_jcall,
		.handle_channel_update = handle_channel_update_LDKChannelMessageHandler_jcall,
		.handle_error = handle_error_LDKChannelMessageHandler_jcall,
		.free = LDKChannelMessageHandler_JCalls_free,
		.MessageSendEventsProvider = LDKMessageSendEventsProvider_init(env, clz, MessageSendEventsProvider),
	};
	calls->MessageSendEventsProvider = ret.MessageSendEventsProvider.this_arg;
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKChannelMessageHandler_1new(JNIEnv *env, jclass clz, jobject o, jobject MessageSendEventsProvider) {
	LDKChannelMessageHandler *res_ptr = MALLOC(sizeof(LDKChannelMessageHandler), "LDKChannelMessageHandler");
	*res_ptr = LDKChannelMessageHandler_init(env, clz, o, MessageSendEventsProvider);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKChannelMessageHandler_1get_1MessageSendEventsProvider(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelMessageHandler *inp = (LDKChannelMessageHandler *)(arg & ~1);
	uint64_t res_ptr = (uint64_t)&inp->MessageSendEventsProvider;
	DO_ASSERT((res_ptr & 1) == 0);
	return (int64_t)(res_ptr | 1);
}
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1open_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t their_features, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKInitFeatures their_features_conv;
	their_features_conv.inner = (void*)(their_features & (~1));
	their_features_conv.is_owned = (their_features & 1) || (their_features == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(their_features_conv);
	their_features_conv = InitFeatures_clone(&their_features_conv);
	LDKOpenChannel msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_open_channel)(this_arg_conv->this_arg, their_node_id_ref, their_features_conv, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1accept_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t their_features, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKInitFeatures their_features_conv;
	their_features_conv.inner = (void*)(their_features & (~1));
	their_features_conv.is_owned = (their_features & 1) || (their_features == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(their_features_conv);
	their_features_conv = InitFeatures_clone(&their_features_conv);
	LDKAcceptChannel msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_accept_channel)(this_arg_conv->this_arg, their_node_id_ref, their_features_conv, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1funding_1created(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKFundingCreated msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_funding_created)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1funding_1signed(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKFundingSigned msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_funding_signed)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1funding_1locked(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKFundingLocked msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_funding_locked)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1shutdown(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t their_features, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKInitFeatures their_features_conv;
	their_features_conv.inner = (void*)(their_features & (~1));
	their_features_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(their_features_conv);
	LDKShutdown msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_shutdown)(this_arg_conv->this_arg, their_node_id_ref, &their_features_conv, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1closing_1signed(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKClosingSigned msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_closing_signed)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1update_1add_1htlc(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKUpdateAddHTLC msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_update_add_htlc)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1update_1fulfill_1htlc(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKUpdateFulfillHTLC msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_update_fulfill_htlc)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1update_1fail_1htlc(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKUpdateFailHTLC msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_update_fail_htlc)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1update_1fail_1malformed_1htlc(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKUpdateFailMalformedHTLC msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_update_fail_malformed_htlc)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1commitment_1signed(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKCommitmentSigned msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_commitment_signed)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1revoke_1and_1ack(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKRevokeAndACK msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_revoke_and_ack)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1update_1fee(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKUpdateFee msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_update_fee)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1announcement_1signatures(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKAnnouncementSignatures msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_announcement_signatures)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1peer_1disconnected(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, jboolean no_connection_possible) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	(this_arg_conv->peer_disconnected)(this_arg_conv->this_arg, their_node_id_ref, no_connection_possible);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1peer_1connected(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKInit msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->peer_connected)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1channel_1reestablish(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKChannelReestablish msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_channel_reestablish)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1channel_1update(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKChannelUpdate msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_channel_update)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1handle_1error(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelMessageHandler* this_arg_conv = (LDKChannelMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKErrorMessage msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	(this_arg_conv->handle_error)(this_arg_conv->this_arg, their_node_id_ref, &msg_conv);
}

typedef struct LDKRoutingMessageHandler_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	LDKMessageSendEventsProvider_JCalls* MessageSendEventsProvider;
	jmethodID handle_node_announcement_meth;
	jmethodID handle_channel_announcement_meth;
	jmethodID handle_channel_update_meth;
	jmethodID get_next_channel_announcements_meth;
	jmethodID get_next_node_announcements_meth;
	jmethodID sync_routing_table_meth;
	jmethodID handle_reply_channel_range_meth;
	jmethodID handle_reply_short_channel_ids_end_meth;
	jmethodID handle_query_channel_range_meth;
	jmethodID handle_query_short_channel_ids_meth;
} LDKRoutingMessageHandler_JCalls;
static void LDKRoutingMessageHandler_JCalls_free(void* this_arg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_boolLightningErrorZ handle_node_announcement_LDKRoutingMessageHandler_jcall(const void* this_arg, const LDKNodeAnnouncement * msg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKNodeAnnouncement msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = NodeAnnouncement_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_node_announcement_meth, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_node_announcement in LDKRoutingMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_boolLightningErrorZ ret_conv = *(LDKCResult_boolLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_boolLightningErrorZ handle_channel_announcement_LDKRoutingMessageHandler_jcall(const void* this_arg, const LDKChannelAnnouncement * msg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKChannelAnnouncement msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = ChannelAnnouncement_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_channel_announcement_meth, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_channel_announcement in LDKRoutingMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_boolLightningErrorZ ret_conv = *(LDKCResult_boolLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_boolLightningErrorZ handle_channel_update_LDKRoutingMessageHandler_jcall(const void* this_arg, const LDKChannelUpdate * msg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKChannelUpdate msg_var = *msg;
	uintptr_t msg_ref = 0;
	msg_var = ChannelUpdate_clone(msg);
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_channel_update_meth, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_channel_update in LDKRoutingMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_boolLightningErrorZ ret_conv = *(LDKCResult_boolLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ get_next_channel_announcements_LDKRoutingMessageHandler_jcall(const void* this_arg, uint64_t starting_point, uint8_t batch_amount) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_next_channel_announcements_meth, starting_point, batch_amount);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_next_channel_announcements in LDKRoutingMessageHandler from rust threw an exception.");
	}
	LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ ret_constr;
	ret_constr.datalen = (*env)->GetArrayLength(env, ret);
	if (ret_constr.datalen > 0)
		ret_constr.data = MALLOC(ret_constr.datalen * sizeof(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ), "LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ Elements");
	else
		ret_constr.data = NULL;
	int64_t* ret_vals = (*env)->GetLongArrayElements (env, ret, NULL);
	for (size_t h = 0; h < ret_constr.datalen; h++) {
		int64_t ret_conv_59 = ret_vals[h];
		void* ret_conv_59_ptr = (void*)(((uintptr_t)ret_conv_59) & ~1);
		CHECK_ACCESS(ret_conv_59_ptr);
		LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ ret_conv_59_conv = *(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(ret_conv_59_ptr);
		FREE((void*)ret_conv_59);
		ret_constr.data[h] = ret_conv_59_conv;
	}
	(*env)->ReleaseLongArrayElements(env, ret, ret_vals, 0);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_constr;
}
LDKCVec_NodeAnnouncementZ get_next_node_announcements_LDKRoutingMessageHandler_jcall(const void* this_arg, LDKPublicKey starting_point, uint8_t batch_amount) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray starting_point_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, starting_point_arr, 0, 33, starting_point.compressed_form);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_next_node_announcements_meth, starting_point_arr, batch_amount);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_next_node_announcements in LDKRoutingMessageHandler from rust threw an exception.");
	}
	LDKCVec_NodeAnnouncementZ ret_constr;
	ret_constr.datalen = (*env)->GetArrayLength(env, ret);
	if (ret_constr.datalen > 0)
		ret_constr.data = MALLOC(ret_constr.datalen * sizeof(LDKNodeAnnouncement), "LDKCVec_NodeAnnouncementZ Elements");
	else
		ret_constr.data = NULL;
	int64_t* ret_vals = (*env)->GetLongArrayElements (env, ret, NULL);
	for (size_t s = 0; s < ret_constr.datalen; s++) {
		int64_t ret_conv_18 = ret_vals[s];
		LDKNodeAnnouncement ret_conv_18_conv;
		ret_conv_18_conv.inner = (void*)(ret_conv_18 & (~1));
		ret_conv_18_conv.is_owned = (ret_conv_18 & 1) || (ret_conv_18 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_18_conv);
		ret_constr.data[s] = ret_conv_18_conv;
	}
	(*env)->ReleaseLongArrayElements(env, ret, ret_vals, 0);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_constr;
}
void sync_routing_table_LDKRoutingMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, const LDKInit * init) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKInit init_var = *init;
	uintptr_t init_ref = 0;
	init_var = Init_clone(init);
	CHECK((((uintptr_t)init_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&init_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(init_var);
	init_ref = (uintptr_t)init_var.inner;
	if (init_var.is_owned) {
		init_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->sync_routing_table_meth, their_node_id_arr, init_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to sync_routing_table in LDKRoutingMessageHandler from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
LDKCResult_NoneLightningErrorZ handle_reply_channel_range_LDKRoutingMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, LDKReplyChannelRange msg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKReplyChannelRange msg_var = msg;
	uintptr_t msg_ref = 0;
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_reply_channel_range_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_reply_channel_range in LDKRoutingMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneLightningErrorZ ret_conv = *(LDKCResult_NoneLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_NoneLightningErrorZ handle_reply_short_channel_ids_end_LDKRoutingMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, LDKReplyShortChannelIdsEnd msg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKReplyShortChannelIdsEnd msg_var = msg;
	uintptr_t msg_ref = 0;
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_reply_short_channel_ids_end_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_reply_short_channel_ids_end in LDKRoutingMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneLightningErrorZ ret_conv = *(LDKCResult_NoneLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_NoneLightningErrorZ handle_query_channel_range_LDKRoutingMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, LDKQueryChannelRange msg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKQueryChannelRange msg_var = msg;
	uintptr_t msg_ref = 0;
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_query_channel_range_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_query_channel_range in LDKRoutingMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneLightningErrorZ ret_conv = *(LDKCResult_NoneLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_NoneLightningErrorZ handle_query_short_channel_ids_LDKRoutingMessageHandler_jcall(const void* this_arg, LDKPublicKey their_node_id, LDKQueryShortChannelIds msg) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray their_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, their_node_id_arr, 0, 33, their_node_id.compressed_form);
	LDKQueryShortChannelIds msg_var = msg;
	uintptr_t msg_ref = 0;
	CHECK((((uintptr_t)msg_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&msg_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_var);
	msg_ref = (uintptr_t)msg_var.inner;
	if (msg_var.is_owned) {
		msg_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_query_short_channel_ids_meth, their_node_id_arr, msg_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_query_short_channel_ids in LDKRoutingMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneLightningErrorZ ret_conv = *(LDKCResult_NoneLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKRoutingMessageHandler_JCalls_cloned(LDKRoutingMessageHandler* new_obj) {
	LDKRoutingMessageHandler_JCalls *j_calls = (LDKRoutingMessageHandler_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
	atomic_fetch_add_explicit(&j_calls->MessageSendEventsProvider->refcnt, 1, memory_order_release);
}
static inline LDKRoutingMessageHandler LDKRoutingMessageHandler_init (JNIEnv *env, jclass clz, jobject o, jobject MessageSendEventsProvider) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKRoutingMessageHandler_JCalls *calls = MALLOC(sizeof(LDKRoutingMessageHandler_JCalls), "LDKRoutingMessageHandler_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->handle_node_announcement_meth = (*env)->GetMethodID(env, c, "handle_node_announcement", "(J)J");
	CHECK(calls->handle_node_announcement_meth != NULL);
	calls->handle_channel_announcement_meth = (*env)->GetMethodID(env, c, "handle_channel_announcement", "(J)J");
	CHECK(calls->handle_channel_announcement_meth != NULL);
	calls->handle_channel_update_meth = (*env)->GetMethodID(env, c, "handle_channel_update", "(J)J");
	CHECK(calls->handle_channel_update_meth != NULL);
	calls->get_next_channel_announcements_meth = (*env)->GetMethodID(env, c, "get_next_channel_announcements", "(JB)[J");
	CHECK(calls->get_next_channel_announcements_meth != NULL);
	calls->get_next_node_announcements_meth = (*env)->GetMethodID(env, c, "get_next_node_announcements", "([BB)[J");
	CHECK(calls->get_next_node_announcements_meth != NULL);
	calls->sync_routing_table_meth = (*env)->GetMethodID(env, c, "sync_routing_table", "([BJ)V");
	CHECK(calls->sync_routing_table_meth != NULL);
	calls->handle_reply_channel_range_meth = (*env)->GetMethodID(env, c, "handle_reply_channel_range", "([BJ)J");
	CHECK(calls->handle_reply_channel_range_meth != NULL);
	calls->handle_reply_short_channel_ids_end_meth = (*env)->GetMethodID(env, c, "handle_reply_short_channel_ids_end", "([BJ)J");
	CHECK(calls->handle_reply_short_channel_ids_end_meth != NULL);
	calls->handle_query_channel_range_meth = (*env)->GetMethodID(env, c, "handle_query_channel_range", "([BJ)J");
	CHECK(calls->handle_query_channel_range_meth != NULL);
	calls->handle_query_short_channel_ids_meth = (*env)->GetMethodID(env, c, "handle_query_short_channel_ids", "([BJ)J");
	CHECK(calls->handle_query_short_channel_ids_meth != NULL);

	LDKRoutingMessageHandler ret = {
		.this_arg = (void*) calls,
		.handle_node_announcement = handle_node_announcement_LDKRoutingMessageHandler_jcall,
		.handle_channel_announcement = handle_channel_announcement_LDKRoutingMessageHandler_jcall,
		.handle_channel_update = handle_channel_update_LDKRoutingMessageHandler_jcall,
		.get_next_channel_announcements = get_next_channel_announcements_LDKRoutingMessageHandler_jcall,
		.get_next_node_announcements = get_next_node_announcements_LDKRoutingMessageHandler_jcall,
		.sync_routing_table = sync_routing_table_LDKRoutingMessageHandler_jcall,
		.handle_reply_channel_range = handle_reply_channel_range_LDKRoutingMessageHandler_jcall,
		.handle_reply_short_channel_ids_end = handle_reply_short_channel_ids_end_LDKRoutingMessageHandler_jcall,
		.handle_query_channel_range = handle_query_channel_range_LDKRoutingMessageHandler_jcall,
		.handle_query_short_channel_ids = handle_query_short_channel_ids_LDKRoutingMessageHandler_jcall,
		.free = LDKRoutingMessageHandler_JCalls_free,
		.MessageSendEventsProvider = LDKMessageSendEventsProvider_init(env, clz, MessageSendEventsProvider),
	};
	calls->MessageSendEventsProvider = ret.MessageSendEventsProvider.this_arg;
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKRoutingMessageHandler_1new(JNIEnv *env, jclass clz, jobject o, jobject MessageSendEventsProvider) {
	LDKRoutingMessageHandler *res_ptr = MALLOC(sizeof(LDKRoutingMessageHandler), "LDKRoutingMessageHandler");
	*res_ptr = LDKRoutingMessageHandler_init(env, clz, o, MessageSendEventsProvider);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKRoutingMessageHandler_1get_1MessageSendEventsProvider(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRoutingMessageHandler *inp = (LDKRoutingMessageHandler *)(arg & ~1);
	uint64_t res_ptr = (uint64_t)&inp->MessageSendEventsProvider;
	DO_ASSERT((res_ptr & 1) == 0);
	return (int64_t)(res_ptr | 1);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1handle_1node_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKNodeAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_boolLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolLightningErrorZ), "LDKCResult_boolLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_node_announcement)(this_arg_conv->this_arg, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1handle_1channel_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKChannelAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_boolLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolLightningErrorZ), "LDKCResult_boolLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_channel_announcement)(this_arg_conv->this_arg, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1handle_1channel_1update(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKChannelUpdate msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_boolLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolLightningErrorZ), "LDKCResult_boolLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_channel_update)(this_arg_conv->this_arg, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1get_1next_1channel_1announcements(JNIEnv *env, jclass clz, int64_t this_arg, int64_t starting_point, int8_t batch_amount) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ ret_var = (this_arg_conv->get_next_channel_announcements)(this_arg_conv->this_arg, starting_point, batch_amount);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t h = 0; h < ret_var.datalen; h++) {
		LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* ret_conv_59_conv = MALLOC(sizeof(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ), "LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ");
		*ret_conv_59_conv = ret_var.data[h];
		ret_arr_ptr[h] = ((uintptr_t)ret_conv_59_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1get_1next_1node_1announcements(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray starting_point, int8_t batch_amount) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKPublicKey starting_point_ref;
	CHECK((*env)->GetArrayLength(env, starting_point) == 33);
	(*env)->GetByteArrayRegion(env, starting_point, 0, 33, starting_point_ref.compressed_form);
	LDKCVec_NodeAnnouncementZ ret_var = (this_arg_conv->get_next_node_announcements)(this_arg_conv->this_arg, starting_point_ref, batch_amount);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t s = 0; s < ret_var.datalen; s++) {
		LDKNodeAnnouncement ret_conv_18_var = ret_var.data[s];
		uintptr_t ret_conv_18_ref = 0;
		CHECK((((uintptr_t)ret_conv_18_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_18_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_18_var);
		ret_conv_18_ref = (uintptr_t)ret_conv_18_var.inner;
		if (ret_conv_18_var.is_owned) {
			ret_conv_18_ref |= 1;
		}
		ret_arr_ptr[s] = ret_conv_18_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1sync_1routing_1table(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t init) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKInit init_conv;
	init_conv.inner = (void*)(init & (~1));
	init_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(init_conv);
	(this_arg_conv->sync_routing_table)(this_arg_conv->this_arg, their_node_id_ref, &init_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1handle_1reply_1channel_1range(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKReplyChannelRange msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ReplyChannelRange_clone(&msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_reply_channel_range)(this_arg_conv->this_arg, their_node_id_ref, msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1handle_1reply_1short_1channel_1ids_1end(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKReplyShortChannelIdsEnd msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ReplyShortChannelIdsEnd_clone(&msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_reply_short_channel_ids_end)(this_arg_conv->this_arg, their_node_id_ref, msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1handle_1query_1channel_1range(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKQueryChannelRange msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = QueryChannelRange_clone(&msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_query_channel_range)(this_arg_conv->this_arg, their_node_id_ref, msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1handle_1query_1short_1channel_1ids(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t msg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRoutingMessageHandler* this_arg_conv = (LDKRoutingMessageHandler*)this_arg_ptr;
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	LDKQueryShortChannelIds msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = QueryShortChannelIds_clone(&msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_query_short_channel_ids)(this_arg_conv->this_arg, their_node_id_ref, msg_conv);
	return (uintptr_t)ret_conv;
}

typedef struct LDKCustomMessageReader_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID read_meth;
} LDKCustomMessageReader_JCalls;
static void LDKCustomMessageReader_JCalls_free(void* this_arg) {
	LDKCustomMessageReader_JCalls *j_calls = (LDKCustomMessageReader_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_COption_TypeZDecodeErrorZ read_LDKCustomMessageReader_jcall(const void* this_arg, uint16_t message_type, LDKu8slice buffer) {
	LDKCustomMessageReader_JCalls *j_calls = (LDKCustomMessageReader_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKu8slice buffer_var = buffer;
	int8_tArray buffer_arr = (*env)->NewByteArray(env, buffer_var.datalen);
	(*env)->SetByteArrayRegion(env, buffer_arr, 0, buffer_var.datalen, buffer_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->read_meth, message_type, buffer_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to read in LDKCustomMessageReader from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_COption_TypeZDecodeErrorZ ret_conv = *(LDKCResult_COption_TypeZDecodeErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKCustomMessageReader_JCalls_cloned(LDKCustomMessageReader* new_obj) {
	LDKCustomMessageReader_JCalls *j_calls = (LDKCustomMessageReader_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKCustomMessageReader LDKCustomMessageReader_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKCustomMessageReader_JCalls *calls = MALLOC(sizeof(LDKCustomMessageReader_JCalls), "LDKCustomMessageReader_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->read_meth = (*env)->GetMethodID(env, c, "read", "(S[B)J");
	CHECK(calls->read_meth != NULL);

	LDKCustomMessageReader ret = {
		.this_arg = (void*) calls,
		.read = read_LDKCustomMessageReader_jcall,
		.free = LDKCustomMessageReader_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKCustomMessageReader_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKCustomMessageReader *res_ptr = MALLOC(sizeof(LDKCustomMessageReader), "LDKCustomMessageReader");
	*res_ptr = LDKCustomMessageReader_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CustomMessageReader_1read(JNIEnv *env, jclass clz, int64_t this_arg, int16_t message_type, int8_tArray buffer) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKCustomMessageReader* this_arg_conv = (LDKCustomMessageReader*)this_arg_ptr;
	LDKu8slice buffer_ref;
	buffer_ref.datalen = (*env)->GetArrayLength(env, buffer);
	buffer_ref.data = (*env)->GetByteArrayElements (env, buffer, NULL);
	LDKCResult_COption_TypeZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_TypeZDecodeErrorZ), "LDKCResult_COption_TypeZDecodeErrorZ");
	*ret_conv = (this_arg_conv->read)(this_arg_conv->this_arg, message_type, buffer_ref);
	(*env)->ReleaseByteArrayElements(env, buffer, (int8_t*)buffer_ref.data, 0);
	return (uintptr_t)ret_conv;
}

typedef struct LDKCustomMessageHandler_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	LDKCustomMessageReader_JCalls* CustomMessageReader;
	jmethodID handle_custom_message_meth;
	jmethodID get_and_clear_pending_msg_meth;
} LDKCustomMessageHandler_JCalls;
static void LDKCustomMessageHandler_JCalls_free(void* this_arg) {
	LDKCustomMessageHandler_JCalls *j_calls = (LDKCustomMessageHandler_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_NoneLightningErrorZ handle_custom_message_LDKCustomMessageHandler_jcall(const void* this_arg, LDKType msg, LDKPublicKey sender_node_id) {
	LDKCustomMessageHandler_JCalls *j_calls = (LDKCustomMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKType* msg_ret = MALLOC(sizeof(LDKType), "LDKType");
	*msg_ret = msg;
	int8_tArray sender_node_id_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, sender_node_id_arr, 0, 33, sender_node_id.compressed_form);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->handle_custom_message_meth, (uintptr_t)msg_ret, sender_node_id_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to handle_custom_message in LDKCustomMessageHandler from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneLightningErrorZ ret_conv = *(LDKCResult_NoneLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCVec_C2Tuple_PublicKeyTypeZZ get_and_clear_pending_msg_LDKCustomMessageHandler_jcall(const void* this_arg) {
	LDKCustomMessageHandler_JCalls *j_calls = (LDKCustomMessageHandler_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->get_and_clear_pending_msg_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to get_and_clear_pending_msg in LDKCustomMessageHandler from rust threw an exception.");
	}
	LDKCVec_C2Tuple_PublicKeyTypeZZ ret_constr;
	ret_constr.datalen = (*env)->GetArrayLength(env, ret);
	if (ret_constr.datalen > 0)
		ret_constr.data = MALLOC(ret_constr.datalen * sizeof(LDKC2Tuple_PublicKeyTypeZ), "LDKCVec_C2Tuple_PublicKeyTypeZZ Elements");
	else
		ret_constr.data = NULL;
	int64_t* ret_vals = (*env)->GetLongArrayElements (env, ret, NULL);
	for (size_t z = 0; z < ret_constr.datalen; z++) {
		int64_t ret_conv_25 = ret_vals[z];
		void* ret_conv_25_ptr = (void*)(((uintptr_t)ret_conv_25) & ~1);
		CHECK_ACCESS(ret_conv_25_ptr);
		LDKC2Tuple_PublicKeyTypeZ ret_conv_25_conv = *(LDKC2Tuple_PublicKeyTypeZ*)(ret_conv_25_ptr);
		FREE((void*)ret_conv_25);
		ret_constr.data[z] = ret_conv_25_conv;
	}
	(*env)->ReleaseLongArrayElements(env, ret, ret_vals, 0);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_constr;
}
static void LDKCustomMessageHandler_JCalls_cloned(LDKCustomMessageHandler* new_obj) {
	LDKCustomMessageHandler_JCalls *j_calls = (LDKCustomMessageHandler_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
	atomic_fetch_add_explicit(&j_calls->CustomMessageReader->refcnt, 1, memory_order_release);
}
static inline LDKCustomMessageHandler LDKCustomMessageHandler_init (JNIEnv *env, jclass clz, jobject o, jobject CustomMessageReader) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKCustomMessageHandler_JCalls *calls = MALLOC(sizeof(LDKCustomMessageHandler_JCalls), "LDKCustomMessageHandler_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->handle_custom_message_meth = (*env)->GetMethodID(env, c, "handle_custom_message", "(J[B)J");
	CHECK(calls->handle_custom_message_meth != NULL);
	calls->get_and_clear_pending_msg_meth = (*env)->GetMethodID(env, c, "get_and_clear_pending_msg", "()[J");
	CHECK(calls->get_and_clear_pending_msg_meth != NULL);

	LDKCustomMessageHandler ret = {
		.this_arg = (void*) calls,
		.handle_custom_message = handle_custom_message_LDKCustomMessageHandler_jcall,
		.get_and_clear_pending_msg = get_and_clear_pending_msg_LDKCustomMessageHandler_jcall,
		.free = LDKCustomMessageHandler_JCalls_free,
		.CustomMessageReader = LDKCustomMessageReader_init(env, clz, CustomMessageReader),
	};
	calls->CustomMessageReader = ret.CustomMessageReader.this_arg;
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKCustomMessageHandler_1new(JNIEnv *env, jclass clz, jobject o, jobject CustomMessageReader) {
	LDKCustomMessageHandler *res_ptr = MALLOC(sizeof(LDKCustomMessageHandler), "LDKCustomMessageHandler");
	*res_ptr = LDKCustomMessageHandler_init(env, clz, o, CustomMessageReader);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKCustomMessageHandler_1get_1CustomMessageReader(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCustomMessageHandler *inp = (LDKCustomMessageHandler *)(arg & ~1);
	uint64_t res_ptr = (uint64_t)&inp->CustomMessageReader;
	DO_ASSERT((res_ptr & 1) == 0);
	return (int64_t)(res_ptr | 1);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CustomMessageHandler_1handle_1custom_1message(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg, int8_tArray sender_node_id) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKCustomMessageHandler* this_arg_conv = (LDKCustomMessageHandler*)this_arg_ptr;
	void* msg_ptr = (void*)(((uintptr_t)msg) & ~1);
	CHECK_ACCESS(msg_ptr);
	LDKType msg_conv = *(LDKType*)(msg_ptr);
	if (msg_conv.free == LDKType_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKType_JCalls_cloned(&msg_conv);
	}
	LDKPublicKey sender_node_id_ref;
	CHECK((*env)->GetArrayLength(env, sender_node_id) == 33);
	(*env)->GetByteArrayRegion(env, sender_node_id, 0, 33, sender_node_id_ref.compressed_form);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = (this_arg_conv->handle_custom_message)(this_arg_conv->this_arg, msg_conv, sender_node_id_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_CustomMessageHandler_1get_1and_1clear_1pending_1msg(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKCustomMessageHandler* this_arg_conv = (LDKCustomMessageHandler*)this_arg_ptr;
	LDKCVec_C2Tuple_PublicKeyTypeZZ ret_var = (this_arg_conv->get_and_clear_pending_msg)(this_arg_conv->this_arg);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t z = 0; z < ret_var.datalen; z++) {
		LDKC2Tuple_PublicKeyTypeZ* ret_conv_25_conv = MALLOC(sizeof(LDKC2Tuple_PublicKeyTypeZ), "LDKC2Tuple_PublicKeyTypeZ");
		*ret_conv_25_conv = ret_var.data[z];
		ret_arr_ptr[z] = ((uintptr_t)ret_conv_25_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

typedef struct LDKSocketDescriptor_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID send_data_meth;
	jmethodID disconnect_socket_meth;
	jmethodID eq_meth;
	jmethodID hash_meth;
} LDKSocketDescriptor_JCalls;
static void LDKSocketDescriptor_JCalls_free(void* this_arg) {
	LDKSocketDescriptor_JCalls *j_calls = (LDKSocketDescriptor_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
uintptr_t send_data_LDKSocketDescriptor_jcall(void* this_arg, LDKu8slice data, bool resume_read) {
	LDKSocketDescriptor_JCalls *j_calls = (LDKSocketDescriptor_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKu8slice data_var = data;
	int8_tArray data_arr = (*env)->NewByteArray(env, data_var.datalen);
	(*env)->SetByteArrayRegion(env, data_arr, 0, data_var.datalen, data_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_t ret = (*env)->CallLongMethod(env, obj, j_calls->send_data_meth, data_arr, resume_read);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to send_data in LDKSocketDescriptor from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret;
}
void disconnect_socket_LDKSocketDescriptor_jcall(void* this_arg) {
	LDKSocketDescriptor_JCalls *j_calls = (LDKSocketDescriptor_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->disconnect_socket_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to disconnect_socket in LDKSocketDescriptor from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
bool eq_LDKSocketDescriptor_jcall(const void* this_arg, const LDKSocketDescriptor * other_arg) {
	LDKSocketDescriptor_JCalls *j_calls = (LDKSocketDescriptor_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKSocketDescriptor *other_arg_clone = MALLOC(sizeof(LDKSocketDescriptor), "LDKSocketDescriptor");
	*other_arg_clone = SocketDescriptor_clone(other_arg);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	jboolean ret = (*env)->CallBooleanMethod(env, obj, j_calls->eq_meth, (uintptr_t)other_arg_clone);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to eq in LDKSocketDescriptor from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret;
}
uint64_t hash_LDKSocketDescriptor_jcall(const void* this_arg) {
	LDKSocketDescriptor_JCalls *j_calls = (LDKSocketDescriptor_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_t ret = (*env)->CallLongMethod(env, obj, j_calls->hash_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to hash in LDKSocketDescriptor from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret;
}
static void LDKSocketDescriptor_JCalls_cloned(LDKSocketDescriptor* new_obj) {
	LDKSocketDescriptor_JCalls *j_calls = (LDKSocketDescriptor_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKSocketDescriptor LDKSocketDescriptor_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKSocketDescriptor_JCalls *calls = MALLOC(sizeof(LDKSocketDescriptor_JCalls), "LDKSocketDescriptor_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->send_data_meth = (*env)->GetMethodID(env, c, "send_data", "([BZ)J");
	CHECK(calls->send_data_meth != NULL);
	calls->disconnect_socket_meth = (*env)->GetMethodID(env, c, "disconnect_socket", "()V");
	CHECK(calls->disconnect_socket_meth != NULL);
	calls->eq_meth = (*env)->GetMethodID(env, c, "eq", "(J)Z");
	CHECK(calls->eq_meth != NULL);
	calls->hash_meth = (*env)->GetMethodID(env, c, "hash", "()J");
	CHECK(calls->hash_meth != NULL);

	LDKSocketDescriptor ret = {
		.this_arg = (void*) calls,
		.send_data = send_data_LDKSocketDescriptor_jcall,
		.disconnect_socket = disconnect_socket_LDKSocketDescriptor_jcall,
		.eq = eq_LDKSocketDescriptor_jcall,
		.hash = hash_LDKSocketDescriptor_jcall,
		.cloned = LDKSocketDescriptor_JCalls_cloned,
		.free = LDKSocketDescriptor_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKSocketDescriptor_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKSocketDescriptor *res_ptr = MALLOC(sizeof(LDKSocketDescriptor), "LDKSocketDescriptor");
	*res_ptr = LDKSocketDescriptor_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SocketDescriptor_1send_1data(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray data, jboolean resume_read) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKSocketDescriptor* this_arg_conv = (LDKSocketDescriptor*)this_arg_ptr;
	LDKu8slice data_ref;
	data_ref.datalen = (*env)->GetArrayLength(env, data);
	data_ref.data = (*env)->GetByteArrayElements (env, data, NULL);
	int64_t ret_val = (this_arg_conv->send_data)(this_arg_conv->this_arg, data_ref, resume_read);
	(*env)->ReleaseByteArrayElements(env, data, (int8_t*)data_ref.data, 0);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_SocketDescriptor_1disconnect_1socket(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKSocketDescriptor* this_arg_conv = (LDKSocketDescriptor*)this_arg_ptr;
	(this_arg_conv->disconnect_socket)(this_arg_conv->this_arg);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SocketDescriptor_1hash(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKSocketDescriptor* this_arg_conv = (LDKSocketDescriptor*)this_arg_ptr;
	int64_t ret_val = (this_arg_conv->hash)(this_arg_conv->this_arg);
	return ret_val;
}

static jclass LDKEffectiveCapacity_ExactLiquidity_class = NULL;
static jmethodID LDKEffectiveCapacity_ExactLiquidity_meth = NULL;
static jclass LDKEffectiveCapacity_MaximumHTLC_class = NULL;
static jmethodID LDKEffectiveCapacity_MaximumHTLC_meth = NULL;
static jclass LDKEffectiveCapacity_Total_class = NULL;
static jmethodID LDKEffectiveCapacity_Total_meth = NULL;
static jclass LDKEffectiveCapacity_Infinite_class = NULL;
static jmethodID LDKEffectiveCapacity_Infinite_meth = NULL;
static jclass LDKEffectiveCapacity_Unknown_class = NULL;
static jmethodID LDKEffectiveCapacity_Unknown_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKEffectiveCapacity_init (JNIEnv *env, jclass clz) {
	LDKEffectiveCapacity_ExactLiquidity_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEffectiveCapacity$ExactLiquidity"));
	CHECK(LDKEffectiveCapacity_ExactLiquidity_class != NULL);
	LDKEffectiveCapacity_ExactLiquidity_meth = (*env)->GetMethodID(env, LDKEffectiveCapacity_ExactLiquidity_class, "<init>", "(J)V");
	CHECK(LDKEffectiveCapacity_ExactLiquidity_meth != NULL);
	LDKEffectiveCapacity_MaximumHTLC_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEffectiveCapacity$MaximumHTLC"));
	CHECK(LDKEffectiveCapacity_MaximumHTLC_class != NULL);
	LDKEffectiveCapacity_MaximumHTLC_meth = (*env)->GetMethodID(env, LDKEffectiveCapacity_MaximumHTLC_class, "<init>", "(J)V");
	CHECK(LDKEffectiveCapacity_MaximumHTLC_meth != NULL);
	LDKEffectiveCapacity_Total_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEffectiveCapacity$Total"));
	CHECK(LDKEffectiveCapacity_Total_class != NULL);
	LDKEffectiveCapacity_Total_meth = (*env)->GetMethodID(env, LDKEffectiveCapacity_Total_class, "<init>", "(J)V");
	CHECK(LDKEffectiveCapacity_Total_meth != NULL);
	LDKEffectiveCapacity_Infinite_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEffectiveCapacity$Infinite"));
	CHECK(LDKEffectiveCapacity_Infinite_class != NULL);
	LDKEffectiveCapacity_Infinite_meth = (*env)->GetMethodID(env, LDKEffectiveCapacity_Infinite_class, "<init>", "()V");
	CHECK(LDKEffectiveCapacity_Infinite_meth != NULL);
	LDKEffectiveCapacity_Unknown_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKEffectiveCapacity$Unknown"));
	CHECK(LDKEffectiveCapacity_Unknown_class != NULL);
	LDKEffectiveCapacity_Unknown_meth = (*env)->GetMethodID(env, LDKEffectiveCapacity_Unknown_class, "<init>", "()V");
	CHECK(LDKEffectiveCapacity_Unknown_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKEffectiveCapacity_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKEffectiveCapacity *obj = (LDKEffectiveCapacity*)(ptr & ~1);
	switch(obj->tag) {
		case LDKEffectiveCapacity_ExactLiquidity: {
			return (*env)->NewObject(env, LDKEffectiveCapacity_ExactLiquidity_class, LDKEffectiveCapacity_ExactLiquidity_meth, obj->exact_liquidity.liquidity_msat);
		}
		case LDKEffectiveCapacity_MaximumHTLC: {
			return (*env)->NewObject(env, LDKEffectiveCapacity_MaximumHTLC_class, LDKEffectiveCapacity_MaximumHTLC_meth, obj->maximum_htlc.amount_msat);
		}
		case LDKEffectiveCapacity_Total: {
			return (*env)->NewObject(env, LDKEffectiveCapacity_Total_class, LDKEffectiveCapacity_Total_meth, obj->total.capacity_msat);
		}
		case LDKEffectiveCapacity_Infinite: {
			return (*env)->NewObject(env, LDKEffectiveCapacity_Infinite_class, LDKEffectiveCapacity_Infinite_meth);
		}
		case LDKEffectiveCapacity_Unknown: {
			return (*env)->NewObject(env, LDKEffectiveCapacity_Unknown_class, LDKEffectiveCapacity_Unknown_meth);
		}
		default: abort();
	}
}
typedef struct LDKScore_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID channel_penalty_msat_meth;
	jmethodID payment_path_failed_meth;
	jmethodID payment_path_successful_meth;
	jmethodID write_meth;
} LDKScore_JCalls;
static void LDKScore_JCalls_free(void* this_arg) {
	LDKScore_JCalls *j_calls = (LDKScore_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
uint64_t channel_penalty_msat_LDKScore_jcall(const void* this_arg, uint64_t short_channel_id, uint64_t send_amt_msat, uint64_t capacity_msat, const LDKNodeId * source, const LDKNodeId * target) {
	LDKScore_JCalls *j_calls = (LDKScore_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKNodeId source_var = *source;
	uintptr_t source_ref = 0;
	source_var = NodeId_clone(source);
	CHECK((((uintptr_t)source_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&source_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(source_var);
	source_ref = (uintptr_t)source_var.inner;
	if (source_var.is_owned) {
		source_ref |= 1;
	}
	LDKNodeId target_var = *target;
	uintptr_t target_ref = 0;
	target_var = NodeId_clone(target);
	CHECK((((uintptr_t)target_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&target_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(target_var);
	target_ref = (uintptr_t)target_var.inner;
	if (target_var.is_owned) {
		target_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_t ret = (*env)->CallLongMethod(env, obj, j_calls->channel_penalty_msat_meth, short_channel_id, send_amt_msat, capacity_msat, source_ref, target_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to channel_penalty_msat in LDKScore from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret;
}
void payment_path_failed_LDKScore_jcall(void* this_arg, LDKCVec_RouteHopZ path, uint64_t short_channel_id) {
	LDKScore_JCalls *j_calls = (LDKScore_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKCVec_RouteHopZ path_var = path;
	int64_tArray path_arr = NULL;
	path_arr = (*env)->NewLongArray(env, path_var.datalen);
	int64_t *path_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, path_arr, NULL);
	for (size_t k = 0; k < path_var.datalen; k++) {
		LDKRouteHop path_conv_10_var = path_var.data[k];
		uintptr_t path_conv_10_ref = 0;
		CHECK((((uintptr_t)path_conv_10_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&path_conv_10_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_var);
		path_conv_10_ref = (uintptr_t)path_conv_10_var.inner;
		if (path_conv_10_var.is_owned) {
			path_conv_10_ref |= 1;
		}
		path_arr_ptr[k] = path_conv_10_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, path_arr, path_arr_ptr, 0);
	FREE(path_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->payment_path_failed_meth, path_arr, short_channel_id);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to payment_path_failed in LDKScore from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
void payment_path_successful_LDKScore_jcall(void* this_arg, LDKCVec_RouteHopZ path) {
	LDKScore_JCalls *j_calls = (LDKScore_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKCVec_RouteHopZ path_var = path;
	int64_tArray path_arr = NULL;
	path_arr = (*env)->NewLongArray(env, path_var.datalen);
	int64_t *path_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, path_arr, NULL);
	for (size_t k = 0; k < path_var.datalen; k++) {
		LDKRouteHop path_conv_10_var = path_var.data[k];
		uintptr_t path_conv_10_ref = 0;
		CHECK((((uintptr_t)path_conv_10_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&path_conv_10_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_var);
		path_conv_10_ref = (uintptr_t)path_conv_10_var.inner;
		if (path_conv_10_var.is_owned) {
			path_conv_10_ref |= 1;
		}
		path_arr_ptr[k] = path_conv_10_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, path_arr, path_arr_ptr, 0);
	FREE(path_var.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->payment_path_successful_meth, path_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to payment_path_successful in LDKScore from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
LDKCVec_u8Z write_LDKScore_jcall(const void* this_arg) {
	LDKScore_JCalls *j_calls = (LDKScore_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->write_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to write in LDKScore from rust threw an exception.");
	}
	LDKCVec_u8Z ret_ref;
	ret_ref.datalen = (*env)->GetArrayLength(env, ret);
	ret_ref.data = MALLOC(ret_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, ret, 0, ret_ref.datalen, ret_ref.data);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
static void LDKScore_JCalls_cloned(LDKScore* new_obj) {
	LDKScore_JCalls *j_calls = (LDKScore_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKScore LDKScore_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKScore_JCalls *calls = MALLOC(sizeof(LDKScore_JCalls), "LDKScore_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->channel_penalty_msat_meth = (*env)->GetMethodID(env, c, "channel_penalty_msat", "(JJJJJ)J");
	CHECK(calls->channel_penalty_msat_meth != NULL);
	calls->payment_path_failed_meth = (*env)->GetMethodID(env, c, "payment_path_failed", "([JJ)V");
	CHECK(calls->payment_path_failed_meth != NULL);
	calls->payment_path_successful_meth = (*env)->GetMethodID(env, c, "payment_path_successful", "([J)V");
	CHECK(calls->payment_path_successful_meth != NULL);
	calls->write_meth = (*env)->GetMethodID(env, c, "write", "()[B");
	CHECK(calls->write_meth != NULL);

	LDKScore ret = {
		.this_arg = (void*) calls,
		.channel_penalty_msat = channel_penalty_msat_LDKScore_jcall,
		.payment_path_failed = payment_path_failed_LDKScore_jcall,
		.payment_path_successful = payment_path_successful_LDKScore_jcall,
		.write = write_LDKScore_jcall,
		.free = LDKScore_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKScore_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKScore *res_ptr = MALLOC(sizeof(LDKScore), "LDKScore");
	*res_ptr = LDKScore_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Score_1channel_1penalty_1msat(JNIEnv *env, jclass clz, int64_t this_arg, int64_t short_channel_id, int64_t send_amt_msat, int64_t capacity_msat, int64_t source, int64_t target) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKScore* this_arg_conv = (LDKScore*)this_arg_ptr;
	LDKNodeId source_conv;
	source_conv.inner = (void*)(source & (~1));
	source_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(source_conv);
	LDKNodeId target_conv;
	target_conv.inner = (void*)(target & (~1));
	target_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(target_conv);
	int64_t ret_val = (this_arg_conv->channel_penalty_msat)(this_arg_conv->this_arg, short_channel_id, send_amt_msat, capacity_msat, &source_conv, &target_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Score_1payment_1path_1failed(JNIEnv *env, jclass clz, int64_t this_arg, int64_tArray path, int64_t short_channel_id) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKScore* this_arg_conv = (LDKScore*)this_arg_ptr;
	LDKCVec_RouteHopZ path_constr;
	path_constr.datalen = (*env)->GetArrayLength(env, path);
	if (path_constr.datalen > 0)
		path_constr.data = MALLOC(path_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
	else
		path_constr.data = NULL;
	int64_t* path_vals = (*env)->GetLongArrayElements (env, path, NULL);
	for (size_t k = 0; k < path_constr.datalen; k++) {
		int64_t path_conv_10 = path_vals[k];
		LDKRouteHop path_conv_10_conv;
		path_conv_10_conv.inner = (void*)(path_conv_10 & (~1));
		path_conv_10_conv.is_owned = (path_conv_10 & 1) || (path_conv_10 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_conv);
		path_conv_10_conv = RouteHop_clone(&path_conv_10_conv);
		path_constr.data[k] = path_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, path, path_vals, 0);
	(this_arg_conv->payment_path_failed)(this_arg_conv->this_arg, path_constr, short_channel_id);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Score_1payment_1path_1successful(JNIEnv *env, jclass clz, int64_t this_arg, int64_tArray path) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKScore* this_arg_conv = (LDKScore*)this_arg_ptr;
	LDKCVec_RouteHopZ path_constr;
	path_constr.datalen = (*env)->GetArrayLength(env, path);
	if (path_constr.datalen > 0)
		path_constr.data = MALLOC(path_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
	else
		path_constr.data = NULL;
	int64_t* path_vals = (*env)->GetLongArrayElements (env, path, NULL);
	for (size_t k = 0; k < path_constr.datalen; k++) {
		int64_t path_conv_10 = path_vals[k];
		LDKRouteHop path_conv_10_conv;
		path_conv_10_conv.inner = (void*)(path_conv_10 & (~1));
		path_conv_10_conv.is_owned = (path_conv_10 & 1) || (path_conv_10 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_conv);
		path_conv_10_conv = RouteHop_clone(&path_conv_10_conv);
		path_constr.data[k] = path_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, path, path_vals, 0);
	(this_arg_conv->payment_path_successful)(this_arg_conv->this_arg, path_constr);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Score_1write(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKScore* this_arg_conv = (LDKScore*)this_arg_ptr;
	LDKCVec_u8Z ret_var = (this_arg_conv->write)(this_arg_conv->this_arg);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

typedef struct LDKLockableScore_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID lock_meth;
} LDKLockableScore_JCalls;
static void LDKLockableScore_JCalls_free(void* this_arg) {
	LDKLockableScore_JCalls *j_calls = (LDKLockableScore_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKScore lock_LDKLockableScore_jcall(const void* this_arg) {
	LDKLockableScore_JCalls *j_calls = (LDKLockableScore_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->lock_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to lock in LDKLockableScore from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKScore ret_conv = *(LDKScore*)(ret_ptr);
	if (ret_conv.free == LDKScore_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKScore_JCalls_cloned(&ret_conv);
	}// WARNING: we may need a move here but no clone is available for LDKScore
	
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKLockableScore_JCalls_cloned(LDKLockableScore* new_obj) {
	LDKLockableScore_JCalls *j_calls = (LDKLockableScore_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKLockableScore LDKLockableScore_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKLockableScore_JCalls *calls = MALLOC(sizeof(LDKLockableScore_JCalls), "LDKLockableScore_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->lock_meth = (*env)->GetMethodID(env, c, "lock", "()J");
	CHECK(calls->lock_meth != NULL);

	LDKLockableScore ret = {
		.this_arg = (void*) calls,
		.lock = lock_LDKLockableScore_jcall,
		.free = LDKLockableScore_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKLockableScore_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKLockableScore *res_ptr = MALLOC(sizeof(LDKLockableScore), "LDKLockableScore");
	*res_ptr = LDKLockableScore_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LockableScore_1lock(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKLockableScore* this_arg_conv = (LDKLockableScore*)this_arg_ptr;
	LDKScore* ret_ret = MALLOC(sizeof(LDKScore), "LDKScore");
	*ret_ret = (this_arg_conv->lock)(this_arg_conv->this_arg);
	return (uintptr_t)ret_ret;
}

typedef struct LDKChannelManagerPersister_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID persist_manager_meth;
} LDKChannelManagerPersister_JCalls;
static void LDKChannelManagerPersister_JCalls_free(void* this_arg) {
	LDKChannelManagerPersister_JCalls *j_calls = (LDKChannelManagerPersister_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_NoneErrorZ persist_manager_LDKChannelManagerPersister_jcall(const void* this_arg, const LDKChannelManager * channel_manager) {
	LDKChannelManagerPersister_JCalls *j_calls = (LDKChannelManagerPersister_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKChannelManager channel_manager_var = *channel_manager;
	uintptr_t channel_manager_ref = 0;
	// WARNING: we may need a move here but no clone is available for LDKChannelManager
	CHECK((((uintptr_t)channel_manager_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&channel_manager_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_manager_var);
	channel_manager_ref = (uintptr_t)channel_manager_var.inner;
	if (channel_manager_var.is_owned) {
		channel_manager_ref |= 1;
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->persist_manager_meth, channel_manager_ref);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to persist_manager in LDKChannelManagerPersister from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NoneErrorZ ret_conv = *(LDKCResult_NoneErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKChannelManagerPersister_JCalls_cloned(LDKChannelManagerPersister* new_obj) {
	LDKChannelManagerPersister_JCalls *j_calls = (LDKChannelManagerPersister_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKChannelManagerPersister LDKChannelManagerPersister_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKChannelManagerPersister_JCalls *calls = MALLOC(sizeof(LDKChannelManagerPersister_JCalls), "LDKChannelManagerPersister_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->persist_manager_meth = (*env)->GetMethodID(env, c, "persist_manager", "(J)J");
	CHECK(calls->persist_manager_meth != NULL);

	LDKChannelManagerPersister ret = {
		.this_arg = (void*) calls,
		.persist_manager = persist_manager_LDKChannelManagerPersister_jcall,
		.free = LDKChannelManagerPersister_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKChannelManagerPersister_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKChannelManagerPersister *res_ptr = MALLOC(sizeof(LDKChannelManagerPersister), "LDKChannelManagerPersister");
	*res_ptr = LDKChannelManagerPersister_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerPersister_1persist_1manager(JNIEnv *env, jclass clz, int64_t this_arg, int64_t channel_manager) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKChannelManagerPersister* this_arg_conv = (LDKChannelManagerPersister*)this_arg_ptr;
	LDKChannelManager channel_manager_conv;
	channel_manager_conv.inner = (void*)(channel_manager & (~1));
	channel_manager_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_manager_conv);
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = (this_arg_conv->persist_manager)(this_arg_conv->this_arg, &channel_manager_conv);
	return (uintptr_t)ret_conv;
}

static jclass LDKFallback_SegWitProgram_class = NULL;
static jmethodID LDKFallback_SegWitProgram_meth = NULL;
static jclass LDKFallback_PubKeyHash_class = NULL;
static jmethodID LDKFallback_PubKeyHash_meth = NULL;
static jclass LDKFallback_ScriptHash_class = NULL;
static jmethodID LDKFallback_ScriptHash_meth = NULL;
JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_00024LDKFallback_init (JNIEnv *env, jclass clz) {
	LDKFallback_SegWitProgram_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKFallback$SegWitProgram"));
	CHECK(LDKFallback_SegWitProgram_class != NULL);
	LDKFallback_SegWitProgram_meth = (*env)->GetMethodID(env, LDKFallback_SegWitProgram_class, "<init>", "(B[B)V");
	CHECK(LDKFallback_SegWitProgram_meth != NULL);
	LDKFallback_PubKeyHash_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKFallback$PubKeyHash"));
	CHECK(LDKFallback_PubKeyHash_class != NULL);
	LDKFallback_PubKeyHash_meth = (*env)->GetMethodID(env, LDKFallback_PubKeyHash_class, "<init>", "([B)V");
	CHECK(LDKFallback_PubKeyHash_meth != NULL);
	LDKFallback_ScriptHash_class =
		(*env)->NewGlobalRef(env, (*env)->FindClass(env, "org/ldk/impl/bindings$LDKFallback$ScriptHash"));
	CHECK(LDKFallback_ScriptHash_class != NULL);
	LDKFallback_ScriptHash_meth = (*env)->GetMethodID(env, LDKFallback_ScriptHash_class, "<init>", "([B)V");
	CHECK(LDKFallback_ScriptHash_meth != NULL);
}
JNIEXPORT jobject JNICALL Java_org_ldk_impl_bindings_LDKFallback_1ref_1from_1ptr(JNIEnv *env, jclass clz, int64_t ptr) {
	LDKFallback *obj = (LDKFallback*)(ptr & ~1);
	switch(obj->tag) {
		case LDKFallback_SegWitProgram: {
			uint8_t version_val = obj->seg_wit_program.version._0;
			LDKCVec_u8Z program_var = obj->seg_wit_program.program;
			int8_tArray program_arr = (*env)->NewByteArray(env, program_var.datalen);
			(*env)->SetByteArrayRegion(env, program_arr, 0, program_var.datalen, program_var.data);
			return (*env)->NewObject(env, LDKFallback_SegWitProgram_class, LDKFallback_SegWitProgram_meth, version_val, program_arr);
		}
		case LDKFallback_PubKeyHash: {
			int8_tArray pub_key_hash_arr = (*env)->NewByteArray(env, 20);
			(*env)->SetByteArrayRegion(env, pub_key_hash_arr, 0, 20, obj->pub_key_hash.data);
			return (*env)->NewObject(env, LDKFallback_PubKeyHash_class, LDKFallback_PubKeyHash_meth, pub_key_hash_arr);
		}
		case LDKFallback_ScriptHash: {
			int8_tArray script_hash_arr = (*env)->NewByteArray(env, 20);
			(*env)->SetByteArrayRegion(env, script_hash_arr, 0, 20, obj->script_hash.data);
			return (*env)->NewObject(env, LDKFallback_ScriptHash_class, LDKFallback_ScriptHash_meth, script_hash_arr);
		}
		default: abort();
	}
}
typedef struct LDKPayer_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID node_id_meth;
	jmethodID first_hops_meth;
	jmethodID send_payment_meth;
	jmethodID send_spontaneous_payment_meth;
	jmethodID retry_payment_meth;
	jmethodID abandon_payment_meth;
} LDKPayer_JCalls;
static void LDKPayer_JCalls_free(void* this_arg) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKPublicKey node_id_LDKPayer_jcall(const void* this_arg) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int8_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->node_id_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to node_id in LDKPayer from rust threw an exception.");
	}
	LDKPublicKey ret_ref;
	CHECK((*env)->GetArrayLength(env, ret) == 33);
	(*env)->GetByteArrayRegion(env, ret, 0, 33, ret_ref.compressed_form);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_ref;
}
LDKCVec_ChannelDetailsZ first_hops_LDKPayer_jcall(const void* this_arg) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	int64_tArray ret = (*env)->CallObjectMethod(env, obj, j_calls->first_hops_meth);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to first_hops in LDKPayer from rust threw an exception.");
	}
	LDKCVec_ChannelDetailsZ ret_constr;
	ret_constr.datalen = (*env)->GetArrayLength(env, ret);
	if (ret_constr.datalen > 0)
		ret_constr.data = MALLOC(ret_constr.datalen * sizeof(LDKChannelDetails), "LDKCVec_ChannelDetailsZ Elements");
	else
		ret_constr.data = NULL;
	int64_t* ret_vals = (*env)->GetLongArrayElements (env, ret, NULL);
	for (size_t q = 0; q < ret_constr.datalen; q++) {
		int64_t ret_conv_16 = ret_vals[q];
		LDKChannelDetails ret_conv_16_conv;
		ret_conv_16_conv.inner = (void*)(ret_conv_16 & (~1));
		ret_conv_16_conv.is_owned = (ret_conv_16 & 1) || (ret_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_16_conv);
		ret_constr.data[q] = ret_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, ret, ret_vals, 0);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_constr;
}
LDKCResult_PaymentIdPaymentSendFailureZ send_payment_LDKPayer_jcall(const void* this_arg, const LDKRoute * route, LDKThirtyTwoBytes payment_hash, LDKThirtyTwoBytes payment_secret) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKRoute route_var = *route;
	uintptr_t route_ref = 0;
	route_var = Route_clone(route);
	CHECK((((uintptr_t)route_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&route_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_var);
	route_ref = (uintptr_t)route_var.inner;
	if (route_var.is_owned) {
		route_ref |= 1;
	}
	int8_tArray payment_hash_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, payment_hash_arr, 0, 32, payment_hash.data);
	int8_tArray payment_secret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, payment_secret_arr, 0, 32, payment_secret.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->send_payment_meth, route_ref, payment_hash_arr, payment_secret_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to send_payment in LDKPayer from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_PaymentIdPaymentSendFailureZ ret_conv = *(LDKCResult_PaymentIdPaymentSendFailureZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_PaymentIdPaymentSendFailureZ send_spontaneous_payment_LDKPayer_jcall(const void* this_arg, const LDKRoute * route, LDKThirtyTwoBytes payment_preimage) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKRoute route_var = *route;
	uintptr_t route_ref = 0;
	route_var = Route_clone(route);
	CHECK((((uintptr_t)route_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&route_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_var);
	route_ref = (uintptr_t)route_var.inner;
	if (route_var.is_owned) {
		route_ref |= 1;
	}
	int8_tArray payment_preimage_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, payment_preimage_arr, 0, 32, payment_preimage.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->send_spontaneous_payment_meth, route_ref, payment_preimage_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to send_spontaneous_payment in LDKPayer from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_PaymentIdPaymentSendFailureZ ret_conv = *(LDKCResult_PaymentIdPaymentSendFailureZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
LDKCResult_NonePaymentSendFailureZ retry_payment_LDKPayer_jcall(const void* this_arg, const LDKRoute * route, LDKThirtyTwoBytes payment_id) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	LDKRoute route_var = *route;
	uintptr_t route_ref = 0;
	route_var = Route_clone(route);
	CHECK((((uintptr_t)route_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&route_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_var);
	route_ref = (uintptr_t)route_var.inner;
	if (route_var.is_owned) {
		route_ref |= 1;
	}
	int8_tArray payment_id_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, payment_id_arr, 0, 32, payment_id.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->retry_payment_meth, route_ref, payment_id_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to retry_payment in LDKPayer from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_NonePaymentSendFailureZ ret_conv = *(LDKCResult_NonePaymentSendFailureZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
void abandon_payment_LDKPayer_jcall(const void* this_arg, LDKThirtyTwoBytes payment_id) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray payment_id_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, payment_id_arr, 0, 32, payment_id.data);
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	(*env)->CallVoidMethod(env, obj, j_calls->abandon_payment_meth, payment_id_arr);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to abandon_payment in LDKPayer from rust threw an exception.");
	}
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
}
static void LDKPayer_JCalls_cloned(LDKPayer* new_obj) {
	LDKPayer_JCalls *j_calls = (LDKPayer_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKPayer LDKPayer_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKPayer_JCalls *calls = MALLOC(sizeof(LDKPayer_JCalls), "LDKPayer_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->node_id_meth = (*env)->GetMethodID(env, c, "node_id", "()[B");
	CHECK(calls->node_id_meth != NULL);
	calls->first_hops_meth = (*env)->GetMethodID(env, c, "first_hops", "()[J");
	CHECK(calls->first_hops_meth != NULL);
	calls->send_payment_meth = (*env)->GetMethodID(env, c, "send_payment", "(J[B[B)J");
	CHECK(calls->send_payment_meth != NULL);
	calls->send_spontaneous_payment_meth = (*env)->GetMethodID(env, c, "send_spontaneous_payment", "(J[B)J");
	CHECK(calls->send_spontaneous_payment_meth != NULL);
	calls->retry_payment_meth = (*env)->GetMethodID(env, c, "retry_payment", "(J[B)J");
	CHECK(calls->retry_payment_meth != NULL);
	calls->abandon_payment_meth = (*env)->GetMethodID(env, c, "abandon_payment", "([B)V");
	CHECK(calls->abandon_payment_meth != NULL);

	LDKPayer ret = {
		.this_arg = (void*) calls,
		.node_id = node_id_LDKPayer_jcall,
		.first_hops = first_hops_LDKPayer_jcall,
		.send_payment = send_payment_LDKPayer_jcall,
		.send_spontaneous_payment = send_spontaneous_payment_LDKPayer_jcall,
		.retry_payment = retry_payment_LDKPayer_jcall,
		.abandon_payment = abandon_payment_LDKPayer_jcall,
		.free = LDKPayer_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKPayer_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKPayer *res_ptr = MALLOC(sizeof(LDKPayer), "LDKPayer");
	*res_ptr = LDKPayer_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Payer_1node_1id(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPayer* this_arg_conv = (LDKPayer*)this_arg_ptr;
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, (this_arg_conv->node_id)(this_arg_conv->this_arg).compressed_form);
	return ret_arr;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_Payer_1first_1hops(JNIEnv *env, jclass clz, int64_t this_arg) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPayer* this_arg_conv = (LDKPayer*)this_arg_ptr;
	LDKCVec_ChannelDetailsZ ret_var = (this_arg_conv->first_hops)(this_arg_conv->this_arg);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t q = 0; q < ret_var.datalen; q++) {
		LDKChannelDetails ret_conv_16_var = ret_var.data[q];
		uintptr_t ret_conv_16_ref = 0;
		CHECK((((uintptr_t)ret_conv_16_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_16_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_16_var);
		ret_conv_16_ref = (uintptr_t)ret_conv_16_var.inner;
		if (ret_conv_16_var.is_owned) {
			ret_conv_16_ref |= 1;
		}
		ret_arr_ptr[q] = ret_conv_16_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Payer_1send_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t route, int8_tArray payment_hash, int8_tArray payment_secret) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPayer* this_arg_conv = (LDKPayer*)this_arg_ptr;
	LDKRoute route_conv;
	route_conv.inner = (void*)(route & (~1));
	route_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_conv);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	LDKThirtyTwoBytes payment_secret_ref;
	CHECK((*env)->GetArrayLength(env, payment_secret) == 32);
	(*env)->GetByteArrayRegion(env, payment_secret, 0, 32, payment_secret_ref.data);
	LDKCResult_PaymentIdPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentSendFailureZ), "LDKCResult_PaymentIdPaymentSendFailureZ");
	*ret_conv = (this_arg_conv->send_payment)(this_arg_conv->this_arg, &route_conv, payment_hash_ref, payment_secret_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Payer_1send_1spontaneous_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t route, int8_tArray payment_preimage) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPayer* this_arg_conv = (LDKPayer*)this_arg_ptr;
	LDKRoute route_conv;
	route_conv.inner = (void*)(route & (~1));
	route_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_conv);
	LDKThirtyTwoBytes payment_preimage_ref;
	CHECK((*env)->GetArrayLength(env, payment_preimage) == 32);
	(*env)->GetByteArrayRegion(env, payment_preimage, 0, 32, payment_preimage_ref.data);
	LDKCResult_PaymentIdPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentSendFailureZ), "LDKCResult_PaymentIdPaymentSendFailureZ");
	*ret_conv = (this_arg_conv->send_spontaneous_payment)(this_arg_conv->this_arg, &route_conv, payment_preimage_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Payer_1retry_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t route, int8_tArray payment_id) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPayer* this_arg_conv = (LDKPayer*)this_arg_ptr;
	LDKRoute route_conv;
	route_conv.inner = (void*)(route & (~1));
	route_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_conv);
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	LDKCResult_NonePaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePaymentSendFailureZ), "LDKCResult_NonePaymentSendFailureZ");
	*ret_conv = (this_arg_conv->retry_payment)(this_arg_conv->this_arg, &route_conv, payment_id_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Payer_1abandon_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_id) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKPayer* this_arg_conv = (LDKPayer*)this_arg_ptr;
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	(this_arg_conv->abandon_payment)(this_arg_conv->this_arg, payment_id_ref);
}

typedef struct LDKRouter_JCalls {
	atomic_size_t refcnt;
	JavaVM *vm;
	jweak o;
	jmethodID find_route_meth;
} LDKRouter_JCalls;
static void LDKRouter_JCalls_free(void* this_arg) {
	LDKRouter_JCalls *j_calls = (LDKRouter_JCalls*) this_arg;
	if (atomic_fetch_sub_explicit(&j_calls->refcnt, 1, memory_order_acquire) == 1) {
		JNIEnv *env;
		jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
		} else {
			DO_ASSERT(get_jenv_res == JNI_OK);
		}
		(*env)->DeleteWeakGlobalRef(env, j_calls->o);
		if (get_jenv_res == JNI_EDETACHED) {
			DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
		}
		FREE(j_calls);
	}
}
LDKCResult_RouteLightningErrorZ find_route_LDKRouter_jcall(const void* this_arg, LDKPublicKey payer, const LDKRouteParameters * route_params, const uint8_t (* payment_hash)[32], LDKCVec_ChannelDetailsZ * first_hops, const LDKScore * scorer) {
	LDKRouter_JCalls *j_calls = (LDKRouter_JCalls*) this_arg;
	JNIEnv *env;
	jint get_jenv_res = (*j_calls->vm)->GetEnv(j_calls->vm, (void**)&env, JNI_VERSION_1_6);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->AttachCurrentThread(j_calls->vm, (void**)&env, NULL) == JNI_OK);
	} else {
		DO_ASSERT(get_jenv_res == JNI_OK);
	}
	int8_tArray payer_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, payer_arr, 0, 33, payer.compressed_form);
	LDKRouteParameters route_params_var = *route_params;
	uintptr_t route_params_ref = 0;
	route_params_var = RouteParameters_clone(route_params);
	CHECK((((uintptr_t)route_params_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&route_params_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_params_var);
	route_params_ref = (uintptr_t)route_params_var.inner;
	if (route_params_var.is_owned) {
		route_params_ref |= 1;
	}
	int8_tArray payment_hash_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, payment_hash_arr, 0, 32, *payment_hash);
	LDKCVec_ChannelDetailsZ *first_hops_var_ptr = first_hops;
	int64_tArray first_hops_arr = NULL;
	if (first_hops != NULL) {
		LDKCVec_ChannelDetailsZ first_hops_var = *first_hops_var_ptr;
		first_hops_arr = (*env)->NewLongArray(env, first_hops_var.datalen);
		int64_t *first_hops_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, first_hops_arr, NULL);
		for (size_t q = 0; q < first_hops_var.datalen; q++) {
			LDKChannelDetails first_hops_conv_16_var = 	first_hops_var.data[q];
			uintptr_t first_hops_conv_16_ref = 0;
			CHECK((((uintptr_t)first_hops_conv_16_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&first_hops_conv_16_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(first_hops_conv_16_var);
			first_hops_conv_16_ref = (uintptr_t)first_hops_conv_16_var.inner;
			if (first_hops_conv_16_var.is_owned) {
				first_hops_conv_16_ref |= 1;
			}
			first_hops_arr_ptr[q] = first_hops_conv_16_ref;
		}
		(*env)->ReleasePrimitiveArrayCritical(env, first_hops_arr, first_hops_arr_ptr, 0);
	}
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_scorer = ((uintptr_t)scorer) | 1;
	jobject obj = (*env)->NewLocalRef(env, j_calls->o);
	CHECK(obj != NULL);
	uint64_t ret = (*env)->CallLongMethod(env, obj, j_calls->find_route_meth, payer_arr, route_params_ref, payment_hash_arr, first_hops_arr, ret_scorer);
	if (UNLIKELY((*env)->ExceptionCheck(env))) {
		(*env)->ExceptionDescribe(env);
		(*env)->FatalError(env, "A call to find_route in LDKRouter from rust threw an exception.");
	}
	void* ret_ptr = (void*)(((uintptr_t)ret) & ~1);
	CHECK_ACCESS(ret_ptr);
	LDKCResult_RouteLightningErrorZ ret_conv = *(LDKCResult_RouteLightningErrorZ*)(ret_ptr);
	FREE((void*)ret);
	if (get_jenv_res == JNI_EDETACHED) {
		DO_ASSERT((*j_calls->vm)->DetachCurrentThread(j_calls->vm) == JNI_OK);
	}
	return ret_conv;
}
static void LDKRouter_JCalls_cloned(LDKRouter* new_obj) {
	LDKRouter_JCalls *j_calls = (LDKRouter_JCalls*) new_obj->this_arg;
	atomic_fetch_add_explicit(&j_calls->refcnt, 1, memory_order_release);
}
static inline LDKRouter LDKRouter_init (JNIEnv *env, jclass clz, jobject o) {
	jclass c = (*env)->GetObjectClass(env, o);
	CHECK(c != NULL);
	LDKRouter_JCalls *calls = MALLOC(sizeof(LDKRouter_JCalls), "LDKRouter_JCalls");
	atomic_init(&calls->refcnt, 1);
	DO_ASSERT((*env)->GetJavaVM(env, &calls->vm) == 0);
	calls->o = (*env)->NewWeakGlobalRef(env, o);
	calls->find_route_meth = (*env)->GetMethodID(env, c, "find_route", "([BJ[B[JJ)J");
	CHECK(calls->find_route_meth != NULL);

	LDKRouter ret = {
		.this_arg = (void*) calls,
		.find_route = find_route_LDKRouter_jcall,
		.free = LDKRouter_JCalls_free,
	};
	return ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LDKRouter_1new(JNIEnv *env, jclass clz, jobject o) {
	LDKRouter *res_ptr = MALLOC(sizeof(LDKRouter), "LDKRouter");
	*res_ptr = LDKRouter_init(env, clz, o);
	return (uint64_t)res_ptr;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Router_1find_1route(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payer, int64_t route_params, int8_tArray payment_hash, int64_tArray first_hops, int64_t scorer) {
	void* this_arg_ptr = (void*)(((uintptr_t)this_arg) & ~1);
	if (!(this_arg & 1)) { CHECK_ACCESS(this_arg_ptr); }
	LDKRouter* this_arg_conv = (LDKRouter*)this_arg_ptr;
	LDKPublicKey payer_ref;
	CHECK((*env)->GetArrayLength(env, payer) == 33);
	(*env)->GetByteArrayRegion(env, payer, 0, 33, payer_ref.compressed_form);
	LDKRouteParameters route_params_conv;
	route_params_conv.inner = (void*)(route_params & (~1));
	route_params_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_params_conv);
	unsigned char payment_hash_arr[32];
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_arr);
	unsigned char (*payment_hash_ref)[32] = &payment_hash_arr;
	LDKCVec_ChannelDetailsZ first_hops_constr;
	LDKCVec_ChannelDetailsZ *first_hops_ptr = NULL;
	if (first_hops != NULL) {
		first_hops_constr.datalen = (*env)->GetArrayLength(env, first_hops);
		if (first_hops_constr.datalen > 0)
			first_hops_constr.data = MALLOC(first_hops_constr.datalen * sizeof(LDKChannelDetails), "LDKCVec_ChannelDetailsZ Elements");
		else
			first_hops_constr.data = NULL;
		int64_t* first_hops_vals = (*env)->GetLongArrayElements (env, first_hops, NULL);
		for (size_t q = 0; q < first_hops_constr.datalen; q++) {
			int64_t first_hops_conv_16 = first_hops_vals[q];
			LDKChannelDetails first_hops_conv_16_conv;
			first_hops_conv_16_conv.inner = (void*)(first_hops_conv_16 & (~1));
			first_hops_conv_16_conv.is_owned = (first_hops_conv_16 & 1) || (first_hops_conv_16 == 0);
			CHECK_INNER_FIELD_ACCESS_OR_NULL(first_hops_conv_16_conv);
			first_hops_constr.data[q] = first_hops_conv_16_conv;
		}
		(*env)->ReleaseLongArrayElements(env, first_hops, first_hops_vals, 0);
		first_hops_ptr = &first_hops_constr;
	}
	void* scorer_ptr = (void*)(((uintptr_t)scorer) & ~1);
	if (!(scorer & 1)) { CHECK_ACCESS(scorer_ptr); }
	LDKScore* scorer_conv = (LDKScore*)scorer_ptr;
	LDKCResult_RouteLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteLightningErrorZ), "LDKCResult_RouteLightningErrorZ");
	*ret_conv = (this_arg_conv->find_route)(this_arg_conv->this_arg, payer_ref, &route_params_conv, payment_hash_ref, first_hops_ptr, scorer_conv);
	if (first_hops_ptr != NULL) { FREE(first_hops_constr.data); }
	return (uintptr_t)ret_conv;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings__1ldk_1get_1compiled_1version(JNIEnv *env, jclass clz) {
	LDKStr ret_str = _ldk_get_compiled_version();
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings__1ldk_1c_1bindings_1get_1compiled_1version(JNIEnv *env, jclass clz) {
	LDKStr ret_str = _ldk_c_bindings_get_compiled_version();
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Transaction_1free(JNIEnv *env, jclass clz, int8_tArray _res) {
	LDKTransaction _res_ref;
	_res_ref.datalen = (*env)->GetArrayLength(env, _res);
	_res_ref.data = MALLOC(_res_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, _res, 0, _res_ref.datalen, _res_ref.data);
	_res_ref.data_is_owned = true;
	Transaction_free(_res_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxOut_1new(JNIEnv *env, jclass clz, int8_tArray script_pubkey, int64_t value) {
	LDKCVec_u8Z script_pubkey_ref;
	script_pubkey_ref.datalen = (*env)->GetArrayLength(env, script_pubkey);
	script_pubkey_ref.data = MALLOC(script_pubkey_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, script_pubkey, 0, script_pubkey_ref.datalen, script_pubkey_ref.data);
	LDKTxOut* ret_ref = MALLOC(sizeof(LDKTxOut), "LDKTxOut");
	*ret_ref = TxOut_new(script_pubkey_ref, value);
	return (uintptr_t)ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TxOut_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKTxOut _res_conv = *(LDKTxOut*)(_res_ptr);
	FREE((void*)_res);
	TxOut_free(_res_conv);
}

static inline uintptr_t TxOut_clone_ptr(LDKTxOut *NONNULL_PTR arg) {
	LDKTxOut* ret_ref = MALLOC(sizeof(LDKTxOut), "LDKTxOut");
	*ret_ref = TxOut_clone(arg);
	return (uintptr_t)ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxOut_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKTxOut* arg_conv = (LDKTxOut*)(arg & ~1);
	int64_t ret_val = TxOut_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxOut_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKTxOut* orig_conv = (LDKTxOut*)(orig & ~1);
	LDKTxOut* ret_ref = MALLOC(sizeof(LDKTxOut), "LDKTxOut");
	*ret_ref = TxOut_clone(orig_conv);
	return (uintptr_t)ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Str_1free(JNIEnv *env, jclass clz, jstring _res) {
	LDKStr dummy = { .chars = NULL, .len = 0, .chars_is_owned = false };
	Str_free(dummy);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = CResult_NoneNoneZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = CResult_NoneNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NoneNoneZ* o_conv = (LDKCResult_NoneNoneZ*)(o & ~1);
	jboolean ret_val = CResult_NoneNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NoneNoneZ _res_conv = *(LDKCResult_NoneNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NoneNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_NoneNoneZ_clone_ptr(LDKCResult_NoneNoneZ *NONNULL_PTR arg) {
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = CResult_NoneNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NoneNoneZ* arg_conv = (LDKCResult_NoneNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_NoneNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NoneNoneZ* orig_conv = (LDKCResult_NoneNoneZ*)(orig & ~1);
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = CResult_NoneNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCounterpartyCommitmentSecrets o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = CounterpartyCommitmentSecrets_clone(&o_conv);
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ), "LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ");
	*ret_conv = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ), "LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ");
	*ret_conv = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* o_conv = (LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ _res_conv = *(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ), "LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ");
	*ret_conv = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* arg_conv = (LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyCommitmentSecretsDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* orig_conv = (LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ*)(orig & ~1);
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ), "LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ");
	*ret_conv = CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKSecretKey o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.bytes);
	LDKCResult_SecretKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyErrorZ), "LDKCResult_SecretKeyErrorZ");
	*ret_conv = CResult_SecretKeyErrorZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKSecp256k1Error e_conv = LDKSecp256k1Error_from_java(env, e);
	LDKCResult_SecretKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyErrorZ), "LDKCResult_SecretKeyErrorZ");
	*ret_conv = CResult_SecretKeyErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_SecretKeyErrorZ* o_conv = (LDKCResult_SecretKeyErrorZ*)(o & ~1);
	jboolean ret_val = CResult_SecretKeyErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_SecretKeyErrorZ _res_conv = *(LDKCResult_SecretKeyErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_SecretKeyErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_SecretKeyErrorZ_clone_ptr(LDKCResult_SecretKeyErrorZ *NONNULL_PTR arg) {
	LDKCResult_SecretKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyErrorZ), "LDKCResult_SecretKeyErrorZ");
	*ret_conv = CResult_SecretKeyErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_SecretKeyErrorZ* arg_conv = (LDKCResult_SecretKeyErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_SecretKeyErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_SecretKeyErrorZ* orig_conv = (LDKCResult_SecretKeyErrorZ*)(orig & ~1);
	LDKCResult_SecretKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyErrorZ), "LDKCResult_SecretKeyErrorZ");
	*ret_conv = CResult_SecretKeyErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKPublicKey o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 33);
	(*env)->GetByteArrayRegion(env, o, 0, 33, o_ref.compressed_form);
	LDKCResult_PublicKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PublicKeyErrorZ), "LDKCResult_PublicKeyErrorZ");
	*ret_conv = CResult_PublicKeyErrorZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKSecp256k1Error e_conv = LDKSecp256k1Error_from_java(env, e);
	LDKCResult_PublicKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PublicKeyErrorZ), "LDKCResult_PublicKeyErrorZ");
	*ret_conv = CResult_PublicKeyErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PublicKeyErrorZ* o_conv = (LDKCResult_PublicKeyErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PublicKeyErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PublicKeyErrorZ _res_conv = *(LDKCResult_PublicKeyErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PublicKeyErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PublicKeyErrorZ_clone_ptr(LDKCResult_PublicKeyErrorZ *NONNULL_PTR arg) {
	LDKCResult_PublicKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PublicKeyErrorZ), "LDKCResult_PublicKeyErrorZ");
	*ret_conv = CResult_PublicKeyErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PublicKeyErrorZ* arg_conv = (LDKCResult_PublicKeyErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PublicKeyErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PublicKeyErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PublicKeyErrorZ* orig_conv = (LDKCResult_PublicKeyErrorZ*)(orig & ~1);
	LDKCResult_PublicKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PublicKeyErrorZ), "LDKCResult_PublicKeyErrorZ");
	*ret_conv = CResult_PublicKeyErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKTxCreationKeys o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = TxCreationKeys_clone(&o_conv);
	LDKCResult_TxCreationKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysDecodeErrorZ), "LDKCResult_TxCreationKeysDecodeErrorZ");
	*ret_conv = CResult_TxCreationKeysDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_TxCreationKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysDecodeErrorZ), "LDKCResult_TxCreationKeysDecodeErrorZ");
	*ret_conv = CResult_TxCreationKeysDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_TxCreationKeysDecodeErrorZ* o_conv = (LDKCResult_TxCreationKeysDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_TxCreationKeysDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_TxCreationKeysDecodeErrorZ _res_conv = *(LDKCResult_TxCreationKeysDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_TxCreationKeysDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_TxCreationKeysDecodeErrorZ_clone_ptr(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_TxCreationKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysDecodeErrorZ), "LDKCResult_TxCreationKeysDecodeErrorZ");
	*ret_conv = CResult_TxCreationKeysDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_TxCreationKeysDecodeErrorZ* arg_conv = (LDKCResult_TxCreationKeysDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_TxCreationKeysDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_TxCreationKeysDecodeErrorZ* orig_conv = (LDKCResult_TxCreationKeysDecodeErrorZ*)(orig & ~1);
	LDKCResult_TxCreationKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysDecodeErrorZ), "LDKCResult_TxCreationKeysDecodeErrorZ");
	*ret_conv = CResult_TxCreationKeysDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelPublicKeys o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelPublicKeys_clone(&o_conv);
	LDKCResult_ChannelPublicKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelPublicKeysDecodeErrorZ), "LDKCResult_ChannelPublicKeysDecodeErrorZ");
	*ret_conv = CResult_ChannelPublicKeysDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelPublicKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelPublicKeysDecodeErrorZ), "LDKCResult_ChannelPublicKeysDecodeErrorZ");
	*ret_conv = CResult_ChannelPublicKeysDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelPublicKeysDecodeErrorZ* o_conv = (LDKCResult_ChannelPublicKeysDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelPublicKeysDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelPublicKeysDecodeErrorZ _res_conv = *(LDKCResult_ChannelPublicKeysDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelPublicKeysDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelPublicKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelPublicKeysDecodeErrorZ), "LDKCResult_ChannelPublicKeysDecodeErrorZ");
	*ret_conv = CResult_ChannelPublicKeysDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelPublicKeysDecodeErrorZ* arg_conv = (LDKCResult_ChannelPublicKeysDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelPublicKeysDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelPublicKeysDecodeErrorZ* orig_conv = (LDKCResult_ChannelPublicKeysDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelPublicKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelPublicKeysDecodeErrorZ), "LDKCResult_ChannelPublicKeysDecodeErrorZ");
	*ret_conv = CResult_ChannelPublicKeysDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKTxCreationKeys o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = TxCreationKeys_clone(&o_conv);
	LDKCResult_TxCreationKeysErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysErrorZ), "LDKCResult_TxCreationKeysErrorZ");
	*ret_conv = CResult_TxCreationKeysErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKSecp256k1Error e_conv = LDKSecp256k1Error_from_java(env, e);
	LDKCResult_TxCreationKeysErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysErrorZ), "LDKCResult_TxCreationKeysErrorZ");
	*ret_conv = CResult_TxCreationKeysErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_TxCreationKeysErrorZ* o_conv = (LDKCResult_TxCreationKeysErrorZ*)(o & ~1);
	jboolean ret_val = CResult_TxCreationKeysErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_TxCreationKeysErrorZ _res_conv = *(LDKCResult_TxCreationKeysErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_TxCreationKeysErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_TxCreationKeysErrorZ_clone_ptr(LDKCResult_TxCreationKeysErrorZ *NONNULL_PTR arg) {
	LDKCResult_TxCreationKeysErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysErrorZ), "LDKCResult_TxCreationKeysErrorZ");
	*ret_conv = CResult_TxCreationKeysErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_TxCreationKeysErrorZ* arg_conv = (LDKCResult_TxCreationKeysErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_TxCreationKeysErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxCreationKeysErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_TxCreationKeysErrorZ* orig_conv = (LDKCResult_TxCreationKeysErrorZ*)(orig & ~1);
	LDKCResult_TxCreationKeysErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysErrorZ), "LDKCResult_TxCreationKeysErrorZ");
	*ret_conv = CResult_TxCreationKeysErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u32Z_1some(JNIEnv *env, jclass clz, int32_t o) {
	LDKCOption_u32Z *ret_copy = MALLOC(sizeof(LDKCOption_u32Z), "LDKCOption_u32Z");
	*ret_copy = COption_u32Z_some(o);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u32Z_1none(JNIEnv *env, jclass clz) {
	LDKCOption_u32Z *ret_copy = MALLOC(sizeof(LDKCOption_u32Z), "LDKCOption_u32Z");
	*ret_copy = COption_u32Z_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1u32Z_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_u32Z _res_conv = *(LDKCOption_u32Z*)(_res_ptr);
	FREE((void*)_res);
	COption_u32Z_free(_res_conv);
}

static inline uintptr_t COption_u32Z_clone_ptr(LDKCOption_u32Z *NONNULL_PTR arg) {
	LDKCOption_u32Z *ret_copy = MALLOC(sizeof(LDKCOption_u32Z), "LDKCOption_u32Z");
	*ret_copy = COption_u32Z_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u32Z_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_u32Z* arg_conv = (LDKCOption_u32Z*)arg;
	int64_t ret_val = COption_u32Z_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u32Z_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_u32Z* orig_conv = (LDKCOption_u32Z*)orig;
	LDKCOption_u32Z *ret_copy = MALLOC(sizeof(LDKCOption_u32Z), "LDKCOption_u32Z");
	*ret_copy = COption_u32Z_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKHTLCOutputInCommitment o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = HTLCOutputInCommitment_clone(&o_conv);
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ), "LDKCResult_HTLCOutputInCommitmentDecodeErrorZ");
	*ret_conv = CResult_HTLCOutputInCommitmentDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ), "LDKCResult_HTLCOutputInCommitmentDecodeErrorZ");
	*ret_conv = CResult_HTLCOutputInCommitmentDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* o_conv = (LDKCResult_HTLCOutputInCommitmentDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ _res_conv = *(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_HTLCOutputInCommitmentDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ), "LDKCResult_HTLCOutputInCommitmentDecodeErrorZ");
	*ret_conv = CResult_HTLCOutputInCommitmentDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* arg_conv = (LDKCResult_HTLCOutputInCommitmentDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCOutputInCommitmentDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* orig_conv = (LDKCResult_HTLCOutputInCommitmentDecodeErrorZ*)(orig & ~1);
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ), "LDKCResult_HTLCOutputInCommitmentDecodeErrorZ");
	*ret_conv = CResult_HTLCOutputInCommitmentDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_COption_1NoneZ_1some(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCOption_NoneZ_to_java(env, COption_NoneZ_some());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_COption_1NoneZ_1none(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCOption_NoneZ_to_java(env, COption_NoneZ_none());
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1NoneZ_1free(JNIEnv *env, jclass clz, jclass _res) {
	LDKCOption_NoneZ _res_conv = LDKCOption_NoneZ_from_java(env, _res);
	COption_NoneZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCounterpartyChannelTransactionParameters o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = CounterpartyChannelTransactionParameters_clone(&o_conv);
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ), "LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ), "LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* o_conv = (LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ _res_conv = *(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ), "LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* arg_conv = (LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyChannelTransactionParametersDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* orig_conv = (LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ*)(orig & ~1);
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ), "LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelTransactionParameters o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelTransactionParameters_clone(&o_conv);
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTransactionParametersDecodeErrorZ), "LDKCResult_ChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_ChannelTransactionParametersDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTransactionParametersDecodeErrorZ), "LDKCResult_ChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_ChannelTransactionParametersDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* o_conv = (LDKCResult_ChannelTransactionParametersDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelTransactionParametersDecodeErrorZ _res_conv = *(LDKCResult_ChannelTransactionParametersDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelTransactionParametersDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTransactionParametersDecodeErrorZ), "LDKCResult_ChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_ChannelTransactionParametersDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* arg_conv = (LDKCResult_ChannelTransactionParametersDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTransactionParametersDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* orig_conv = (LDKCResult_ChannelTransactionParametersDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTransactionParametersDecodeErrorZ), "LDKCResult_ChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CResult_ChannelTransactionParametersDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1SignatureZ_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_SignatureZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKSignature), "LDKCVec_SignatureZ Elements");
	else
		_res_constr.data = NULL;
	for (size_t i = 0; i < _res_constr.datalen; i++) {
		int8_tArray _res_conv_8 = (*env)->GetObjectArrayElement(env, _res, i);
		LDKSignature _res_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, _res_conv_8) == 64);
		(*env)->GetByteArrayRegion(env, _res_conv_8, 0, 64, _res_conv_8_ref.compact_form);
		_res_constr.data[i] = _res_conv_8_ref;
	}
	CVec_SignatureZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKHolderCommitmentTransaction o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = HolderCommitmentTransaction_clone(&o_conv);
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HolderCommitmentTransactionDecodeErrorZ), "LDKCResult_HolderCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_HolderCommitmentTransactionDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HolderCommitmentTransactionDecodeErrorZ), "LDKCResult_HolderCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_HolderCommitmentTransactionDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* o_conv = (LDKCResult_HolderCommitmentTransactionDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ _res_conv = *(LDKCResult_HolderCommitmentTransactionDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_HolderCommitmentTransactionDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HolderCommitmentTransactionDecodeErrorZ), "LDKCResult_HolderCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_HolderCommitmentTransactionDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* arg_conv = (LDKCResult_HolderCommitmentTransactionDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HolderCommitmentTransactionDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* orig_conv = (LDKCResult_HolderCommitmentTransactionDecodeErrorZ*)(orig & ~1);
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HolderCommitmentTransactionDecodeErrorZ), "LDKCResult_HolderCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_HolderCommitmentTransactionDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKBuiltCommitmentTransaction o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = BuiltCommitmentTransaction_clone(&o_conv);
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ), "LDKCResult_BuiltCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_BuiltCommitmentTransactionDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ), "LDKCResult_BuiltCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_BuiltCommitmentTransactionDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* o_conv = (LDKCResult_BuiltCommitmentTransactionDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ _res_conv = *(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_BuiltCommitmentTransactionDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ), "LDKCResult_BuiltCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_BuiltCommitmentTransactionDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* arg_conv = (LDKCResult_BuiltCommitmentTransactionDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1BuiltCommitmentTransactionDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* orig_conv = (LDKCResult_BuiltCommitmentTransactionDecodeErrorZ*)(orig & ~1);
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ), "LDKCResult_BuiltCommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_BuiltCommitmentTransactionDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedClosingTransactionNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKTrustedClosingTransaction o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	// WARNING: we need a move here but no clone is available for LDKTrustedClosingTransaction
	LDKCResult_TrustedClosingTransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TrustedClosingTransactionNoneZ), "LDKCResult_TrustedClosingTransactionNoneZ");
	*ret_conv = CResult_TrustedClosingTransactionNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedClosingTransactionNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_TrustedClosingTransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TrustedClosingTransactionNoneZ), "LDKCResult_TrustedClosingTransactionNoneZ");
	*ret_conv = CResult_TrustedClosingTransactionNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedClosingTransactionNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_TrustedClosingTransactionNoneZ* o_conv = (LDKCResult_TrustedClosingTransactionNoneZ*)(o & ~1);
	jboolean ret_val = CResult_TrustedClosingTransactionNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedClosingTransactionNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_TrustedClosingTransactionNoneZ _res_conv = *(LDKCResult_TrustedClosingTransactionNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_TrustedClosingTransactionNoneZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCommitmentTransaction o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = CommitmentTransaction_clone(&o_conv);
	LDKCResult_CommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentTransactionDecodeErrorZ), "LDKCResult_CommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_CommitmentTransactionDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_CommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentTransactionDecodeErrorZ), "LDKCResult_CommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_CommitmentTransactionDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CommitmentTransactionDecodeErrorZ* o_conv = (LDKCResult_CommitmentTransactionDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_CommitmentTransactionDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CommitmentTransactionDecodeErrorZ _res_conv = *(LDKCResult_CommitmentTransactionDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CommitmentTransactionDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_CommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_CommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentTransactionDecodeErrorZ), "LDKCResult_CommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_CommitmentTransactionDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CommitmentTransactionDecodeErrorZ* arg_conv = (LDKCResult_CommitmentTransactionDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_CommitmentTransactionDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentTransactionDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CommitmentTransactionDecodeErrorZ* orig_conv = (LDKCResult_CommitmentTransactionDecodeErrorZ*)(orig & ~1);
	LDKCResult_CommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentTransactionDecodeErrorZ), "LDKCResult_CommitmentTransactionDecodeErrorZ");
	*ret_conv = CResult_CommitmentTransactionDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedCommitmentTransactionNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKTrustedCommitmentTransaction o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	// WARNING: we need a move here but no clone is available for LDKTrustedCommitmentTransaction
	LDKCResult_TrustedCommitmentTransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TrustedCommitmentTransactionNoneZ), "LDKCResult_TrustedCommitmentTransactionNoneZ");
	*ret_conv = CResult_TrustedCommitmentTransactionNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedCommitmentTransactionNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_TrustedCommitmentTransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TrustedCommitmentTransactionNoneZ), "LDKCResult_TrustedCommitmentTransactionNoneZ");
	*ret_conv = CResult_TrustedCommitmentTransactionNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedCommitmentTransactionNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_TrustedCommitmentTransactionNoneZ* o_conv = (LDKCResult_TrustedCommitmentTransactionNoneZ*)(o & ~1);
	jboolean ret_val = CResult_TrustedCommitmentTransactionNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TrustedCommitmentTransactionNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_TrustedCommitmentTransactionNoneZ _res_conv = *(LDKCResult_TrustedCommitmentTransactionNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_TrustedCommitmentTransactionNoneZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1ok(JNIEnv *env, jclass clz, jobjectArray o) {
	LDKCVec_SignatureZ o_constr;
	o_constr.datalen = (*env)->GetArrayLength(env, o);
	if (o_constr.datalen > 0)
		o_constr.data = MALLOC(o_constr.datalen * sizeof(LDKSignature), "LDKCVec_SignatureZ Elements");
	else
		o_constr.data = NULL;
	for (size_t i = 0; i < o_constr.datalen; i++) {
		int8_tArray o_conv_8 = (*env)->GetObjectArrayElement(env, o, i);
		LDKSignature o_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, o_conv_8) == 64);
		(*env)->GetByteArrayRegion(env, o_conv_8, 0, 64, o_conv_8_ref.compact_form);
		o_constr.data[i] = o_conv_8_ref;
	}
	LDKCResult_CVec_SignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_SignatureZNoneZ), "LDKCResult_CVec_SignatureZNoneZ");
	*ret_conv = CResult_CVec_SignatureZNoneZ_ok(o_constr);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_CVec_SignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_SignatureZNoneZ), "LDKCResult_CVec_SignatureZNoneZ");
	*ret_conv = CResult_CVec_SignatureZNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CVec_SignatureZNoneZ* o_conv = (LDKCResult_CVec_SignatureZNoneZ*)(o & ~1);
	jboolean ret_val = CResult_CVec_SignatureZNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CVec_SignatureZNoneZ _res_conv = *(LDKCResult_CVec_SignatureZNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CVec_SignatureZNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_CVec_SignatureZNoneZ_clone_ptr(LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR arg) {
	LDKCResult_CVec_SignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_SignatureZNoneZ), "LDKCResult_CVec_SignatureZNoneZ");
	*ret_conv = CResult_CVec_SignatureZNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CVec_SignatureZNoneZ* arg_conv = (LDKCResult_CVec_SignatureZNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_CVec_SignatureZNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1SignatureZNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CVec_SignatureZNoneZ* orig_conv = (LDKCResult_CVec_SignatureZNoneZ*)(orig & ~1);
	LDKCResult_CVec_SignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_SignatureZNoneZ), "LDKCResult_CVec_SignatureZNoneZ");
	*ret_conv = CResult_CVec_SignatureZNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKShutdownScript o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ShutdownScript_clone(&o_conv);
	LDKCResult_ShutdownScriptDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptDecodeErrorZ), "LDKCResult_ShutdownScriptDecodeErrorZ");
	*ret_conv = CResult_ShutdownScriptDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ShutdownScriptDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptDecodeErrorZ), "LDKCResult_ShutdownScriptDecodeErrorZ");
	*ret_conv = CResult_ShutdownScriptDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ShutdownScriptDecodeErrorZ* o_conv = (LDKCResult_ShutdownScriptDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ShutdownScriptDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ShutdownScriptDecodeErrorZ _res_conv = *(LDKCResult_ShutdownScriptDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ShutdownScriptDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ShutdownScriptDecodeErrorZ_clone_ptr(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ShutdownScriptDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptDecodeErrorZ), "LDKCResult_ShutdownScriptDecodeErrorZ");
	*ret_conv = CResult_ShutdownScriptDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ShutdownScriptDecodeErrorZ* arg_conv = (LDKCResult_ShutdownScriptDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ShutdownScriptDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ShutdownScriptDecodeErrorZ* orig_conv = (LDKCResult_ShutdownScriptDecodeErrorZ*)(orig & ~1);
	LDKCResult_ShutdownScriptDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptDecodeErrorZ), "LDKCResult_ShutdownScriptDecodeErrorZ");
	*ret_conv = CResult_ShutdownScriptDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKShutdownScript o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ShutdownScript_clone(&o_conv);
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptInvalidShutdownScriptZ), "LDKCResult_ShutdownScriptInvalidShutdownScriptZ");
	*ret_conv = CResult_ShutdownScriptInvalidShutdownScriptZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKInvalidShutdownScript e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = InvalidShutdownScript_clone(&e_conv);
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptInvalidShutdownScriptZ), "LDKCResult_ShutdownScriptInvalidShutdownScriptZ");
	*ret_conv = CResult_ShutdownScriptInvalidShutdownScriptZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* o_conv = (LDKCResult_ShutdownScriptInvalidShutdownScriptZ*)(o & ~1);
	jboolean ret_val = CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ _res_conv = *(LDKCResult_ShutdownScriptInvalidShutdownScriptZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ShutdownScriptInvalidShutdownScriptZ_free(_res_conv);
}

static inline uintptr_t CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR arg) {
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptInvalidShutdownScriptZ), "LDKCResult_ShutdownScriptInvalidShutdownScriptZ");
	*ret_conv = CResult_ShutdownScriptInvalidShutdownScriptZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* arg_conv = (LDKCResult_ShutdownScriptInvalidShutdownScriptZ*)(arg & ~1);
	int64_t ret_val = CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownScriptInvalidShutdownScriptZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* orig_conv = (LDKCResult_ShutdownScriptInvalidShutdownScriptZ*)(orig & ~1);
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptInvalidShutdownScriptZ), "LDKCResult_ShutdownScriptInvalidShutdownScriptZ");
	*ret_conv = CResult_ShutdownScriptInvalidShutdownScriptZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = CResult_NoneErrorZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKIOError e_conv = LDKIOError_from_java(env, e);
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = CResult_NoneErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NoneErrorZ* o_conv = (LDKCResult_NoneErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NoneErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NoneErrorZ _res_conv = *(LDKCResult_NoneErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NoneErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NoneErrorZ_clone_ptr(LDKCResult_NoneErrorZ *NONNULL_PTR arg) {
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = CResult_NoneErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NoneErrorZ* arg_conv = (LDKCResult_NoneErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NoneErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NoneErrorZ* orig_conv = (LDKCResult_NoneErrorZ*)(orig & ~1);
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = CResult_NoneErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRouteHop o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = RouteHop_clone(&o_conv);
	LDKCResult_RouteHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHopDecodeErrorZ), "LDKCResult_RouteHopDecodeErrorZ");
	*ret_conv = CResult_RouteHopDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_RouteHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHopDecodeErrorZ), "LDKCResult_RouteHopDecodeErrorZ");
	*ret_conv = CResult_RouteHopDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RouteHopDecodeErrorZ* o_conv = (LDKCResult_RouteHopDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RouteHopDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RouteHopDecodeErrorZ _res_conv = *(LDKCResult_RouteHopDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RouteHopDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RouteHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_RouteHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHopDecodeErrorZ), "LDKCResult_RouteHopDecodeErrorZ");
	*ret_conv = CResult_RouteHopDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RouteHopDecodeErrorZ* arg_conv = (LDKCResult_RouteHopDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RouteHopDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHopDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RouteHopDecodeErrorZ* orig_conv = (LDKCResult_RouteHopDecodeErrorZ*)(orig & ~1);
	LDKCResult_RouteHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHopDecodeErrorZ), "LDKCResult_RouteHopDecodeErrorZ");
	*ret_conv = CResult_RouteHopDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1RouteHopZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_RouteHopZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t k = 0; k < _res_constr.datalen; k++) {
		int64_t _res_conv_10 = _res_vals[k];
		LDKRouteHop _res_conv_10_conv;
		_res_conv_10_conv.inner = (void*)(_res_conv_10 & (~1));
		_res_conv_10_conv.is_owned = (_res_conv_10 & 1) || (_res_conv_10 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_10_conv);
		_res_constr.data[k] = _res_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_RouteHopZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1CVec_1RouteHopZZ_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_CVec_RouteHopZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKCVec_RouteHopZ), "LDKCVec_CVec_RouteHopZZ Elements");
	else
		_res_constr.data = NULL;
	for (size_t m = 0; m < _res_constr.datalen; m++) {
		int64_tArray _res_conv_12 = (*env)->GetObjectArrayElement(env, _res, m);
		LDKCVec_RouteHopZ _res_conv_12_constr;
		_res_conv_12_constr.datalen = (*env)->GetArrayLength(env, _res_conv_12);
		if (_res_conv_12_constr.datalen > 0)
			_res_conv_12_constr.data = MALLOC(_res_conv_12_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
		else
			_res_conv_12_constr.data = NULL;
		int64_t* _res_conv_12_vals = (*env)->GetLongArrayElements (env, _res_conv_12, NULL);
		for (size_t k = 0; k < _res_conv_12_constr.datalen; k++) {
			int64_t _res_conv_12_conv_10 = _res_conv_12_vals[k];
			LDKRouteHop _res_conv_12_conv_10_conv;
			_res_conv_12_conv_10_conv.inner = (void*)(_res_conv_12_conv_10 & (~1));
			_res_conv_12_conv_10_conv.is_owned = (_res_conv_12_conv_10 & 1) || (_res_conv_12_conv_10 == 0);
			CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_12_conv_10_conv);
			_res_conv_12_constr.data[k] = _res_conv_12_conv_10_conv;
		}
		(*env)->ReleaseLongArrayElements(env, _res_conv_12, _res_conv_12_vals, 0);
		_res_constr.data[m] = _res_conv_12_constr;
	}
	CVec_CVec_RouteHopZZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRoute o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Route_clone(&o_conv);
	LDKCResult_RouteDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteDecodeErrorZ), "LDKCResult_RouteDecodeErrorZ");
	*ret_conv = CResult_RouteDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_RouteDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteDecodeErrorZ), "LDKCResult_RouteDecodeErrorZ");
	*ret_conv = CResult_RouteDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RouteDecodeErrorZ* o_conv = (LDKCResult_RouteDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RouteDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RouteDecodeErrorZ _res_conv = *(LDKCResult_RouteDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RouteDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RouteDecodeErrorZ_clone_ptr(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_RouteDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteDecodeErrorZ), "LDKCResult_RouteDecodeErrorZ");
	*ret_conv = CResult_RouteDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RouteDecodeErrorZ* arg_conv = (LDKCResult_RouteDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RouteDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RouteDecodeErrorZ* orig_conv = (LDKCResult_RouteDecodeErrorZ*)(orig & ~1);
	LDKCResult_RouteDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteDecodeErrorZ), "LDKCResult_RouteDecodeErrorZ");
	*ret_conv = CResult_RouteDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRouteParameters o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = RouteParameters_clone(&o_conv);
	LDKCResult_RouteParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteParametersDecodeErrorZ), "LDKCResult_RouteParametersDecodeErrorZ");
	*ret_conv = CResult_RouteParametersDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_RouteParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteParametersDecodeErrorZ), "LDKCResult_RouteParametersDecodeErrorZ");
	*ret_conv = CResult_RouteParametersDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RouteParametersDecodeErrorZ* o_conv = (LDKCResult_RouteParametersDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RouteParametersDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RouteParametersDecodeErrorZ _res_conv = *(LDKCResult_RouteParametersDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RouteParametersDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RouteParametersDecodeErrorZ_clone_ptr(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_RouteParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteParametersDecodeErrorZ), "LDKCResult_RouteParametersDecodeErrorZ");
	*ret_conv = CResult_RouteParametersDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RouteParametersDecodeErrorZ* arg_conv = (LDKCResult_RouteParametersDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RouteParametersDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteParametersDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RouteParametersDecodeErrorZ* orig_conv = (LDKCResult_RouteParametersDecodeErrorZ*)(orig & ~1);
	LDKCResult_RouteParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteParametersDecodeErrorZ), "LDKCResult_RouteParametersDecodeErrorZ");
	*ret_conv = CResult_RouteParametersDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1RouteHintZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_RouteHintZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKRouteHint), "LDKCVec_RouteHintZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t l = 0; l < _res_constr.datalen; l++) {
		int64_t _res_conv_11 = _res_vals[l];
		LDKRouteHint _res_conv_11_conv;
		_res_conv_11_conv.inner = (void*)(_res_conv_11 & (~1));
		_res_conv_11_conv.is_owned = (_res_conv_11 & 1) || (_res_conv_11 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_11_conv);
		_res_constr.data[l] = _res_conv_11_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_RouteHintZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u64Z_1some(JNIEnv *env, jclass clz, int64_t o) {
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = COption_u64Z_some(o);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u64Z_1none(JNIEnv *env, jclass clz) {
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = COption_u64Z_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1u64Z_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_u64Z _res_conv = *(LDKCOption_u64Z*)(_res_ptr);
	FREE((void*)_res);
	COption_u64Z_free(_res_conv);
}

static inline uintptr_t COption_u64Z_clone_ptr(LDKCOption_u64Z *NONNULL_PTR arg) {
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = COption_u64Z_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u64Z_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_u64Z* arg_conv = (LDKCOption_u64Z*)arg;
	int64_t ret_val = COption_u64Z_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u64Z_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_u64Z* orig_conv = (LDKCOption_u64Z*)orig;
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = COption_u64Z_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKPaymentParameters o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = PaymentParameters_clone(&o_conv);
	LDKCResult_PaymentParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentParametersDecodeErrorZ), "LDKCResult_PaymentParametersDecodeErrorZ");
	*ret_conv = CResult_PaymentParametersDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_PaymentParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentParametersDecodeErrorZ), "LDKCResult_PaymentParametersDecodeErrorZ");
	*ret_conv = CResult_PaymentParametersDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PaymentParametersDecodeErrorZ* o_conv = (LDKCResult_PaymentParametersDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PaymentParametersDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PaymentParametersDecodeErrorZ _res_conv = *(LDKCResult_PaymentParametersDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PaymentParametersDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PaymentParametersDecodeErrorZ_clone_ptr(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_PaymentParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentParametersDecodeErrorZ), "LDKCResult_PaymentParametersDecodeErrorZ");
	*ret_conv = CResult_PaymentParametersDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PaymentParametersDecodeErrorZ* arg_conv = (LDKCResult_PaymentParametersDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PaymentParametersDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentParametersDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PaymentParametersDecodeErrorZ* orig_conv = (LDKCResult_PaymentParametersDecodeErrorZ*)(orig & ~1);
	LDKCResult_PaymentParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentParametersDecodeErrorZ), "LDKCResult_PaymentParametersDecodeErrorZ");
	*ret_conv = CResult_PaymentParametersDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1RouteHintHopZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_RouteHintHopZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKRouteHintHop), "LDKCVec_RouteHintHopZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t o = 0; o < _res_constr.datalen; o++) {
		int64_t _res_conv_14 = _res_vals[o];
		LDKRouteHintHop _res_conv_14_conv;
		_res_conv_14_conv.inner = (void*)(_res_conv_14 & (~1));
		_res_conv_14_conv.is_owned = (_res_conv_14 & 1) || (_res_conv_14 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_14_conv);
		_res_constr.data[o] = _res_conv_14_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_RouteHintHopZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRouteHint o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = RouteHint_clone(&o_conv);
	LDKCResult_RouteHintDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintDecodeErrorZ), "LDKCResult_RouteHintDecodeErrorZ");
	*ret_conv = CResult_RouteHintDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_RouteHintDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintDecodeErrorZ), "LDKCResult_RouteHintDecodeErrorZ");
	*ret_conv = CResult_RouteHintDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RouteHintDecodeErrorZ* o_conv = (LDKCResult_RouteHintDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RouteHintDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RouteHintDecodeErrorZ _res_conv = *(LDKCResult_RouteHintDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RouteHintDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RouteHintDecodeErrorZ_clone_ptr(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_RouteHintDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintDecodeErrorZ), "LDKCResult_RouteHintDecodeErrorZ");
	*ret_conv = CResult_RouteHintDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RouteHintDecodeErrorZ* arg_conv = (LDKCResult_RouteHintDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RouteHintDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RouteHintDecodeErrorZ* orig_conv = (LDKCResult_RouteHintDecodeErrorZ*)(orig & ~1);
	LDKCResult_RouteHintDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintDecodeErrorZ), "LDKCResult_RouteHintDecodeErrorZ");
	*ret_conv = CResult_RouteHintDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRouteHintHop o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = RouteHintHop_clone(&o_conv);
	LDKCResult_RouteHintHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintHopDecodeErrorZ), "LDKCResult_RouteHintHopDecodeErrorZ");
	*ret_conv = CResult_RouteHintHopDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_RouteHintHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintHopDecodeErrorZ), "LDKCResult_RouteHintHopDecodeErrorZ");
	*ret_conv = CResult_RouteHintHopDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RouteHintHopDecodeErrorZ* o_conv = (LDKCResult_RouteHintHopDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RouteHintHopDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RouteHintHopDecodeErrorZ _res_conv = *(LDKCResult_RouteHintHopDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RouteHintHopDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RouteHintHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_RouteHintHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintHopDecodeErrorZ), "LDKCResult_RouteHintHopDecodeErrorZ");
	*ret_conv = CResult_RouteHintHopDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RouteHintHopDecodeErrorZ* arg_conv = (LDKCResult_RouteHintHopDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RouteHintHopDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteHintHopDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RouteHintHopDecodeErrorZ* orig_conv = (LDKCResult_RouteHintHopDecodeErrorZ*)(orig & ~1);
	LDKCResult_RouteHintHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintHopDecodeErrorZ), "LDKCResult_RouteHintHopDecodeErrorZ");
	*ret_conv = CResult_RouteHintHopDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1ChannelDetailsZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_ChannelDetailsZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKChannelDetails), "LDKCVec_ChannelDetailsZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t q = 0; q < _res_constr.datalen; q++) {
		int64_t _res_conv_16 = _res_vals[q];
		LDKChannelDetails _res_conv_16_conv;
		_res_conv_16_conv.inner = (void*)(_res_conv_16 & (~1));
		_res_conv_16_conv.is_owned = (_res_conv_16 & 1) || (_res_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_16_conv);
		_res_constr.data[q] = _res_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_ChannelDetailsZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRoute o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Route_clone(&o_conv);
	LDKCResult_RouteLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteLightningErrorZ), "LDKCResult_RouteLightningErrorZ");
	*ret_conv = CResult_RouteLightningErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKLightningError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = LightningError_clone(&e_conv);
	LDKCResult_RouteLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteLightningErrorZ), "LDKCResult_RouteLightningErrorZ");
	*ret_conv = CResult_RouteLightningErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RouteLightningErrorZ* o_conv = (LDKCResult_RouteLightningErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RouteLightningErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RouteLightningErrorZ _res_conv = *(LDKCResult_RouteLightningErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RouteLightningErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RouteLightningErrorZ_clone_ptr(LDKCResult_RouteLightningErrorZ *NONNULL_PTR arg) {
	LDKCResult_RouteLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteLightningErrorZ), "LDKCResult_RouteLightningErrorZ");
	*ret_conv = CResult_RouteLightningErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RouteLightningErrorZ* arg_conv = (LDKCResult_RouteLightningErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RouteLightningErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RouteLightningErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RouteLightningErrorZ* orig_conv = (LDKCResult_RouteLightningErrorZ*)(orig & ~1);
	LDKCResult_RouteLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteLightningErrorZ), "LDKCResult_RouteLightningErrorZ");
	*ret_conv = CResult_RouteLightningErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKTxOut o_conv = *(LDKTxOut*)(o_ptr);
	o_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)o) & ~1));
	LDKCResult_TxOutAccessErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxOutAccessErrorZ), "LDKCResult_TxOutAccessErrorZ");
	*ret_conv = CResult_TxOutAccessErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKAccessError e_conv = LDKAccessError_from_java(env, e);
	LDKCResult_TxOutAccessErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxOutAccessErrorZ), "LDKCResult_TxOutAccessErrorZ");
	*ret_conv = CResult_TxOutAccessErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_TxOutAccessErrorZ* o_conv = (LDKCResult_TxOutAccessErrorZ*)(o & ~1);
	jboolean ret_val = CResult_TxOutAccessErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_TxOutAccessErrorZ _res_conv = *(LDKCResult_TxOutAccessErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_TxOutAccessErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_TxOutAccessErrorZ_clone_ptr(LDKCResult_TxOutAccessErrorZ *NONNULL_PTR arg) {
	LDKCResult_TxOutAccessErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxOutAccessErrorZ), "LDKCResult_TxOutAccessErrorZ");
	*ret_conv = CResult_TxOutAccessErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_TxOutAccessErrorZ* arg_conv = (LDKCResult_TxOutAccessErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_TxOutAccessErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TxOutAccessErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_TxOutAccessErrorZ* orig_conv = (LDKCResult_TxOutAccessErrorZ*)(orig & ~1);
	LDKCResult_TxOutAccessErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxOutAccessErrorZ), "LDKCResult_TxOutAccessErrorZ");
	*ret_conv = CResult_TxOutAccessErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C2Tuple_usizeTransactionZ_clone_ptr(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR arg) {
	LDKC2Tuple_usizeTransactionZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_usizeTransactionZ), "LDKC2Tuple_usizeTransactionZ");
	*ret_conv = C2Tuple_usizeTransactionZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1usizeTransactionZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_usizeTransactionZ* arg_conv = (LDKC2Tuple_usizeTransactionZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_usizeTransactionZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1usizeTransactionZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_usizeTransactionZ* orig_conv = (LDKC2Tuple_usizeTransactionZ*)(orig & ~1);
	LDKC2Tuple_usizeTransactionZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_usizeTransactionZ), "LDKC2Tuple_usizeTransactionZ");
	*ret_conv = C2Tuple_usizeTransactionZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1usizeTransactionZ_1new(JNIEnv *env, jclass clz, int64_t a, int8_tArray b) {
	LDKTransaction b_ref;
	b_ref.datalen = (*env)->GetArrayLength(env, b);
	b_ref.data = MALLOC(b_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, b, 0, b_ref.datalen, b_ref.data);
	b_ref.data_is_owned = true;
	LDKC2Tuple_usizeTransactionZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_usizeTransactionZ), "LDKC2Tuple_usizeTransactionZ");
	*ret_conv = C2Tuple_usizeTransactionZ_new(a, b_ref);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1usizeTransactionZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_usizeTransactionZ _res_conv = *(LDKC2Tuple_usizeTransactionZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_usizeTransactionZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C2Tuple_1usizeTransactionZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C2Tuple_usizeTransactionZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC2Tuple_usizeTransactionZ), "LDKCVec_C2Tuple_usizeTransactionZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t c = 0; c < _res_constr.datalen; c++) {
		int64_t _res_conv_28 = _res_vals[c];
		void* _res_conv_28_ptr = (void*)(((uintptr_t)_res_conv_28) & ~1);
		CHECK_ACCESS(_res_conv_28_ptr);
		LDKC2Tuple_usizeTransactionZ _res_conv_28_conv = *(LDKC2Tuple_usizeTransactionZ*)(_res_conv_28_ptr);
		FREE((void*)_res_conv_28);
		_res_constr.data[c] = _res_conv_28_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C2Tuple_usizeTransactionZZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1TxidZ_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_TxidZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKThirtyTwoBytes), "LDKCVec_TxidZ Elements");
	else
		_res_constr.data = NULL;
	for (size_t i = 0; i < _res_constr.datalen; i++) {
		int8_tArray _res_conv_8 = (*env)->GetObjectArrayElement(env, _res, i);
		LDKThirtyTwoBytes _res_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, _res_conv_8) == 32);
		(*env)->GetByteArrayRegion(env, _res_conv_8, 0, 32, _res_conv_8_ref.data);
		_res_constr.data[i] = _res_conv_8_ref;
	}
	CVec_TxidZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = CResult_NoneChannelMonitorUpdateErrZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKChannelMonitorUpdateErr e_conv = LDKChannelMonitorUpdateErr_from_java(env, e);
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = CResult_NoneChannelMonitorUpdateErrZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NoneChannelMonitorUpdateErrZ* o_conv = (LDKCResult_NoneChannelMonitorUpdateErrZ*)(o & ~1);
	jboolean ret_val = CResult_NoneChannelMonitorUpdateErrZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NoneChannelMonitorUpdateErrZ _res_conv = *(LDKCResult_NoneChannelMonitorUpdateErrZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NoneChannelMonitorUpdateErrZ_free(_res_conv);
}

static inline uintptr_t CResult_NoneChannelMonitorUpdateErrZ_clone_ptr(LDKCResult_NoneChannelMonitorUpdateErrZ *NONNULL_PTR arg) {
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = CResult_NoneChannelMonitorUpdateErrZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NoneChannelMonitorUpdateErrZ* arg_conv = (LDKCResult_NoneChannelMonitorUpdateErrZ*)(arg & ~1);
	int64_t ret_val = CResult_NoneChannelMonitorUpdateErrZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneChannelMonitorUpdateErrZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NoneChannelMonitorUpdateErrZ* orig_conv = (LDKCResult_NoneChannelMonitorUpdateErrZ*)(orig & ~1);
	LDKCResult_NoneChannelMonitorUpdateErrZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneChannelMonitorUpdateErrZ), "LDKCResult_NoneChannelMonitorUpdateErrZ");
	*ret_conv = CResult_NoneChannelMonitorUpdateErrZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1MonitorEventZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_MonitorEventZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKMonitorEvent), "LDKCVec_MonitorEventZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t o = 0; o < _res_constr.datalen; o++) {
		int64_t _res_conv_14 = _res_vals[o];
		void* _res_conv_14_ptr = (void*)(((uintptr_t)_res_conv_14) & ~1);
		CHECK_ACCESS(_res_conv_14_ptr);
		LDKMonitorEvent _res_conv_14_conv = *(LDKMonitorEvent*)(_res_conv_14_ptr);
		FREE((void*)_res_conv_14);
		_res_constr.data[o] = _res_conv_14_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_MonitorEventZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1C2Tuple_1usizeTransactionZZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_usizeTransactionZ o_conv = *(LDKC2Tuple_usizeTransactionZ*)(o_ptr);
	o_conv = C2Tuple_usizeTransactionZ_clone((LDKC2Tuple_usizeTransactionZ*)(((uintptr_t)o) & ~1));
	LDKCOption_C2Tuple_usizeTransactionZZ *ret_copy = MALLOC(sizeof(LDKCOption_C2Tuple_usizeTransactionZZ), "LDKCOption_C2Tuple_usizeTransactionZZ");
	*ret_copy = COption_C2Tuple_usizeTransactionZZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1C2Tuple_1usizeTransactionZZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_C2Tuple_usizeTransactionZZ *ret_copy = MALLOC(sizeof(LDKCOption_C2Tuple_usizeTransactionZZ), "LDKCOption_C2Tuple_usizeTransactionZZ");
	*ret_copy = COption_C2Tuple_usizeTransactionZZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1C2Tuple_1usizeTransactionZZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_C2Tuple_usizeTransactionZZ _res_conv = *(LDKCOption_C2Tuple_usizeTransactionZZ*)(_res_ptr);
	FREE((void*)_res);
	COption_C2Tuple_usizeTransactionZZ_free(_res_conv);
}

static inline uintptr_t COption_C2Tuple_usizeTransactionZZ_clone_ptr(LDKCOption_C2Tuple_usizeTransactionZZ *NONNULL_PTR arg) {
	LDKCOption_C2Tuple_usizeTransactionZZ *ret_copy = MALLOC(sizeof(LDKCOption_C2Tuple_usizeTransactionZZ), "LDKCOption_C2Tuple_usizeTransactionZZ");
	*ret_copy = COption_C2Tuple_usizeTransactionZZ_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1C2Tuple_1usizeTransactionZZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_C2Tuple_usizeTransactionZZ* arg_conv = (LDKCOption_C2Tuple_usizeTransactionZZ*)arg;
	int64_t ret_val = COption_C2Tuple_usizeTransactionZZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1C2Tuple_1usizeTransactionZZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_C2Tuple_usizeTransactionZZ* orig_conv = (LDKCOption_C2Tuple_usizeTransactionZZ*)orig;
	LDKCOption_C2Tuple_usizeTransactionZZ *ret_copy = MALLOC(sizeof(LDKCOption_C2Tuple_usizeTransactionZZ), "LDKCOption_C2Tuple_usizeTransactionZZ");
	*ret_copy = COption_C2Tuple_usizeTransactionZZ_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1ClosureReasonZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKClosureReason o_conv = *(LDKClosureReason*)(o_ptr);
	o_conv = ClosureReason_clone((LDKClosureReason*)(((uintptr_t)o) & ~1));
	LDKCOption_ClosureReasonZ *ret_copy = MALLOC(sizeof(LDKCOption_ClosureReasonZ), "LDKCOption_ClosureReasonZ");
	*ret_copy = COption_ClosureReasonZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1ClosureReasonZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_ClosureReasonZ *ret_copy = MALLOC(sizeof(LDKCOption_ClosureReasonZ), "LDKCOption_ClosureReasonZ");
	*ret_copy = COption_ClosureReasonZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1ClosureReasonZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_ClosureReasonZ _res_conv = *(LDKCOption_ClosureReasonZ*)(_res_ptr);
	FREE((void*)_res);
	COption_ClosureReasonZ_free(_res_conv);
}

static inline uintptr_t COption_ClosureReasonZ_clone_ptr(LDKCOption_ClosureReasonZ *NONNULL_PTR arg) {
	LDKCOption_ClosureReasonZ *ret_copy = MALLOC(sizeof(LDKCOption_ClosureReasonZ), "LDKCOption_ClosureReasonZ");
	*ret_copy = COption_ClosureReasonZ_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1ClosureReasonZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_ClosureReasonZ* arg_conv = (LDKCOption_ClosureReasonZ*)arg;
	int64_t ret_val = COption_ClosureReasonZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1ClosureReasonZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_ClosureReasonZ* orig_conv = (LDKCOption_ClosureReasonZ*)orig;
	LDKCOption_ClosureReasonZ *ret_copy = MALLOC(sizeof(LDKCOption_ClosureReasonZ), "LDKCOption_ClosureReasonZ");
	*ret_copy = COption_ClosureReasonZ_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKCOption_ClosureReasonZ o_conv = *(LDKCOption_ClosureReasonZ*)(o_ptr);
	o_conv = COption_ClosureReasonZ_clone((LDKCOption_ClosureReasonZ*)(((uintptr_t)o) & ~1));
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_ClosureReasonZDecodeErrorZ), "LDKCResult_COption_ClosureReasonZDecodeErrorZ");
	*ret_conv = CResult_COption_ClosureReasonZDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_ClosureReasonZDecodeErrorZ), "LDKCResult_COption_ClosureReasonZDecodeErrorZ");
	*ret_conv = CResult_COption_ClosureReasonZDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* o_conv = (LDKCResult_COption_ClosureReasonZDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_COption_ClosureReasonZDecodeErrorZ _res_conv = *(LDKCResult_COption_ClosureReasonZDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_COption_ClosureReasonZDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_ClosureReasonZDecodeErrorZ), "LDKCResult_COption_ClosureReasonZDecodeErrorZ");
	*ret_conv = CResult_COption_ClosureReasonZDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* arg_conv = (LDKCResult_COption_ClosureReasonZDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1ClosureReasonZDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* orig_conv = (LDKCResult_COption_ClosureReasonZDecodeErrorZ*)(orig & ~1);
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_ClosureReasonZDecodeErrorZ), "LDKCResult_COption_ClosureReasonZDecodeErrorZ");
	*ret_conv = CResult_COption_ClosureReasonZDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1NetworkUpdateZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKNetworkUpdate o_conv = *(LDKNetworkUpdate*)(o_ptr);
	o_conv = NetworkUpdate_clone((LDKNetworkUpdate*)(((uintptr_t)o) & ~1));
	LDKCOption_NetworkUpdateZ *ret_copy = MALLOC(sizeof(LDKCOption_NetworkUpdateZ), "LDKCOption_NetworkUpdateZ");
	*ret_copy = COption_NetworkUpdateZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1NetworkUpdateZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_NetworkUpdateZ *ret_copy = MALLOC(sizeof(LDKCOption_NetworkUpdateZ), "LDKCOption_NetworkUpdateZ");
	*ret_copy = COption_NetworkUpdateZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1NetworkUpdateZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_NetworkUpdateZ _res_conv = *(LDKCOption_NetworkUpdateZ*)(_res_ptr);
	FREE((void*)_res);
	COption_NetworkUpdateZ_free(_res_conv);
}

static inline uintptr_t COption_NetworkUpdateZ_clone_ptr(LDKCOption_NetworkUpdateZ *NONNULL_PTR arg) {
	LDKCOption_NetworkUpdateZ *ret_copy = MALLOC(sizeof(LDKCOption_NetworkUpdateZ), "LDKCOption_NetworkUpdateZ");
	*ret_copy = COption_NetworkUpdateZ_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1NetworkUpdateZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_NetworkUpdateZ* arg_conv = (LDKCOption_NetworkUpdateZ*)arg;
	int64_t ret_val = COption_NetworkUpdateZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1NetworkUpdateZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_NetworkUpdateZ* orig_conv = (LDKCOption_NetworkUpdateZ*)orig;
	LDKCOption_NetworkUpdateZ *ret_copy = MALLOC(sizeof(LDKCOption_NetworkUpdateZ), "LDKCOption_NetworkUpdateZ");
	*ret_copy = COption_NetworkUpdateZ_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1SpendableOutputDescriptorZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_SpendableOutputDescriptorZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKSpendableOutputDescriptor), "LDKCVec_SpendableOutputDescriptorZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t b = 0; b < _res_constr.datalen; b++) {
		int64_t _res_conv_27 = _res_vals[b];
		void* _res_conv_27_ptr = (void*)(((uintptr_t)_res_conv_27) & ~1);
		CHECK_ACCESS(_res_conv_27_ptr);
		LDKSpendableOutputDescriptor _res_conv_27_conv = *(LDKSpendableOutputDescriptor*)(_res_conv_27_ptr);
		FREE((void*)_res_conv_27);
		_res_constr.data[b] = _res_conv_27_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_SpendableOutputDescriptorZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1EventZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKEvent o_conv = *(LDKEvent*)(o_ptr);
	o_conv = Event_clone((LDKEvent*)(((uintptr_t)o) & ~1));
	LDKCOption_EventZ *ret_copy = MALLOC(sizeof(LDKCOption_EventZ), "LDKCOption_EventZ");
	*ret_copy = COption_EventZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1EventZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_EventZ *ret_copy = MALLOC(sizeof(LDKCOption_EventZ), "LDKCOption_EventZ");
	*ret_copy = COption_EventZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1EventZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_EventZ _res_conv = *(LDKCOption_EventZ*)(_res_ptr);
	FREE((void*)_res);
	COption_EventZ_free(_res_conv);
}

static inline uintptr_t COption_EventZ_clone_ptr(LDKCOption_EventZ *NONNULL_PTR arg) {
	LDKCOption_EventZ *ret_copy = MALLOC(sizeof(LDKCOption_EventZ), "LDKCOption_EventZ");
	*ret_copy = COption_EventZ_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1EventZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_EventZ* arg_conv = (LDKCOption_EventZ*)arg;
	int64_t ret_val = COption_EventZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1EventZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_EventZ* orig_conv = (LDKCOption_EventZ*)orig;
	LDKCOption_EventZ *ret_copy = MALLOC(sizeof(LDKCOption_EventZ), "LDKCOption_EventZ");
	*ret_copy = COption_EventZ_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKCOption_EventZ o_conv = *(LDKCOption_EventZ*)(o_ptr);
	o_conv = COption_EventZ_clone((LDKCOption_EventZ*)(((uintptr_t)o) & ~1));
	LDKCResult_COption_EventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_EventZDecodeErrorZ), "LDKCResult_COption_EventZDecodeErrorZ");
	*ret_conv = CResult_COption_EventZDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_COption_EventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_EventZDecodeErrorZ), "LDKCResult_COption_EventZDecodeErrorZ");
	*ret_conv = CResult_COption_EventZDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_COption_EventZDecodeErrorZ* o_conv = (LDKCResult_COption_EventZDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_COption_EventZDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_COption_EventZDecodeErrorZ _res_conv = *(LDKCResult_COption_EventZDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_COption_EventZDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_COption_EventZDecodeErrorZ_clone_ptr(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_COption_EventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_EventZDecodeErrorZ), "LDKCResult_COption_EventZDecodeErrorZ");
	*ret_conv = CResult_COption_EventZDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_COption_EventZDecodeErrorZ* arg_conv = (LDKCResult_COption_EventZDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_COption_EventZDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1EventZDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_COption_EventZDecodeErrorZ* orig_conv = (LDKCResult_COption_EventZDecodeErrorZ*)(orig & ~1);
	LDKCResult_COption_EventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_EventZDecodeErrorZ), "LDKCResult_COption_EventZDecodeErrorZ");
	*ret_conv = CResult_COption_EventZDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1MessageSendEventZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_MessageSendEventZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKMessageSendEvent), "LDKCVec_MessageSendEventZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t s = 0; s < _res_constr.datalen; s++) {
		int64_t _res_conv_18 = _res_vals[s];
		void* _res_conv_18_ptr = (void*)(((uintptr_t)_res_conv_18) & ~1);
		CHECK_ACCESS(_res_conv_18_ptr);
		LDKMessageSendEvent _res_conv_18_conv = *(LDKMessageSendEvent*)(_res_conv_18_ptr);
		FREE((void*)_res_conv_18);
		_res_constr.data[s] = _res_conv_18_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_MessageSendEventZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKFixedPenaltyScorer o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = FixedPenaltyScorer_clone(&o_conv);
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FixedPenaltyScorerDecodeErrorZ), "LDKCResult_FixedPenaltyScorerDecodeErrorZ");
	*ret_conv = CResult_FixedPenaltyScorerDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FixedPenaltyScorerDecodeErrorZ), "LDKCResult_FixedPenaltyScorerDecodeErrorZ");
	*ret_conv = CResult_FixedPenaltyScorerDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* o_conv = (LDKCResult_FixedPenaltyScorerDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_FixedPenaltyScorerDecodeErrorZ _res_conv = *(LDKCResult_FixedPenaltyScorerDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_FixedPenaltyScorerDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FixedPenaltyScorerDecodeErrorZ), "LDKCResult_FixedPenaltyScorerDecodeErrorZ");
	*ret_conv = CResult_FixedPenaltyScorerDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* arg_conv = (LDKCResult_FixedPenaltyScorerDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FixedPenaltyScorerDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* orig_conv = (LDKCResult_FixedPenaltyScorerDecodeErrorZ*)(orig & ~1);
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FixedPenaltyScorerDecodeErrorZ), "LDKCResult_FixedPenaltyScorerDecodeErrorZ");
	*ret_conv = CResult_FixedPenaltyScorerDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKScoringParameters o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ScoringParameters_clone(&o_conv);
	LDKCResult_ScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScoringParametersDecodeErrorZ), "LDKCResult_ScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ScoringParametersDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScoringParametersDecodeErrorZ), "LDKCResult_ScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ScoringParametersDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ScoringParametersDecodeErrorZ* o_conv = (LDKCResult_ScoringParametersDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ScoringParametersDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ScoringParametersDecodeErrorZ _res_conv = *(LDKCResult_ScoringParametersDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ScoringParametersDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ScoringParametersDecodeErrorZ_clone_ptr(LDKCResult_ScoringParametersDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScoringParametersDecodeErrorZ), "LDKCResult_ScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ScoringParametersDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ScoringParametersDecodeErrorZ* arg_conv = (LDKCResult_ScoringParametersDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ScoringParametersDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScoringParametersDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ScoringParametersDecodeErrorZ* orig_conv = (LDKCResult_ScoringParametersDecodeErrorZ*)(orig & ~1);
	LDKCResult_ScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScoringParametersDecodeErrorZ), "LDKCResult_ScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ScoringParametersDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScorerDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKScorer o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	// WARNING: we need a move here but no clone is available for LDKScorer
	LDKCResult_ScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScorerDecodeErrorZ), "LDKCResult_ScorerDecodeErrorZ");
	*ret_conv = CResult_ScorerDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ScorerDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScorerDecodeErrorZ), "LDKCResult_ScorerDecodeErrorZ");
	*ret_conv = CResult_ScorerDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ScorerDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ScorerDecodeErrorZ* o_conv = (LDKCResult_ScorerDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ScorerDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ScorerDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ScorerDecodeErrorZ _res_conv = *(LDKCResult_ScorerDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ScorerDecodeErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKProbabilisticScoringParameters o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ProbabilisticScoringParameters_clone(&o_conv);
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ), "LDKCResult_ProbabilisticScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ProbabilisticScoringParametersDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ), "LDKCResult_ProbabilisticScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ProbabilisticScoringParametersDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* o_conv = (LDKCResult_ProbabilisticScoringParametersDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ProbabilisticScoringParametersDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ _res_conv = *(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ProbabilisticScoringParametersDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ProbabilisticScoringParametersDecodeErrorZ_clone_ptr(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ), "LDKCResult_ProbabilisticScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ProbabilisticScoringParametersDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* arg_conv = (LDKCResult_ProbabilisticScoringParametersDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ProbabilisticScoringParametersDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ProbabilisticScoringParametersDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* orig_conv = (LDKCResult_ProbabilisticScoringParametersDecodeErrorZ*)(orig & ~1);
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ), "LDKCResult_ProbabilisticScoringParametersDecodeErrorZ");
	*ret_conv = CResult_ProbabilisticScoringParametersDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitFeaturesDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKInitFeatures o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = InitFeatures_clone(&o_conv);
	LDKCResult_InitFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitFeaturesDecodeErrorZ), "LDKCResult_InitFeaturesDecodeErrorZ");
	*ret_conv = CResult_InitFeaturesDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitFeaturesDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_InitFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitFeaturesDecodeErrorZ), "LDKCResult_InitFeaturesDecodeErrorZ");
	*ret_conv = CResult_InitFeaturesDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1InitFeaturesDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_InitFeaturesDecodeErrorZ* o_conv = (LDKCResult_InitFeaturesDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_InitFeaturesDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InitFeaturesDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_InitFeaturesDecodeErrorZ _res_conv = *(LDKCResult_InitFeaturesDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_InitFeaturesDecodeErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelFeaturesDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelFeatures o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelFeatures_clone(&o_conv);
	LDKCResult_ChannelFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelFeaturesDecodeErrorZ), "LDKCResult_ChannelFeaturesDecodeErrorZ");
	*ret_conv = CResult_ChannelFeaturesDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelFeaturesDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelFeaturesDecodeErrorZ), "LDKCResult_ChannelFeaturesDecodeErrorZ");
	*ret_conv = CResult_ChannelFeaturesDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelFeaturesDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelFeaturesDecodeErrorZ* o_conv = (LDKCResult_ChannelFeaturesDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelFeaturesDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelFeaturesDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelFeaturesDecodeErrorZ _res_conv = *(LDKCResult_ChannelFeaturesDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelFeaturesDecodeErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeFeaturesDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKNodeFeatures o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = NodeFeatures_clone(&o_conv);
	LDKCResult_NodeFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeFeaturesDecodeErrorZ), "LDKCResult_NodeFeaturesDecodeErrorZ");
	*ret_conv = CResult_NodeFeaturesDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeFeaturesDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_NodeFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeFeaturesDecodeErrorZ), "LDKCResult_NodeFeaturesDecodeErrorZ");
	*ret_conv = CResult_NodeFeaturesDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NodeFeaturesDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NodeFeaturesDecodeErrorZ* o_conv = (LDKCResult_NodeFeaturesDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NodeFeaturesDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NodeFeaturesDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NodeFeaturesDecodeErrorZ _res_conv = *(LDKCResult_NodeFeaturesDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NodeFeaturesDecodeErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceFeaturesDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKInvoiceFeatures o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = InvoiceFeatures_clone(&o_conv);
	LDKCResult_InvoiceFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceFeaturesDecodeErrorZ), "LDKCResult_InvoiceFeaturesDecodeErrorZ");
	*ret_conv = CResult_InvoiceFeaturesDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceFeaturesDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_InvoiceFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceFeaturesDecodeErrorZ), "LDKCResult_InvoiceFeaturesDecodeErrorZ");
	*ret_conv = CResult_InvoiceFeaturesDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceFeaturesDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_InvoiceFeaturesDecodeErrorZ* o_conv = (LDKCResult_InvoiceFeaturesDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_InvoiceFeaturesDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceFeaturesDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_InvoiceFeaturesDecodeErrorZ _res_conv = *(LDKCResult_InvoiceFeaturesDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_InvoiceFeaturesDecodeErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTypeFeaturesDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelTypeFeatures o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelTypeFeatures_clone(&o_conv);
	LDKCResult_ChannelTypeFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTypeFeaturesDecodeErrorZ), "LDKCResult_ChannelTypeFeaturesDecodeErrorZ");
	*ret_conv = CResult_ChannelTypeFeaturesDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTypeFeaturesDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelTypeFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTypeFeaturesDecodeErrorZ), "LDKCResult_ChannelTypeFeaturesDecodeErrorZ");
	*ret_conv = CResult_ChannelTypeFeaturesDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTypeFeaturesDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelTypeFeaturesDecodeErrorZ* o_conv = (LDKCResult_ChannelTypeFeaturesDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelTypeFeaturesDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelTypeFeaturesDecodeErrorZ _res_conv = *(LDKCResult_ChannelTypeFeaturesDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelTypeFeaturesDecodeErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKDelayedPaymentOutputDescriptor o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = DelayedPaymentOutputDescriptor_clone(&o_conv);
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* o_conv = (LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ _res_conv = *(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* arg_conv = (LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DelayedPaymentOutputDescriptorDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* orig_conv = (LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ*)(orig & ~1);
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKStaticPaymentOutputDescriptor o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = StaticPaymentOutputDescriptor_clone(&o_conv);
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* o_conv = (LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ _res_conv = *(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* arg_conv = (LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StaticPaymentOutputDescriptorDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* orig_conv = (LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ*)(orig & ~1);
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKSpendableOutputDescriptor o_conv = *(LDKSpendableOutputDescriptor*)(o_ptr);
	o_conv = SpendableOutputDescriptor_clone((LDKSpendableOutputDescriptor*)(((uintptr_t)o) & ~1));
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SpendableOutputDescriptorDecodeErrorZ), "LDKCResult_SpendableOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_SpendableOutputDescriptorDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SpendableOutputDescriptorDecodeErrorZ), "LDKCResult_SpendableOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_SpendableOutputDescriptorDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* o_conv = (LDKCResult_SpendableOutputDescriptorDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ _res_conv = *(LDKCResult_SpendableOutputDescriptorDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_SpendableOutputDescriptorDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SpendableOutputDescriptorDecodeErrorZ), "LDKCResult_SpendableOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_SpendableOutputDescriptorDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* arg_conv = (LDKCResult_SpendableOutputDescriptorDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SpendableOutputDescriptorDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* orig_conv = (LDKCResult_SpendableOutputDescriptorDecodeErrorZ*)(orig & ~1);
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SpendableOutputDescriptorDecodeErrorZ), "LDKCResult_SpendableOutputDescriptorDecodeErrorZ");
	*ret_conv = CResult_SpendableOutputDescriptorDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1PaymentPreimageZ_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_PaymentPreimageZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKThirtyTwoBytes), "LDKCVec_PaymentPreimageZ Elements");
	else
		_res_constr.data = NULL;
	for (size_t i = 0; i < _res_constr.datalen; i++) {
		int8_tArray _res_conv_8 = (*env)->GetObjectArrayElement(env, _res, i);
		LDKThirtyTwoBytes _res_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, _res_conv_8) == 32);
		(*env)->GetByteArrayRegion(env, _res_conv_8, 0, 32, _res_conv_8_ref.data);
		_res_constr.data[i] = _res_conv_8_ref;
	}
	CVec_PaymentPreimageZ_free(_res_constr);
}

static inline uintptr_t C2Tuple_SignatureCVec_SignatureZZ_clone_ptr(LDKC2Tuple_SignatureCVec_SignatureZZ *NONNULL_PTR arg) {
	LDKC2Tuple_SignatureCVec_SignatureZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureCVec_SignatureZZ), "LDKC2Tuple_SignatureCVec_SignatureZZ");
	*ret_conv = C2Tuple_SignatureCVec_SignatureZZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureCVec_1SignatureZZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_SignatureCVec_SignatureZZ* arg_conv = (LDKC2Tuple_SignatureCVec_SignatureZZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_SignatureCVec_SignatureZZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureCVec_1SignatureZZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_SignatureCVec_SignatureZZ* orig_conv = (LDKC2Tuple_SignatureCVec_SignatureZZ*)(orig & ~1);
	LDKC2Tuple_SignatureCVec_SignatureZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureCVec_SignatureZZ), "LDKC2Tuple_SignatureCVec_SignatureZZ");
	*ret_conv = C2Tuple_SignatureCVec_SignatureZZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureCVec_1SignatureZZ_1new(JNIEnv *env, jclass clz, int8_tArray a, jobjectArray b) {
	LDKSignature a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 64);
	(*env)->GetByteArrayRegion(env, a, 0, 64, a_ref.compact_form);
	LDKCVec_SignatureZ b_constr;
	b_constr.datalen = (*env)->GetArrayLength(env, b);
	if (b_constr.datalen > 0)
		b_constr.data = MALLOC(b_constr.datalen * sizeof(LDKSignature), "LDKCVec_SignatureZ Elements");
	else
		b_constr.data = NULL;
	for (size_t i = 0; i < b_constr.datalen; i++) {
		int8_tArray b_conv_8 = (*env)->GetObjectArrayElement(env, b, i);
		LDKSignature b_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, b_conv_8) == 64);
		(*env)->GetByteArrayRegion(env, b_conv_8, 0, 64, b_conv_8_ref.compact_form);
		b_constr.data[i] = b_conv_8_ref;
	}
	LDKC2Tuple_SignatureCVec_SignatureZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureCVec_SignatureZZ), "LDKC2Tuple_SignatureCVec_SignatureZZ");
	*ret_conv = C2Tuple_SignatureCVec_SignatureZZ_new(a_ref, b_constr);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureCVec_1SignatureZZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_SignatureCVec_SignatureZZ _res_conv = *(LDKC2Tuple_SignatureCVec_SignatureZZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_SignatureCVec_SignatureZZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_SignatureCVec_SignatureZZ o_conv = *(LDKC2Tuple_SignatureCVec_SignatureZZ*)(o_ptr);
	o_conv = C2Tuple_SignatureCVec_SignatureZZ_clone((LDKC2Tuple_SignatureCVec_SignatureZZ*)(((uintptr_t)o) & ~1));
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ), "LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ), "LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* o_conv = (LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(o & ~1);
	jboolean ret_val = CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ _res_conv = *(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone_ptr(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR arg) {
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ), "LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* arg_conv = (LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureCVec_1SignatureZZNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* orig_conv = (LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ*)(orig & ~1);
	LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ), "LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKSignature o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 64);
	(*env)->GetByteArrayRegion(env, o, 0, 64, o_ref.compact_form);
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = CResult_SignatureNoneZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = CResult_SignatureNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_SignatureNoneZ* o_conv = (LDKCResult_SignatureNoneZ*)(o & ~1);
	jboolean ret_val = CResult_SignatureNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_SignatureNoneZ _res_conv = *(LDKCResult_SignatureNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_SignatureNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_SignatureNoneZ_clone_ptr(LDKCResult_SignatureNoneZ *NONNULL_PTR arg) {
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = CResult_SignatureNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_SignatureNoneZ* arg_conv = (LDKCResult_SignatureNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_SignatureNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignatureNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_SignatureNoneZ* orig_conv = (LDKCResult_SignatureNoneZ*)(orig & ~1);
	LDKCResult_SignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignatureNoneZ), "LDKCResult_SignatureNoneZ");
	*ret_conv = CResult_SignatureNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C2Tuple_SignatureSignatureZ_clone_ptr(LDKC2Tuple_SignatureSignatureZ *NONNULL_PTR arg) {
	LDKC2Tuple_SignatureSignatureZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureSignatureZ), "LDKC2Tuple_SignatureSignatureZ");
	*ret_conv = C2Tuple_SignatureSignatureZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureSignatureZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_SignatureSignatureZ* arg_conv = (LDKC2Tuple_SignatureSignatureZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_SignatureSignatureZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureSignatureZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_SignatureSignatureZ* orig_conv = (LDKC2Tuple_SignatureSignatureZ*)(orig & ~1);
	LDKC2Tuple_SignatureSignatureZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureSignatureZ), "LDKC2Tuple_SignatureSignatureZ");
	*ret_conv = C2Tuple_SignatureSignatureZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureSignatureZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int8_tArray b) {
	LDKSignature a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 64);
	(*env)->GetByteArrayRegion(env, a, 0, 64, a_ref.compact_form);
	LDKSignature b_ref;
	CHECK((*env)->GetArrayLength(env, b) == 64);
	(*env)->GetByteArrayRegion(env, b, 0, 64, b_ref.compact_form);
	LDKC2Tuple_SignatureSignatureZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_SignatureSignatureZ), "LDKC2Tuple_SignatureSignatureZ");
	*ret_conv = C2Tuple_SignatureSignatureZ_new(a_ref, b_ref);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1SignatureSignatureZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_SignatureSignatureZ _res_conv = *(LDKC2Tuple_SignatureSignatureZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_SignatureSignatureZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_SignatureSignatureZ o_conv = *(LDKC2Tuple_SignatureSignatureZ*)(o_ptr);
	o_conv = C2Tuple_SignatureSignatureZ_clone((LDKC2Tuple_SignatureSignatureZ*)(((uintptr_t)o) & ~1));
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureSignatureZNoneZ), "LDKCResult_C2Tuple_SignatureSignatureZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureSignatureZNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureSignatureZNoneZ), "LDKCResult_C2Tuple_SignatureSignatureZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureSignatureZNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* o_conv = (LDKCResult_C2Tuple_SignatureSignatureZNoneZ*)(o & ~1);
	jboolean ret_val = CResult_C2Tuple_SignatureSignatureZNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ _res_conv = *(LDKCResult_C2Tuple_SignatureSignatureZNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_C2Tuple_SignatureSignatureZNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_C2Tuple_SignatureSignatureZNoneZ_clone_ptr(LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR arg) {
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureSignatureZNoneZ), "LDKCResult_C2Tuple_SignatureSignatureZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureSignatureZNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* arg_conv = (LDKCResult_C2Tuple_SignatureSignatureZNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_C2Tuple_SignatureSignatureZNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1SignatureSignatureZNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* orig_conv = (LDKCResult_C2Tuple_SignatureSignatureZNoneZ*)(orig & ~1);
	LDKCResult_C2Tuple_SignatureSignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_SignatureSignatureZNoneZ), "LDKCResult_C2Tuple_SignatureSignatureZNoneZ");
	*ret_conv = CResult_C2Tuple_SignatureSignatureZNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKSecretKey o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.bytes);
	LDKCResult_SecretKeyNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyNoneZ), "LDKCResult_SecretKeyNoneZ");
	*ret_conv = CResult_SecretKeyNoneZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_SecretKeyNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyNoneZ), "LDKCResult_SecretKeyNoneZ");
	*ret_conv = CResult_SecretKeyNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_SecretKeyNoneZ* o_conv = (LDKCResult_SecretKeyNoneZ*)(o & ~1);
	jboolean ret_val = CResult_SecretKeyNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_SecretKeyNoneZ _res_conv = *(LDKCResult_SecretKeyNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_SecretKeyNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_SecretKeyNoneZ_clone_ptr(LDKCResult_SecretKeyNoneZ *NONNULL_PTR arg) {
	LDKCResult_SecretKeyNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyNoneZ), "LDKCResult_SecretKeyNoneZ");
	*ret_conv = CResult_SecretKeyNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_SecretKeyNoneZ* arg_conv = (LDKCResult_SecretKeyNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_SecretKeyNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SecretKeyNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_SecretKeyNoneZ* orig_conv = (LDKCResult_SecretKeyNoneZ*)(orig & ~1);
	LDKCResult_SecretKeyNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyNoneZ), "LDKCResult_SecretKeyNoneZ");
	*ret_conv = CResult_SecretKeyNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKSign o_conv = *(LDKSign*)(o_ptr);
	if (o_conv.free == LDKSign_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKSign_JCalls_cloned(&o_conv);
	}
	LDKCResult_SignDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SignDecodeErrorZ), "LDKCResult_SignDecodeErrorZ");
	*ret_conv = CResult_SignDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_SignDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SignDecodeErrorZ), "LDKCResult_SignDecodeErrorZ");
	*ret_conv = CResult_SignDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_SignDecodeErrorZ* o_conv = (LDKCResult_SignDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_SignDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_SignDecodeErrorZ _res_conv = *(LDKCResult_SignDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_SignDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_SignDecodeErrorZ_clone_ptr(LDKCResult_SignDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_SignDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SignDecodeErrorZ), "LDKCResult_SignDecodeErrorZ");
	*ret_conv = CResult_SignDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_SignDecodeErrorZ* arg_conv = (LDKCResult_SignDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_SignDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_SignDecodeErrorZ* orig_conv = (LDKCResult_SignDecodeErrorZ*)(orig & ~1);
	LDKCResult_SignDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SignDecodeErrorZ), "LDKCResult_SignDecodeErrorZ");
	*ret_conv = CResult_SignDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1u5Z_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_u5Z _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKu5), "LDKCVec_u5Z Elements");
	else
		_res_constr.data = NULL;
	int8_t* _res_vals = (*env)->GetByteArrayElements (env, _res, NULL);
	for (size_t h = 0; h < _res_constr.datalen; h++) {
		int8_t _res_conv_7 = _res_vals[h];
		
		_res_constr.data[h] = (LDKu5){ ._0 = _res_conv_7 };
	}
	(*env)->ReleaseByteArrayElements(env, _res, _res_vals, 0);
	CVec_u5Z_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKRecoverableSignature o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 68);
	(*env)->GetByteArrayRegion(env, o, 0, 68, o_ref.serialized_form);
	LDKCResult_RecoverableSignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_RecoverableSignatureNoneZ), "LDKCResult_RecoverableSignatureNoneZ");
	*ret_conv = CResult_RecoverableSignatureNoneZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_RecoverableSignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_RecoverableSignatureNoneZ), "LDKCResult_RecoverableSignatureNoneZ");
	*ret_conv = CResult_RecoverableSignatureNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RecoverableSignatureNoneZ* o_conv = (LDKCResult_RecoverableSignatureNoneZ*)(o & ~1);
	jboolean ret_val = CResult_RecoverableSignatureNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RecoverableSignatureNoneZ _res_conv = *(LDKCResult_RecoverableSignatureNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RecoverableSignatureNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_RecoverableSignatureNoneZ_clone_ptr(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR arg) {
	LDKCResult_RecoverableSignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_RecoverableSignatureNoneZ), "LDKCResult_RecoverableSignatureNoneZ");
	*ret_conv = CResult_RecoverableSignatureNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RecoverableSignatureNoneZ* arg_conv = (LDKCResult_RecoverableSignatureNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_RecoverableSignatureNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RecoverableSignatureNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RecoverableSignatureNoneZ* orig_conv = (LDKCResult_RecoverableSignatureNoneZ*)(orig & ~1);
	LDKCResult_RecoverableSignatureNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_RecoverableSignatureNoneZ), "LDKCResult_RecoverableSignatureNoneZ");
	*ret_conv = CResult_RecoverableSignatureNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1u8Z_1free(JNIEnv *env, jclass clz, int8_tArray _res) {
	LDKCVec_u8Z _res_ref;
	_res_ref.datalen = (*env)->GetArrayLength(env, _res);
	_res_ref.data = MALLOC(_res_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, _res, 0, _res_ref.datalen, _res_ref.data);
	CVec_u8Z_free(_res_ref);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1CVec_1u8ZZ_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_CVec_u8ZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKCVec_u8Z), "LDKCVec_CVec_u8ZZ Elements");
	else
		_res_constr.data = NULL;
	for (size_t i = 0; i < _res_constr.datalen; i++) {
		int8_tArray _res_conv_8 = (*env)->GetObjectArrayElement(env, _res, i);
		LDKCVec_u8Z _res_conv_8_ref;
		_res_conv_8_ref.datalen = (*env)->GetArrayLength(env, _res_conv_8);
		_res_conv_8_ref.data = MALLOC(_res_conv_8_ref.datalen, "LDKCVec_u8Z Bytes");
		(*env)->GetByteArrayRegion(env, _res_conv_8, 0, _res_conv_8_ref.datalen, _res_conv_8_ref.data);
		_res_constr.data[i] = _res_conv_8_ref;
	}
	CVec_CVec_u8ZZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1ok(JNIEnv *env, jclass clz, jobjectArray o) {
	LDKCVec_CVec_u8ZZ o_constr;
	o_constr.datalen = (*env)->GetArrayLength(env, o);
	if (o_constr.datalen > 0)
		o_constr.data = MALLOC(o_constr.datalen * sizeof(LDKCVec_u8Z), "LDKCVec_CVec_u8ZZ Elements");
	else
		o_constr.data = NULL;
	for (size_t i = 0; i < o_constr.datalen; i++) {
		int8_tArray o_conv_8 = (*env)->GetObjectArrayElement(env, o, i);
		LDKCVec_u8Z o_conv_8_ref;
		o_conv_8_ref.datalen = (*env)->GetArrayLength(env, o_conv_8);
		o_conv_8_ref.data = MALLOC(o_conv_8_ref.datalen, "LDKCVec_u8Z Bytes");
		(*env)->GetByteArrayRegion(env, o_conv_8, 0, o_conv_8_ref.datalen, o_conv_8_ref.data);
		o_constr.data[i] = o_conv_8_ref;
	}
	LDKCResult_CVec_CVec_u8ZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_CVec_u8ZZNoneZ), "LDKCResult_CVec_CVec_u8ZZNoneZ");
	*ret_conv = CResult_CVec_CVec_u8ZZNoneZ_ok(o_constr);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_CVec_CVec_u8ZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_CVec_u8ZZNoneZ), "LDKCResult_CVec_CVec_u8ZZNoneZ");
	*ret_conv = CResult_CVec_CVec_u8ZZNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CVec_CVec_u8ZZNoneZ* o_conv = (LDKCResult_CVec_CVec_u8ZZNoneZ*)(o & ~1);
	jboolean ret_val = CResult_CVec_CVec_u8ZZNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CVec_CVec_u8ZZNoneZ _res_conv = *(LDKCResult_CVec_CVec_u8ZZNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CVec_CVec_u8ZZNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_CVec_CVec_u8ZZNoneZ_clone_ptr(LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR arg) {
	LDKCResult_CVec_CVec_u8ZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_CVec_u8ZZNoneZ), "LDKCResult_CVec_CVec_u8ZZNoneZ");
	*ret_conv = CResult_CVec_CVec_u8ZZNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CVec_CVec_u8ZZNoneZ* arg_conv = (LDKCResult_CVec_CVec_u8ZZNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_CVec_CVec_u8ZZNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1CVec_1u8ZZNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CVec_CVec_u8ZZNoneZ* orig_conv = (LDKCResult_CVec_CVec_u8ZZNoneZ*)(orig & ~1);
	LDKCResult_CVec_CVec_u8ZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_CVec_u8ZZNoneZ), "LDKCResult_CVec_CVec_u8ZZNoneZ");
	*ret_conv = CResult_CVec_CVec_u8ZZNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKInMemorySigner o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = InMemorySigner_clone(&o_conv);
	LDKCResult_InMemorySignerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InMemorySignerDecodeErrorZ), "LDKCResult_InMemorySignerDecodeErrorZ");
	*ret_conv = CResult_InMemorySignerDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_InMemorySignerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InMemorySignerDecodeErrorZ), "LDKCResult_InMemorySignerDecodeErrorZ");
	*ret_conv = CResult_InMemorySignerDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_InMemorySignerDecodeErrorZ* o_conv = (LDKCResult_InMemorySignerDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_InMemorySignerDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_InMemorySignerDecodeErrorZ _res_conv = *(LDKCResult_InMemorySignerDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_InMemorySignerDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_InMemorySignerDecodeErrorZ_clone_ptr(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_InMemorySignerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InMemorySignerDecodeErrorZ), "LDKCResult_InMemorySignerDecodeErrorZ");
	*ret_conv = CResult_InMemorySignerDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_InMemorySignerDecodeErrorZ* arg_conv = (LDKCResult_InMemorySignerDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_InMemorySignerDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InMemorySignerDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_InMemorySignerDecodeErrorZ* orig_conv = (LDKCResult_InMemorySignerDecodeErrorZ*)(orig & ~1);
	LDKCResult_InMemorySignerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InMemorySignerDecodeErrorZ), "LDKCResult_InMemorySignerDecodeErrorZ");
	*ret_conv = CResult_InMemorySignerDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1TxOutZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_TxOutZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKTxOut), "LDKCVec_TxOutZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t h = 0; h < _res_constr.datalen; h++) {
		int64_t _res_conv_7 = _res_vals[h];
		void* _res_conv_7_ptr = (void*)(((uintptr_t)_res_conv_7) & ~1);
		CHECK_ACCESS(_res_conv_7_ptr);
		LDKTxOut _res_conv_7_conv = *(LDKTxOut*)(_res_conv_7_ptr);
		FREE((void*)_res_conv_7);
		_res_constr.data[h] = _res_conv_7_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_TxOutZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKTransaction o_ref;
	o_ref.datalen = (*env)->GetArrayLength(env, o);
	o_ref.data = MALLOC(o_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, o, 0, o_ref.datalen, o_ref.data);
	o_ref.data_is_owned = true;
	LDKCResult_TransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TransactionNoneZ), "LDKCResult_TransactionNoneZ");
	*ret_conv = CResult_TransactionNoneZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_TransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TransactionNoneZ), "LDKCResult_TransactionNoneZ");
	*ret_conv = CResult_TransactionNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_TransactionNoneZ* o_conv = (LDKCResult_TransactionNoneZ*)(o & ~1);
	jboolean ret_val = CResult_TransactionNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_TransactionNoneZ _res_conv = *(LDKCResult_TransactionNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_TransactionNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_TransactionNoneZ_clone_ptr(LDKCResult_TransactionNoneZ *NONNULL_PTR arg) {
	LDKCResult_TransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TransactionNoneZ), "LDKCResult_TransactionNoneZ");
	*ret_conv = CResult_TransactionNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_TransactionNoneZ* arg_conv = (LDKCResult_TransactionNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_TransactionNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1TransactionNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_TransactionNoneZ* orig_conv = (LDKCResult_TransactionNoneZ*)(orig & ~1);
	LDKCResult_TransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TransactionNoneZ), "LDKCResult_TransactionNoneZ");
	*ret_conv = CResult_TransactionNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C2Tuple_BlockHashChannelMonitorZ_clone_ptr(LDKC2Tuple_BlockHashChannelMonitorZ *NONNULL_PTR arg) {
	LDKC2Tuple_BlockHashChannelMonitorZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_BlockHashChannelMonitorZ), "LDKC2Tuple_BlockHashChannelMonitorZ");
	*ret_conv = C2Tuple_BlockHashChannelMonitorZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelMonitorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_BlockHashChannelMonitorZ* arg_conv = (LDKC2Tuple_BlockHashChannelMonitorZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_BlockHashChannelMonitorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelMonitorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_BlockHashChannelMonitorZ* orig_conv = (LDKC2Tuple_BlockHashChannelMonitorZ*)(orig & ~1);
	LDKC2Tuple_BlockHashChannelMonitorZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_BlockHashChannelMonitorZ), "LDKC2Tuple_BlockHashChannelMonitorZ");
	*ret_conv = C2Tuple_BlockHashChannelMonitorZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelMonitorZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int64_t b) {
	LDKThirtyTwoBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 32);
	(*env)->GetByteArrayRegion(env, a, 0, 32, a_ref.data);
	LDKChannelMonitor b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = (b & 1) || (b == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	b_conv = ChannelMonitor_clone(&b_conv);
	LDKC2Tuple_BlockHashChannelMonitorZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_BlockHashChannelMonitorZ), "LDKC2Tuple_BlockHashChannelMonitorZ");
	*ret_conv = C2Tuple_BlockHashChannelMonitorZ_new(a_ref, b_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelMonitorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_BlockHashChannelMonitorZ _res_conv = *(LDKC2Tuple_BlockHashChannelMonitorZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_BlockHashChannelMonitorZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C2Tuple_1BlockHashChannelMonitorZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C2Tuple_BlockHashChannelMonitorZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC2Tuple_BlockHashChannelMonitorZ), "LDKCVec_C2Tuple_BlockHashChannelMonitorZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t j = 0; j < _res_constr.datalen; j++) {
		int64_t _res_conv_35 = _res_vals[j];
		void* _res_conv_35_ptr = (void*)(((uintptr_t)_res_conv_35) & ~1);
		CHECK_ACCESS(_res_conv_35_ptr);
		LDKC2Tuple_BlockHashChannelMonitorZ _res_conv_35_conv = *(LDKC2Tuple_BlockHashChannelMonitorZ*)(_res_conv_35_ptr);
		FREE((void*)_res_conv_35);
		_res_constr.data[j] = _res_conv_35_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C2Tuple_BlockHashChannelMonitorZZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1ok(JNIEnv *env, jclass clz, int64_tArray o) {
	LDKCVec_C2Tuple_BlockHashChannelMonitorZZ o_constr;
	o_constr.datalen = (*env)->GetArrayLength(env, o);
	if (o_constr.datalen > 0)
		o_constr.data = MALLOC(o_constr.datalen * sizeof(LDKC2Tuple_BlockHashChannelMonitorZ), "LDKCVec_C2Tuple_BlockHashChannelMonitorZZ Elements");
	else
		o_constr.data = NULL;
	int64_t* o_vals = (*env)->GetLongArrayElements (env, o, NULL);
	for (size_t j = 0; j < o_constr.datalen; j++) {
		int64_t o_conv_35 = o_vals[j];
		void* o_conv_35_ptr = (void*)(((uintptr_t)o_conv_35) & ~1);
		CHECK_ACCESS(o_conv_35_ptr);
		LDKC2Tuple_BlockHashChannelMonitorZ o_conv_35_conv = *(LDKC2Tuple_BlockHashChannelMonitorZ*)(o_conv_35_ptr);
		o_conv_35_conv = C2Tuple_BlockHashChannelMonitorZ_clone((LDKC2Tuple_BlockHashChannelMonitorZ*)(((uintptr_t)o_conv_35) & ~1));
		o_constr.data[j] = o_conv_35_conv;
	}
	(*env)->ReleaseLongArrayElements(env, o, o_vals, 0);
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ), "LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ");
	*ret_conv = CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_ok(o_constr);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKIOError e_conv = LDKIOError_from_java(env, e);
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ), "LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ");
	*ret_conv = CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* o_conv = (LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ*)(o & ~1);
	jboolean ret_val = CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ _res_conv = *(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone_ptr(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR arg) {
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ), "LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ");
	*ret_conv = CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* arg_conv = (LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1C2Tuple_1BlockHashChannelMonitorZZErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* orig_conv = (LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ*)(orig & ~1);
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ), "LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ");
	*ret_conv = CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u16Z_1some(JNIEnv *env, jclass clz, int16_t o) {
	LDKCOption_u16Z *ret_copy = MALLOC(sizeof(LDKCOption_u16Z), "LDKCOption_u16Z");
	*ret_copy = COption_u16Z_some(o);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u16Z_1none(JNIEnv *env, jclass clz) {
	LDKCOption_u16Z *ret_copy = MALLOC(sizeof(LDKCOption_u16Z), "LDKCOption_u16Z");
	*ret_copy = COption_u16Z_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1u16Z_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_u16Z _res_conv = *(LDKCOption_u16Z*)(_res_ptr);
	FREE((void*)_res);
	COption_u16Z_free(_res_conv);
}

static inline uintptr_t COption_u16Z_clone_ptr(LDKCOption_u16Z *NONNULL_PTR arg) {
	LDKCOption_u16Z *ret_copy = MALLOC(sizeof(LDKCOption_u16Z), "LDKCOption_u16Z");
	*ret_copy = COption_u16Z_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u16Z_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_u16Z* arg_conv = (LDKCOption_u16Z*)arg;
	int64_t ret_val = COption_u16Z_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1u16Z_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_u16Z* orig_conv = (LDKCOption_u16Z*)orig;
	LDKCOption_u16Z *ret_copy = MALLOC(sizeof(LDKCOption_u16Z), "LDKCOption_u16Z");
	*ret_copy = COption_u16Z_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = CResult_NoneAPIErrorZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKAPIError e_conv = *(LDKAPIError*)(e_ptr);
	e_conv = APIError_clone((LDKAPIError*)(((uintptr_t)e) & ~1));
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = CResult_NoneAPIErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NoneAPIErrorZ* o_conv = (LDKCResult_NoneAPIErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NoneAPIErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NoneAPIErrorZ _res_conv = *(LDKCResult_NoneAPIErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NoneAPIErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NoneAPIErrorZ_clone_ptr(LDKCResult_NoneAPIErrorZ *NONNULL_PTR arg) {
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = CResult_NoneAPIErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NoneAPIErrorZ* arg_conv = (LDKCResult_NoneAPIErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NoneAPIErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneAPIErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NoneAPIErrorZ* orig_conv = (LDKCResult_NoneAPIErrorZ*)(orig & ~1);
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = CResult_NoneAPIErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1CResult_1NoneAPIErrorZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_CResult_NoneAPIErrorZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKCResult_NoneAPIErrorZ), "LDKCVec_CResult_NoneAPIErrorZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t w = 0; w < _res_constr.datalen; w++) {
		int64_t _res_conv_22 = _res_vals[w];
		void* _res_conv_22_ptr = (void*)(((uintptr_t)_res_conv_22) & ~1);
		CHECK_ACCESS(_res_conv_22_ptr);
		LDKCResult_NoneAPIErrorZ _res_conv_22_conv = *(LDKCResult_NoneAPIErrorZ*)(_res_conv_22_ptr);
		FREE((void*)_res_conv_22);
		_res_constr.data[w] = _res_conv_22_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_CResult_NoneAPIErrorZZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1APIErrorZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_APIErrorZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKAPIError), "LDKCVec_APIErrorZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t k = 0; k < _res_constr.datalen; k++) {
		int64_t _res_conv_10 = _res_vals[k];
		void* _res_conv_10_ptr = (void*)(((uintptr_t)_res_conv_10) & ~1);
		CHECK_ACCESS(_res_conv_10_ptr);
		LDKAPIError _res_conv_10_conv = *(LDKAPIError*)(_res_conv_10_ptr);
		FREE((void*)_res_conv_10);
		_res_constr.data[k] = _res_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_APIErrorZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKThirtyTwoBytes o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.data);
	LDKCResult__u832APIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult__u832APIErrorZ), "LDKCResult__u832APIErrorZ");
	*ret_conv = CResult__u832APIErrorZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKAPIError e_conv = *(LDKAPIError*)(e_ptr);
	e_conv = APIError_clone((LDKAPIError*)(((uintptr_t)e) & ~1));
	LDKCResult__u832APIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult__u832APIErrorZ), "LDKCResult__u832APIErrorZ");
	*ret_conv = CResult__u832APIErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult__u832APIErrorZ* o_conv = (LDKCResult__u832APIErrorZ*)(o & ~1);
	jboolean ret_val = CResult__u832APIErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult__u832APIErrorZ _res_conv = *(LDKCResult__u832APIErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult__u832APIErrorZ_free(_res_conv);
}

static inline uintptr_t CResult__u832APIErrorZ_clone_ptr(LDKCResult__u832APIErrorZ *NONNULL_PTR arg) {
	LDKCResult__u832APIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult__u832APIErrorZ), "LDKCResult__u832APIErrorZ");
	*ret_conv = CResult__u832APIErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult__u832APIErrorZ* arg_conv = (LDKCResult__u832APIErrorZ*)(arg & ~1);
	int64_t ret_val = CResult__u832APIErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1_1u832APIErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult__u832APIErrorZ* orig_conv = (LDKCResult__u832APIErrorZ*)(orig & ~1);
	LDKCResult__u832APIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult__u832APIErrorZ), "LDKCResult__u832APIErrorZ");
	*ret_conv = CResult__u832APIErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKThirtyTwoBytes o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.data);
	LDKCResult_PaymentIdPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentSendFailureZ), "LDKCResult_PaymentIdPaymentSendFailureZ");
	*ret_conv = CResult_PaymentIdPaymentSendFailureZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKPaymentSendFailure e_conv = *(LDKPaymentSendFailure*)(e_ptr);
	e_conv = PaymentSendFailure_clone((LDKPaymentSendFailure*)(((uintptr_t)e) & ~1));
	LDKCResult_PaymentIdPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentSendFailureZ), "LDKCResult_PaymentIdPaymentSendFailureZ");
	*ret_conv = CResult_PaymentIdPaymentSendFailureZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PaymentIdPaymentSendFailureZ* o_conv = (LDKCResult_PaymentIdPaymentSendFailureZ*)(o & ~1);
	jboolean ret_val = CResult_PaymentIdPaymentSendFailureZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PaymentIdPaymentSendFailureZ _res_conv = *(LDKCResult_PaymentIdPaymentSendFailureZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PaymentIdPaymentSendFailureZ_free(_res_conv);
}

static inline uintptr_t CResult_PaymentIdPaymentSendFailureZ_clone_ptr(LDKCResult_PaymentIdPaymentSendFailureZ *NONNULL_PTR arg) {
	LDKCResult_PaymentIdPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentSendFailureZ), "LDKCResult_PaymentIdPaymentSendFailureZ");
	*ret_conv = CResult_PaymentIdPaymentSendFailureZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PaymentIdPaymentSendFailureZ* arg_conv = (LDKCResult_PaymentIdPaymentSendFailureZ*)(arg & ~1);
	int64_t ret_val = CResult_PaymentIdPaymentSendFailureZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentSendFailureZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PaymentIdPaymentSendFailureZ* orig_conv = (LDKCResult_PaymentIdPaymentSendFailureZ*)(orig & ~1);
	LDKCResult_PaymentIdPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentSendFailureZ), "LDKCResult_PaymentIdPaymentSendFailureZ");
	*ret_conv = CResult_PaymentIdPaymentSendFailureZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NonePaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePaymentSendFailureZ), "LDKCResult_NonePaymentSendFailureZ");
	*ret_conv = CResult_NonePaymentSendFailureZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKPaymentSendFailure e_conv = *(LDKPaymentSendFailure*)(e_ptr);
	e_conv = PaymentSendFailure_clone((LDKPaymentSendFailure*)(((uintptr_t)e) & ~1));
	LDKCResult_NonePaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePaymentSendFailureZ), "LDKCResult_NonePaymentSendFailureZ");
	*ret_conv = CResult_NonePaymentSendFailureZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NonePaymentSendFailureZ* o_conv = (LDKCResult_NonePaymentSendFailureZ*)(o & ~1);
	jboolean ret_val = CResult_NonePaymentSendFailureZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NonePaymentSendFailureZ _res_conv = *(LDKCResult_NonePaymentSendFailureZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NonePaymentSendFailureZ_free(_res_conv);
}

static inline uintptr_t CResult_NonePaymentSendFailureZ_clone_ptr(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR arg) {
	LDKCResult_NonePaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePaymentSendFailureZ), "LDKCResult_NonePaymentSendFailureZ");
	*ret_conv = CResult_NonePaymentSendFailureZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NonePaymentSendFailureZ* arg_conv = (LDKCResult_NonePaymentSendFailureZ*)(arg & ~1);
	int64_t ret_val = CResult_NonePaymentSendFailureZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePaymentSendFailureZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NonePaymentSendFailureZ* orig_conv = (LDKCResult_NonePaymentSendFailureZ*)(orig & ~1);
	LDKCResult_NonePaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePaymentSendFailureZ), "LDKCResult_NonePaymentSendFailureZ");
	*ret_conv = CResult_NonePaymentSendFailureZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C2Tuple_PaymentHashPaymentIdZ_clone_ptr(LDKC2Tuple_PaymentHashPaymentIdZ *NONNULL_PTR arg) {
	LDKC2Tuple_PaymentHashPaymentIdZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentIdZ), "LDKC2Tuple_PaymentHashPaymentIdZ");
	*ret_conv = C2Tuple_PaymentHashPaymentIdZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentIdZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_PaymentHashPaymentIdZ* arg_conv = (LDKC2Tuple_PaymentHashPaymentIdZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_PaymentHashPaymentIdZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentIdZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_PaymentHashPaymentIdZ* orig_conv = (LDKC2Tuple_PaymentHashPaymentIdZ*)(orig & ~1);
	LDKC2Tuple_PaymentHashPaymentIdZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentIdZ), "LDKC2Tuple_PaymentHashPaymentIdZ");
	*ret_conv = C2Tuple_PaymentHashPaymentIdZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentIdZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int8_tArray b) {
	LDKThirtyTwoBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 32);
	(*env)->GetByteArrayRegion(env, a, 0, 32, a_ref.data);
	LDKThirtyTwoBytes b_ref;
	CHECK((*env)->GetArrayLength(env, b) == 32);
	(*env)->GetByteArrayRegion(env, b, 0, 32, b_ref.data);
	LDKC2Tuple_PaymentHashPaymentIdZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentIdZ), "LDKC2Tuple_PaymentHashPaymentIdZ");
	*ret_conv = C2Tuple_PaymentHashPaymentIdZ_new(a_ref, b_ref);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentIdZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_PaymentHashPaymentIdZ _res_conv = *(LDKC2Tuple_PaymentHashPaymentIdZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_PaymentHashPaymentIdZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_PaymentHashPaymentIdZ o_conv = *(LDKC2Tuple_PaymentHashPaymentIdZ*)(o_ptr);
	o_conv = C2Tuple_PaymentHashPaymentIdZ_clone((LDKC2Tuple_PaymentHashPaymentIdZ*)(((uintptr_t)o) & ~1));
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ), "LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKPaymentSendFailure e_conv = *(LDKPaymentSendFailure*)(e_ptr);
	e_conv = PaymentSendFailure_clone((LDKPaymentSendFailure*)(((uintptr_t)e) & ~1));
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ), "LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* o_conv = (LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ*)(o & ~1);
	jboolean ret_val = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ _res_conv = *(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_free(_res_conv);
}

static inline uintptr_t CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone_ptr(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR arg) {
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ), "LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* arg_conv = (LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ*)(arg & ~1);
	int64_t ret_val = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentIdZPaymentSendFailureZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* orig_conv = (LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ*)(orig & ~1);
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ), "LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1NetAddressZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_NetAddressZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKNetAddress), "LDKCVec_NetAddressZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t m = 0; m < _res_constr.datalen; m++) {
		int64_t _res_conv_12 = _res_vals[m];
		void* _res_conv_12_ptr = (void*)(((uintptr_t)_res_conv_12) & ~1);
		CHECK_ACCESS(_res_conv_12_ptr);
		LDKNetAddress _res_conv_12_conv = *(LDKNetAddress*)(_res_conv_12_ptr);
		FREE((void*)_res_conv_12);
		_res_constr.data[m] = _res_conv_12_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_NetAddressZ_free(_res_constr);
}

static inline uintptr_t C2Tuple_PaymentHashPaymentSecretZ_clone_ptr(LDKC2Tuple_PaymentHashPaymentSecretZ *NONNULL_PTR arg) {
	LDKC2Tuple_PaymentHashPaymentSecretZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentSecretZ), "LDKC2Tuple_PaymentHashPaymentSecretZ");
	*ret_conv = C2Tuple_PaymentHashPaymentSecretZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentSecretZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_PaymentHashPaymentSecretZ* arg_conv = (LDKC2Tuple_PaymentHashPaymentSecretZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_PaymentHashPaymentSecretZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentSecretZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_PaymentHashPaymentSecretZ* orig_conv = (LDKC2Tuple_PaymentHashPaymentSecretZ*)(orig & ~1);
	LDKC2Tuple_PaymentHashPaymentSecretZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentSecretZ), "LDKC2Tuple_PaymentHashPaymentSecretZ");
	*ret_conv = C2Tuple_PaymentHashPaymentSecretZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentSecretZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int8_tArray b) {
	LDKThirtyTwoBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 32);
	(*env)->GetByteArrayRegion(env, a, 0, 32, a_ref.data);
	LDKThirtyTwoBytes b_ref;
	CHECK((*env)->GetArrayLength(env, b) == 32);
	(*env)->GetByteArrayRegion(env, b, 0, 32, b_ref.data);
	LDKC2Tuple_PaymentHashPaymentSecretZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PaymentHashPaymentSecretZ), "LDKC2Tuple_PaymentHashPaymentSecretZ");
	*ret_conv = C2Tuple_PaymentHashPaymentSecretZ_new(a_ref, b_ref);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PaymentHashPaymentSecretZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_PaymentHashPaymentSecretZ _res_conv = *(LDKC2Tuple_PaymentHashPaymentSecretZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_PaymentHashPaymentSecretZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_PaymentHashPaymentSecretZ o_conv = *(LDKC2Tuple_PaymentHashPaymentSecretZ*)(o_ptr);
	o_conv = C2Tuple_PaymentHashPaymentSecretZ_clone((LDKC2Tuple_PaymentHashPaymentSecretZ*)(((uintptr_t)o) & ~1));
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* o_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ*)(o & ~1);
	jboolean ret_val = CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ _res_conv = *(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone_ptr(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR arg) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* arg_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* orig_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ*)(orig & ~1);
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_PaymentHashPaymentSecretZ o_conv = *(LDKC2Tuple_PaymentHashPaymentSecretZ*)(o_ptr);
	o_conv = C2Tuple_PaymentHashPaymentSecretZ_clone((LDKC2Tuple_PaymentHashPaymentSecretZ*)(((uintptr_t)o) & ~1));
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKAPIError e_conv = *(LDKAPIError*)(e_ptr);
	e_conv = APIError_clone((LDKAPIError*)(((uintptr_t)e) & ~1));
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* o_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ*)(o & ~1);
	jboolean ret_val = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ _res_conv = *(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone_ptr(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR arg) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* arg_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1PaymentHashPaymentSecretZAPIErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* orig_conv = (LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ*)(orig & ~1);
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ");
	*ret_conv = CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKThirtyTwoBytes o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.data);
	LDKCResult_PaymentSecretNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretNoneZ), "LDKCResult_PaymentSecretNoneZ");
	*ret_conv = CResult_PaymentSecretNoneZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_PaymentSecretNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretNoneZ), "LDKCResult_PaymentSecretNoneZ");
	*ret_conv = CResult_PaymentSecretNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PaymentSecretNoneZ* o_conv = (LDKCResult_PaymentSecretNoneZ*)(o & ~1);
	jboolean ret_val = CResult_PaymentSecretNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PaymentSecretNoneZ _res_conv = *(LDKCResult_PaymentSecretNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PaymentSecretNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_PaymentSecretNoneZ_clone_ptr(LDKCResult_PaymentSecretNoneZ *NONNULL_PTR arg) {
	LDKCResult_PaymentSecretNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretNoneZ), "LDKCResult_PaymentSecretNoneZ");
	*ret_conv = CResult_PaymentSecretNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PaymentSecretNoneZ* arg_conv = (LDKCResult_PaymentSecretNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_PaymentSecretNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PaymentSecretNoneZ* orig_conv = (LDKCResult_PaymentSecretNoneZ*)(orig & ~1);
	LDKCResult_PaymentSecretNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretNoneZ), "LDKCResult_PaymentSecretNoneZ");
	*ret_conv = CResult_PaymentSecretNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKThirtyTwoBytes o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.data);
	LDKCResult_PaymentSecretAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretAPIErrorZ), "LDKCResult_PaymentSecretAPIErrorZ");
	*ret_conv = CResult_PaymentSecretAPIErrorZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKAPIError e_conv = *(LDKAPIError*)(e_ptr);
	e_conv = APIError_clone((LDKAPIError*)(((uintptr_t)e) & ~1));
	LDKCResult_PaymentSecretAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretAPIErrorZ), "LDKCResult_PaymentSecretAPIErrorZ");
	*ret_conv = CResult_PaymentSecretAPIErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PaymentSecretAPIErrorZ* o_conv = (LDKCResult_PaymentSecretAPIErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PaymentSecretAPIErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PaymentSecretAPIErrorZ _res_conv = *(LDKCResult_PaymentSecretAPIErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PaymentSecretAPIErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PaymentSecretAPIErrorZ_clone_ptr(LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR arg) {
	LDKCResult_PaymentSecretAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretAPIErrorZ), "LDKCResult_PaymentSecretAPIErrorZ");
	*ret_conv = CResult_PaymentSecretAPIErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PaymentSecretAPIErrorZ* arg_conv = (LDKCResult_PaymentSecretAPIErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PaymentSecretAPIErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentSecretAPIErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PaymentSecretAPIErrorZ* orig_conv = (LDKCResult_PaymentSecretAPIErrorZ*)(orig & ~1);
	LDKCResult_PaymentSecretAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretAPIErrorZ), "LDKCResult_PaymentSecretAPIErrorZ");
	*ret_conv = CResult_PaymentSecretAPIErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKThirtyTwoBytes o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.data);
	LDKCResult_PaymentPreimageAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentPreimageAPIErrorZ), "LDKCResult_PaymentPreimageAPIErrorZ");
	*ret_conv = CResult_PaymentPreimageAPIErrorZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKAPIError e_conv = *(LDKAPIError*)(e_ptr);
	e_conv = APIError_clone((LDKAPIError*)(((uintptr_t)e) & ~1));
	LDKCResult_PaymentPreimageAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentPreimageAPIErrorZ), "LDKCResult_PaymentPreimageAPIErrorZ");
	*ret_conv = CResult_PaymentPreimageAPIErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PaymentPreimageAPIErrorZ* o_conv = (LDKCResult_PaymentPreimageAPIErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PaymentPreimageAPIErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PaymentPreimageAPIErrorZ _res_conv = *(LDKCResult_PaymentPreimageAPIErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PaymentPreimageAPIErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PaymentPreimageAPIErrorZ_clone_ptr(LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR arg) {
	LDKCResult_PaymentPreimageAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentPreimageAPIErrorZ), "LDKCResult_PaymentPreimageAPIErrorZ");
	*ret_conv = CResult_PaymentPreimageAPIErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PaymentPreimageAPIErrorZ* arg_conv = (LDKCResult_PaymentPreimageAPIErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PaymentPreimageAPIErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentPreimageAPIErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PaymentPreimageAPIErrorZ* orig_conv = (LDKCResult_PaymentPreimageAPIErrorZ*)(orig & ~1);
	LDKCResult_PaymentPreimageAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentPreimageAPIErrorZ), "LDKCResult_PaymentPreimageAPIErrorZ");
	*ret_conv = CResult_PaymentPreimageAPIErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCounterpartyForwardingInfo o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = CounterpartyForwardingInfo_clone(&o_conv);
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ), "LDKCResult_CounterpartyForwardingInfoDecodeErrorZ");
	*ret_conv = CResult_CounterpartyForwardingInfoDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ), "LDKCResult_CounterpartyForwardingInfoDecodeErrorZ");
	*ret_conv = CResult_CounterpartyForwardingInfoDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* o_conv = (LDKCResult_CounterpartyForwardingInfoDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ _res_conv = *(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CounterpartyForwardingInfoDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ), "LDKCResult_CounterpartyForwardingInfoDecodeErrorZ");
	*ret_conv = CResult_CounterpartyForwardingInfoDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* arg_conv = (LDKCResult_CounterpartyForwardingInfoDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CounterpartyForwardingInfoDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* orig_conv = (LDKCResult_CounterpartyForwardingInfoDecodeErrorZ*)(orig & ~1);
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ), "LDKCResult_CounterpartyForwardingInfoDecodeErrorZ");
	*ret_conv = CResult_CounterpartyForwardingInfoDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelCounterparty o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelCounterparty_clone(&o_conv);
	LDKCResult_ChannelCounterpartyDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelCounterpartyDecodeErrorZ), "LDKCResult_ChannelCounterpartyDecodeErrorZ");
	*ret_conv = CResult_ChannelCounterpartyDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelCounterpartyDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelCounterpartyDecodeErrorZ), "LDKCResult_ChannelCounterpartyDecodeErrorZ");
	*ret_conv = CResult_ChannelCounterpartyDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelCounterpartyDecodeErrorZ* o_conv = (LDKCResult_ChannelCounterpartyDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelCounterpartyDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelCounterpartyDecodeErrorZ _res_conv = *(LDKCResult_ChannelCounterpartyDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelCounterpartyDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelCounterpartyDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelCounterpartyDecodeErrorZ), "LDKCResult_ChannelCounterpartyDecodeErrorZ");
	*ret_conv = CResult_ChannelCounterpartyDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelCounterpartyDecodeErrorZ* arg_conv = (LDKCResult_ChannelCounterpartyDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelCounterpartyDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelCounterpartyDecodeErrorZ* orig_conv = (LDKCResult_ChannelCounterpartyDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelCounterpartyDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelCounterpartyDecodeErrorZ), "LDKCResult_ChannelCounterpartyDecodeErrorZ");
	*ret_conv = CResult_ChannelCounterpartyDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelDetails o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelDetails_clone(&o_conv);
	LDKCResult_ChannelDetailsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelDetailsDecodeErrorZ), "LDKCResult_ChannelDetailsDecodeErrorZ");
	*ret_conv = CResult_ChannelDetailsDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelDetailsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelDetailsDecodeErrorZ), "LDKCResult_ChannelDetailsDecodeErrorZ");
	*ret_conv = CResult_ChannelDetailsDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelDetailsDecodeErrorZ* o_conv = (LDKCResult_ChannelDetailsDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelDetailsDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelDetailsDecodeErrorZ _res_conv = *(LDKCResult_ChannelDetailsDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelDetailsDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelDetailsDecodeErrorZ_clone_ptr(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelDetailsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelDetailsDecodeErrorZ), "LDKCResult_ChannelDetailsDecodeErrorZ");
	*ret_conv = CResult_ChannelDetailsDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelDetailsDecodeErrorZ* arg_conv = (LDKCResult_ChannelDetailsDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelDetailsDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelDetailsDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelDetailsDecodeErrorZ* orig_conv = (LDKCResult_ChannelDetailsDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelDetailsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelDetailsDecodeErrorZ), "LDKCResult_ChannelDetailsDecodeErrorZ");
	*ret_conv = CResult_ChannelDetailsDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKPhantomRouteHints o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = PhantomRouteHints_clone(&o_conv);
	LDKCResult_PhantomRouteHintsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PhantomRouteHintsDecodeErrorZ), "LDKCResult_PhantomRouteHintsDecodeErrorZ");
	*ret_conv = CResult_PhantomRouteHintsDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_PhantomRouteHintsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PhantomRouteHintsDecodeErrorZ), "LDKCResult_PhantomRouteHintsDecodeErrorZ");
	*ret_conv = CResult_PhantomRouteHintsDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PhantomRouteHintsDecodeErrorZ* o_conv = (LDKCResult_PhantomRouteHintsDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PhantomRouteHintsDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PhantomRouteHintsDecodeErrorZ _res_conv = *(LDKCResult_PhantomRouteHintsDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PhantomRouteHintsDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_PhantomRouteHintsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PhantomRouteHintsDecodeErrorZ), "LDKCResult_PhantomRouteHintsDecodeErrorZ");
	*ret_conv = CResult_PhantomRouteHintsDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PhantomRouteHintsDecodeErrorZ* arg_conv = (LDKCResult_PhantomRouteHintsDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PhantomRouteHintsDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PhantomRouteHintsDecodeErrorZ* orig_conv = (LDKCResult_PhantomRouteHintsDecodeErrorZ*)(orig & ~1);
	LDKCResult_PhantomRouteHintsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PhantomRouteHintsDecodeErrorZ), "LDKCResult_PhantomRouteHintsDecodeErrorZ");
	*ret_conv = CResult_PhantomRouteHintsDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1ChannelMonitorZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_ChannelMonitorZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKChannelMonitor), "LDKCVec_ChannelMonitorZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t q = 0; q < _res_constr.datalen; q++) {
		int64_t _res_conv_16 = _res_vals[q];
		LDKChannelMonitor _res_conv_16_conv;
		_res_conv_16_conv.inner = (void*)(_res_conv_16 & (~1));
		_res_conv_16_conv.is_owned = (_res_conv_16 & 1) || (_res_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_16_conv);
		_res_constr.data[q] = _res_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_ChannelMonitorZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelManagerZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int64_t b) {
	LDKThirtyTwoBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 32);
	(*env)->GetByteArrayRegion(env, a, 0, 32, a_ref.data);
	LDKChannelManager b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = (b & 1) || (b == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	// WARNING: we need a move here but no clone is available for LDKChannelManager
	LDKC2Tuple_BlockHashChannelManagerZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_BlockHashChannelManagerZ), "LDKC2Tuple_BlockHashChannelManagerZ");
	*ret_conv = C2Tuple_BlockHashChannelManagerZ_new(a_ref, b_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelManagerZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_BlockHashChannelManagerZ _res_conv = *(LDKC2Tuple_BlockHashChannelManagerZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_BlockHashChannelManagerZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelManagerZDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_BlockHashChannelManagerZ o_conv = *(LDKC2Tuple_BlockHashChannelManagerZ*)(o_ptr);
	// WARNING: we may need a move here but no clone is available for LDKC2Tuple_BlockHashChannelManagerZ
	LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ");
	*ret_conv = CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelManagerZDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ");
	*ret_conv = CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelManagerZDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ* o_conv = (LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelManagerZDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ _res_conv = *(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelConfig o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelConfig_clone(&o_conv);
	LDKCResult_ChannelConfigDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelConfigDecodeErrorZ), "LDKCResult_ChannelConfigDecodeErrorZ");
	*ret_conv = CResult_ChannelConfigDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelConfigDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelConfigDecodeErrorZ), "LDKCResult_ChannelConfigDecodeErrorZ");
	*ret_conv = CResult_ChannelConfigDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelConfigDecodeErrorZ* o_conv = (LDKCResult_ChannelConfigDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelConfigDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelConfigDecodeErrorZ _res_conv = *(LDKCResult_ChannelConfigDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelConfigDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelConfigDecodeErrorZ_clone_ptr(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelConfigDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelConfigDecodeErrorZ), "LDKCResult_ChannelConfigDecodeErrorZ");
	*ret_conv = CResult_ChannelConfigDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelConfigDecodeErrorZ* arg_conv = (LDKCResult_ChannelConfigDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelConfigDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelConfigDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelConfigDecodeErrorZ* orig_conv = (LDKCResult_ChannelConfigDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelConfigDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelConfigDecodeErrorZ), "LDKCResult_ChannelConfigDecodeErrorZ");
	*ret_conv = CResult_ChannelConfigDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKOutPoint o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = OutPoint_clone(&o_conv);
	LDKCResult_OutPointDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OutPointDecodeErrorZ), "LDKCResult_OutPointDecodeErrorZ");
	*ret_conv = CResult_OutPointDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_OutPointDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OutPointDecodeErrorZ), "LDKCResult_OutPointDecodeErrorZ");
	*ret_conv = CResult_OutPointDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_OutPointDecodeErrorZ* o_conv = (LDKCResult_OutPointDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_OutPointDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_OutPointDecodeErrorZ _res_conv = *(LDKCResult_OutPointDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_OutPointDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_OutPointDecodeErrorZ_clone_ptr(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_OutPointDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OutPointDecodeErrorZ), "LDKCResult_OutPointDecodeErrorZ");
	*ret_conv = CResult_OutPointDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_OutPointDecodeErrorZ* arg_conv = (LDKCResult_OutPointDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_OutPointDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OutPointDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_OutPointDecodeErrorZ* orig_conv = (LDKCResult_OutPointDecodeErrorZ*)(orig & ~1);
	LDKCResult_OutPointDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OutPointDecodeErrorZ), "LDKCResult_OutPointDecodeErrorZ");
	*ret_conv = CResult_OutPointDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1TypeZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKType o_conv = *(LDKType*)(o_ptr);
	if (o_conv.free == LDKType_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKType_JCalls_cloned(&o_conv);
	}
	LDKCOption_TypeZ *ret_copy = MALLOC(sizeof(LDKCOption_TypeZ), "LDKCOption_TypeZ");
	*ret_copy = COption_TypeZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1TypeZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_TypeZ *ret_copy = MALLOC(sizeof(LDKCOption_TypeZ), "LDKCOption_TypeZ");
	*ret_copy = COption_TypeZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1TypeZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_TypeZ _res_conv = *(LDKCOption_TypeZ*)(_res_ptr);
	FREE((void*)_res);
	COption_TypeZ_free(_res_conv);
}

static inline uintptr_t COption_TypeZ_clone_ptr(LDKCOption_TypeZ *NONNULL_PTR arg) {
	LDKCOption_TypeZ *ret_copy = MALLOC(sizeof(LDKCOption_TypeZ), "LDKCOption_TypeZ");
	*ret_copy = COption_TypeZ_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1TypeZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_TypeZ* arg_conv = (LDKCOption_TypeZ*)arg;
	int64_t ret_val = COption_TypeZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1TypeZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_TypeZ* orig_conv = (LDKCOption_TypeZ*)orig;
	LDKCOption_TypeZ *ret_copy = MALLOC(sizeof(LDKCOption_TypeZ), "LDKCOption_TypeZ");
	*ret_copy = COption_TypeZ_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKCOption_TypeZ o_conv = *(LDKCOption_TypeZ*)(o_ptr);
	o_conv = COption_TypeZ_clone((LDKCOption_TypeZ*)(((uintptr_t)o) & ~1));
	LDKCResult_COption_TypeZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_TypeZDecodeErrorZ), "LDKCResult_COption_TypeZDecodeErrorZ");
	*ret_conv = CResult_COption_TypeZDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_COption_TypeZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_TypeZDecodeErrorZ), "LDKCResult_COption_TypeZDecodeErrorZ");
	*ret_conv = CResult_COption_TypeZDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_COption_TypeZDecodeErrorZ* o_conv = (LDKCResult_COption_TypeZDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_COption_TypeZDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_COption_TypeZDecodeErrorZ _res_conv = *(LDKCResult_COption_TypeZDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_COption_TypeZDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_COption_TypeZDecodeErrorZ_clone_ptr(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_COption_TypeZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_TypeZDecodeErrorZ), "LDKCResult_COption_TypeZDecodeErrorZ");
	*ret_conv = CResult_COption_TypeZDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_COption_TypeZDecodeErrorZ* arg_conv = (LDKCResult_COption_TypeZDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_COption_TypeZDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1TypeZDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_COption_TypeZDecodeErrorZ* orig_conv = (LDKCResult_COption_TypeZDecodeErrorZ*)(orig & ~1);
	LDKCResult_COption_TypeZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_TypeZDecodeErrorZ), "LDKCResult_COption_TypeZDecodeErrorZ");
	*ret_conv = CResult_COption_TypeZDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKThirtyTwoBytes o_ref;
	CHECK((*env)->GetArrayLength(env, o) == 32);
	(*env)->GetByteArrayRegion(env, o, 0, 32, o_ref.data);
	LDKCResult_PaymentIdPaymentErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentErrorZ), "LDKCResult_PaymentIdPaymentErrorZ");
	*ret_conv = CResult_PaymentIdPaymentErrorZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKPaymentError e_conv = *(LDKPaymentError*)(e_ptr);
	e_conv = PaymentError_clone((LDKPaymentError*)(((uintptr_t)e) & ~1));
	LDKCResult_PaymentIdPaymentErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentErrorZ), "LDKCResult_PaymentIdPaymentErrorZ");
	*ret_conv = CResult_PaymentIdPaymentErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PaymentIdPaymentErrorZ* o_conv = (LDKCResult_PaymentIdPaymentErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PaymentIdPaymentErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PaymentIdPaymentErrorZ _res_conv = *(LDKCResult_PaymentIdPaymentErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PaymentIdPaymentErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PaymentIdPaymentErrorZ_clone_ptr(LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR arg) {
	LDKCResult_PaymentIdPaymentErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentErrorZ), "LDKCResult_PaymentIdPaymentErrorZ");
	*ret_conv = CResult_PaymentIdPaymentErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PaymentIdPaymentErrorZ* arg_conv = (LDKCResult_PaymentIdPaymentErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PaymentIdPaymentErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PaymentIdPaymentErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PaymentIdPaymentErrorZ* orig_conv = (LDKCResult_PaymentIdPaymentErrorZ*)(orig & ~1);
	LDKCResult_PaymentIdPaymentErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentErrorZ), "LDKCResult_PaymentIdPaymentErrorZ");
	*ret_conv = CResult_PaymentIdPaymentErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1ok(JNIEnv *env, jclass clz, jclass o) {
	LDKSiPrefix o_conv = LDKSiPrefix_from_java(env, o);
	LDKCResult_SiPrefixNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SiPrefixNoneZ), "LDKCResult_SiPrefixNoneZ");
	*ret_conv = CResult_SiPrefixNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_SiPrefixNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SiPrefixNoneZ), "LDKCResult_SiPrefixNoneZ");
	*ret_conv = CResult_SiPrefixNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_SiPrefixNoneZ* o_conv = (LDKCResult_SiPrefixNoneZ*)(o & ~1);
	jboolean ret_val = CResult_SiPrefixNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_SiPrefixNoneZ _res_conv = *(LDKCResult_SiPrefixNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_SiPrefixNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_SiPrefixNoneZ_clone_ptr(LDKCResult_SiPrefixNoneZ *NONNULL_PTR arg) {
	LDKCResult_SiPrefixNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SiPrefixNoneZ), "LDKCResult_SiPrefixNoneZ");
	*ret_conv = CResult_SiPrefixNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_SiPrefixNoneZ* arg_conv = (LDKCResult_SiPrefixNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_SiPrefixNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SiPrefixNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_SiPrefixNoneZ* orig_conv = (LDKCResult_SiPrefixNoneZ*)(orig & ~1);
	LDKCResult_SiPrefixNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SiPrefixNoneZ), "LDKCResult_SiPrefixNoneZ");
	*ret_conv = CResult_SiPrefixNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKInvoice o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Invoice_clone(&o_conv);
	LDKCResult_InvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceNoneZ), "LDKCResult_InvoiceNoneZ");
	*ret_conv = CResult_InvoiceNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_InvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceNoneZ), "LDKCResult_InvoiceNoneZ");
	*ret_conv = CResult_InvoiceNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_InvoiceNoneZ* o_conv = (LDKCResult_InvoiceNoneZ*)(o & ~1);
	jboolean ret_val = CResult_InvoiceNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_InvoiceNoneZ _res_conv = *(LDKCResult_InvoiceNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_InvoiceNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_InvoiceNoneZ_clone_ptr(LDKCResult_InvoiceNoneZ *NONNULL_PTR arg) {
	LDKCResult_InvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceNoneZ), "LDKCResult_InvoiceNoneZ");
	*ret_conv = CResult_InvoiceNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_InvoiceNoneZ* arg_conv = (LDKCResult_InvoiceNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_InvoiceNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_InvoiceNoneZ* orig_conv = (LDKCResult_InvoiceNoneZ*)(orig & ~1);
	LDKCResult_InvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceNoneZ), "LDKCResult_InvoiceNoneZ");
	*ret_conv = CResult_InvoiceNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKSignedRawInvoice o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = SignedRawInvoice_clone(&o_conv);
	LDKCResult_SignedRawInvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignedRawInvoiceNoneZ), "LDKCResult_SignedRawInvoiceNoneZ");
	*ret_conv = CResult_SignedRawInvoiceNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_SignedRawInvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignedRawInvoiceNoneZ), "LDKCResult_SignedRawInvoiceNoneZ");
	*ret_conv = CResult_SignedRawInvoiceNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_SignedRawInvoiceNoneZ* o_conv = (LDKCResult_SignedRawInvoiceNoneZ*)(o & ~1);
	jboolean ret_val = CResult_SignedRawInvoiceNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_SignedRawInvoiceNoneZ _res_conv = *(LDKCResult_SignedRawInvoiceNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_SignedRawInvoiceNoneZ_free(_res_conv);
}

static inline uintptr_t CResult_SignedRawInvoiceNoneZ_clone_ptr(LDKCResult_SignedRawInvoiceNoneZ *NONNULL_PTR arg) {
	LDKCResult_SignedRawInvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignedRawInvoiceNoneZ), "LDKCResult_SignedRawInvoiceNoneZ");
	*ret_conv = CResult_SignedRawInvoiceNoneZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_SignedRawInvoiceNoneZ* arg_conv = (LDKCResult_SignedRawInvoiceNoneZ*)(arg & ~1);
	int64_t ret_val = CResult_SignedRawInvoiceNoneZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1SignedRawInvoiceNoneZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_SignedRawInvoiceNoneZ* orig_conv = (LDKCResult_SignedRawInvoiceNoneZ*)(orig & ~1);
	LDKCResult_SignedRawInvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignedRawInvoiceNoneZ), "LDKCResult_SignedRawInvoiceNoneZ");
	*ret_conv = CResult_SignedRawInvoiceNoneZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone_ptr(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR arg) {
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* ret_conv = MALLOC(sizeof(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ), "LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ");
	*ret_conv = C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1RawInvoice_1u832InvoiceSignatureZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* arg_conv = (LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ*)(arg & ~1);
	int64_t ret_val = C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1RawInvoice_1u832InvoiceSignatureZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* orig_conv = (LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ*)(orig & ~1);
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* ret_conv = MALLOC(sizeof(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ), "LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ");
	*ret_conv = C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1RawInvoice_1u832InvoiceSignatureZ_1new(JNIEnv *env, jclass clz, int64_t a, int8_tArray b, int64_t c) {
	LDKRawInvoice a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = RawInvoice_clone(&a_conv);
	LDKThirtyTwoBytes b_ref;
	CHECK((*env)->GetArrayLength(env, b) == 32);
	(*env)->GetByteArrayRegion(env, b, 0, 32, b_ref.data);
	LDKInvoiceSignature c_conv;
	c_conv.inner = (void*)(c & (~1));
	c_conv.is_owned = (c & 1) || (c == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(c_conv);
	c_conv = InvoiceSignature_clone(&c_conv);
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* ret_conv = MALLOC(sizeof(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ), "LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ");
	*ret_conv = C3Tuple_RawInvoice_u832InvoiceSignatureZ_new(a_conv, b_ref, c_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C3Tuple_1RawInvoice_1u832InvoiceSignatureZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ _res_conv = *(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ*)(_res_ptr);
	FREE((void*)_res);
	C3Tuple_RawInvoice_u832InvoiceSignatureZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKPayeePubKey o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = PayeePubKey_clone(&o_conv);
	LDKCResult_PayeePubKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PayeePubKeyErrorZ), "LDKCResult_PayeePubKeyErrorZ");
	*ret_conv = CResult_PayeePubKeyErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKSecp256k1Error e_conv = LDKSecp256k1Error_from_java(env, e);
	LDKCResult_PayeePubKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PayeePubKeyErrorZ), "LDKCResult_PayeePubKeyErrorZ");
	*ret_conv = CResult_PayeePubKeyErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PayeePubKeyErrorZ* o_conv = (LDKCResult_PayeePubKeyErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PayeePubKeyErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PayeePubKeyErrorZ _res_conv = *(LDKCResult_PayeePubKeyErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PayeePubKeyErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PayeePubKeyErrorZ_clone_ptr(LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR arg) {
	LDKCResult_PayeePubKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PayeePubKeyErrorZ), "LDKCResult_PayeePubKeyErrorZ");
	*ret_conv = CResult_PayeePubKeyErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PayeePubKeyErrorZ* arg_conv = (LDKCResult_PayeePubKeyErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PayeePubKeyErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PayeePubKeyErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PayeePubKeyErrorZ* orig_conv = (LDKCResult_PayeePubKeyErrorZ*)(orig & ~1);
	LDKCResult_PayeePubKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PayeePubKeyErrorZ), "LDKCResult_PayeePubKeyErrorZ");
	*ret_conv = CResult_PayeePubKeyErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1PrivateRouteZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_PrivateRouteZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKPrivateRoute), "LDKCVec_PrivateRouteZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t o = 0; o < _res_constr.datalen; o++) {
		int64_t _res_conv_14 = _res_vals[o];
		LDKPrivateRoute _res_conv_14_conv;
		_res_conv_14_conv.inner = (void*)(_res_conv_14 & (~1));
		_res_conv_14_conv.is_owned = (_res_conv_14 & 1) || (_res_conv_14 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_14_conv);
		_res_constr.data[o] = _res_conv_14_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_PrivateRouteZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKPositiveTimestamp o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = PositiveTimestamp_clone(&o_conv);
	LDKCResult_PositiveTimestampCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PositiveTimestampCreationErrorZ), "LDKCResult_PositiveTimestampCreationErrorZ");
	*ret_conv = CResult_PositiveTimestampCreationErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKCreationError e_conv = LDKCreationError_from_java(env, e);
	LDKCResult_PositiveTimestampCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PositiveTimestampCreationErrorZ), "LDKCResult_PositiveTimestampCreationErrorZ");
	*ret_conv = CResult_PositiveTimestampCreationErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PositiveTimestampCreationErrorZ* o_conv = (LDKCResult_PositiveTimestampCreationErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PositiveTimestampCreationErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PositiveTimestampCreationErrorZ _res_conv = *(LDKCResult_PositiveTimestampCreationErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PositiveTimestampCreationErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PositiveTimestampCreationErrorZ_clone_ptr(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR arg) {
	LDKCResult_PositiveTimestampCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PositiveTimestampCreationErrorZ), "LDKCResult_PositiveTimestampCreationErrorZ");
	*ret_conv = CResult_PositiveTimestampCreationErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PositiveTimestampCreationErrorZ* arg_conv = (LDKCResult_PositiveTimestampCreationErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PositiveTimestampCreationErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PositiveTimestampCreationErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PositiveTimestampCreationErrorZ* orig_conv = (LDKCResult_PositiveTimestampCreationErrorZ*)(orig & ~1);
	LDKCResult_PositiveTimestampCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PositiveTimestampCreationErrorZ), "LDKCResult_PositiveTimestampCreationErrorZ");
	*ret_conv = CResult_PositiveTimestampCreationErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NoneSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneSemanticErrorZ), "LDKCResult_NoneSemanticErrorZ");
	*ret_conv = CResult_NoneSemanticErrorZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKSemanticError e_conv = LDKSemanticError_from_java(env, e);
	LDKCResult_NoneSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneSemanticErrorZ), "LDKCResult_NoneSemanticErrorZ");
	*ret_conv = CResult_NoneSemanticErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NoneSemanticErrorZ* o_conv = (LDKCResult_NoneSemanticErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NoneSemanticErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NoneSemanticErrorZ _res_conv = *(LDKCResult_NoneSemanticErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NoneSemanticErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NoneSemanticErrorZ_clone_ptr(LDKCResult_NoneSemanticErrorZ *NONNULL_PTR arg) {
	LDKCResult_NoneSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneSemanticErrorZ), "LDKCResult_NoneSemanticErrorZ");
	*ret_conv = CResult_NoneSemanticErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NoneSemanticErrorZ* arg_conv = (LDKCResult_NoneSemanticErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NoneSemanticErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneSemanticErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NoneSemanticErrorZ* orig_conv = (LDKCResult_NoneSemanticErrorZ*)(orig & ~1);
	LDKCResult_NoneSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneSemanticErrorZ), "LDKCResult_NoneSemanticErrorZ");
	*ret_conv = CResult_NoneSemanticErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKInvoice o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Invoice_clone(&o_conv);
	LDKCResult_InvoiceSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSemanticErrorZ), "LDKCResult_InvoiceSemanticErrorZ");
	*ret_conv = CResult_InvoiceSemanticErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKSemanticError e_conv = LDKSemanticError_from_java(env, e);
	LDKCResult_InvoiceSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSemanticErrorZ), "LDKCResult_InvoiceSemanticErrorZ");
	*ret_conv = CResult_InvoiceSemanticErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_InvoiceSemanticErrorZ* o_conv = (LDKCResult_InvoiceSemanticErrorZ*)(o & ~1);
	jboolean ret_val = CResult_InvoiceSemanticErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_InvoiceSemanticErrorZ _res_conv = *(LDKCResult_InvoiceSemanticErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_InvoiceSemanticErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_InvoiceSemanticErrorZ_clone_ptr(LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR arg) {
	LDKCResult_InvoiceSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSemanticErrorZ), "LDKCResult_InvoiceSemanticErrorZ");
	*ret_conv = CResult_InvoiceSemanticErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_InvoiceSemanticErrorZ* arg_conv = (LDKCResult_InvoiceSemanticErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_InvoiceSemanticErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSemanticErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_InvoiceSemanticErrorZ* orig_conv = (LDKCResult_InvoiceSemanticErrorZ*)(orig & ~1);
	LDKCResult_InvoiceSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSemanticErrorZ), "LDKCResult_InvoiceSemanticErrorZ");
	*ret_conv = CResult_InvoiceSemanticErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKDescription o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Description_clone(&o_conv);
	LDKCResult_DescriptionCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DescriptionCreationErrorZ), "LDKCResult_DescriptionCreationErrorZ");
	*ret_conv = CResult_DescriptionCreationErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKCreationError e_conv = LDKCreationError_from_java(env, e);
	LDKCResult_DescriptionCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DescriptionCreationErrorZ), "LDKCResult_DescriptionCreationErrorZ");
	*ret_conv = CResult_DescriptionCreationErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_DescriptionCreationErrorZ* o_conv = (LDKCResult_DescriptionCreationErrorZ*)(o & ~1);
	jboolean ret_val = CResult_DescriptionCreationErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_DescriptionCreationErrorZ _res_conv = *(LDKCResult_DescriptionCreationErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_DescriptionCreationErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_DescriptionCreationErrorZ_clone_ptr(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR arg) {
	LDKCResult_DescriptionCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DescriptionCreationErrorZ), "LDKCResult_DescriptionCreationErrorZ");
	*ret_conv = CResult_DescriptionCreationErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_DescriptionCreationErrorZ* arg_conv = (LDKCResult_DescriptionCreationErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_DescriptionCreationErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1DescriptionCreationErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_DescriptionCreationErrorZ* orig_conv = (LDKCResult_DescriptionCreationErrorZ*)(orig & ~1);
	LDKCResult_DescriptionCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DescriptionCreationErrorZ), "LDKCResult_DescriptionCreationErrorZ");
	*ret_conv = CResult_DescriptionCreationErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKPrivateRoute o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = PrivateRoute_clone(&o_conv);
	LDKCResult_PrivateRouteCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PrivateRouteCreationErrorZ), "LDKCResult_PrivateRouteCreationErrorZ");
	*ret_conv = CResult_PrivateRouteCreationErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKCreationError e_conv = LDKCreationError_from_java(env, e);
	LDKCResult_PrivateRouteCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PrivateRouteCreationErrorZ), "LDKCResult_PrivateRouteCreationErrorZ");
	*ret_conv = CResult_PrivateRouteCreationErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PrivateRouteCreationErrorZ* o_conv = (LDKCResult_PrivateRouteCreationErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PrivateRouteCreationErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PrivateRouteCreationErrorZ _res_conv = *(LDKCResult_PrivateRouteCreationErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PrivateRouteCreationErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PrivateRouteCreationErrorZ_clone_ptr(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR arg) {
	LDKCResult_PrivateRouteCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PrivateRouteCreationErrorZ), "LDKCResult_PrivateRouteCreationErrorZ");
	*ret_conv = CResult_PrivateRouteCreationErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PrivateRouteCreationErrorZ* arg_conv = (LDKCResult_PrivateRouteCreationErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PrivateRouteCreationErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PrivateRouteCreationErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PrivateRouteCreationErrorZ* orig_conv = (LDKCResult_PrivateRouteCreationErrorZ*)(orig & ~1);
	LDKCResult_PrivateRouteCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PrivateRouteCreationErrorZ), "LDKCResult_PrivateRouteCreationErrorZ");
	*ret_conv = CResult_PrivateRouteCreationErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StringErrorZ_1ok(JNIEnv *env, jclass clz, jstring o) {
	LDKStr o_conv = java_to_owned_str(env, o);
	LDKCResult_StringErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StringErrorZ), "LDKCResult_StringErrorZ");
	*ret_conv = CResult_StringErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1StringErrorZ_1err(JNIEnv *env, jclass clz, jclass e) {
	LDKSecp256k1Error e_conv = LDKSecp256k1Error_from_java(env, e);
	LDKCResult_StringErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StringErrorZ), "LDKCResult_StringErrorZ");
	*ret_conv = CResult_StringErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1StringErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_StringErrorZ* o_conv = (LDKCResult_StringErrorZ*)(o & ~1);
	jboolean ret_val = CResult_StringErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1StringErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_StringErrorZ _res_conv = *(LDKCResult_StringErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_StringErrorZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelMonitorUpdate o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelMonitorUpdate_clone(&o_conv);
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelMonitorUpdateDecodeErrorZ), "LDKCResult_ChannelMonitorUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelMonitorUpdateDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelMonitorUpdateDecodeErrorZ), "LDKCResult_ChannelMonitorUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelMonitorUpdateDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* o_conv = (LDKCResult_ChannelMonitorUpdateDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ _res_conv = *(LDKCResult_ChannelMonitorUpdateDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelMonitorUpdateDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelMonitorUpdateDecodeErrorZ), "LDKCResult_ChannelMonitorUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelMonitorUpdateDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* arg_conv = (LDKCResult_ChannelMonitorUpdateDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelMonitorUpdateDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* orig_conv = (LDKCResult_ChannelMonitorUpdateDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelMonitorUpdateDecodeErrorZ), "LDKCResult_ChannelMonitorUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelMonitorUpdateDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1MonitorEventZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKMonitorEvent o_conv = *(LDKMonitorEvent*)(o_ptr);
	o_conv = MonitorEvent_clone((LDKMonitorEvent*)(((uintptr_t)o) & ~1));
	LDKCOption_MonitorEventZ *ret_copy = MALLOC(sizeof(LDKCOption_MonitorEventZ), "LDKCOption_MonitorEventZ");
	*ret_copy = COption_MonitorEventZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1MonitorEventZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_MonitorEventZ *ret_copy = MALLOC(sizeof(LDKCOption_MonitorEventZ), "LDKCOption_MonitorEventZ");
	*ret_copy = COption_MonitorEventZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1MonitorEventZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_MonitorEventZ _res_conv = *(LDKCOption_MonitorEventZ*)(_res_ptr);
	FREE((void*)_res);
	COption_MonitorEventZ_free(_res_conv);
}

static inline uintptr_t COption_MonitorEventZ_clone_ptr(LDKCOption_MonitorEventZ *NONNULL_PTR arg) {
	LDKCOption_MonitorEventZ *ret_copy = MALLOC(sizeof(LDKCOption_MonitorEventZ), "LDKCOption_MonitorEventZ");
	*ret_copy = COption_MonitorEventZ_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1MonitorEventZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_MonitorEventZ* arg_conv = (LDKCOption_MonitorEventZ*)arg;
	int64_t ret_val = COption_MonitorEventZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1MonitorEventZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_MonitorEventZ* orig_conv = (LDKCOption_MonitorEventZ*)orig;
	LDKCOption_MonitorEventZ *ret_copy = MALLOC(sizeof(LDKCOption_MonitorEventZ), "LDKCOption_MonitorEventZ");
	*ret_copy = COption_MonitorEventZ_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKCOption_MonitorEventZ o_conv = *(LDKCOption_MonitorEventZ*)(o_ptr);
	o_conv = COption_MonitorEventZ_clone((LDKCOption_MonitorEventZ*)(((uintptr_t)o) & ~1));
	LDKCResult_COption_MonitorEventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_MonitorEventZDecodeErrorZ), "LDKCResult_COption_MonitorEventZDecodeErrorZ");
	*ret_conv = CResult_COption_MonitorEventZDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_COption_MonitorEventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_MonitorEventZDecodeErrorZ), "LDKCResult_COption_MonitorEventZDecodeErrorZ");
	*ret_conv = CResult_COption_MonitorEventZDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_COption_MonitorEventZDecodeErrorZ* o_conv = (LDKCResult_COption_MonitorEventZDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_COption_MonitorEventZDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_COption_MonitorEventZDecodeErrorZ _res_conv = *(LDKCResult_COption_MonitorEventZDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_COption_MonitorEventZDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_COption_MonitorEventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_MonitorEventZDecodeErrorZ), "LDKCResult_COption_MonitorEventZDecodeErrorZ");
	*ret_conv = CResult_COption_MonitorEventZDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_COption_MonitorEventZDecodeErrorZ* arg_conv = (LDKCResult_COption_MonitorEventZDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1MonitorEventZDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_COption_MonitorEventZDecodeErrorZ* orig_conv = (LDKCResult_COption_MonitorEventZDecodeErrorZ*)(orig & ~1);
	LDKCResult_COption_MonitorEventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_MonitorEventZDecodeErrorZ), "LDKCResult_COption_MonitorEventZDecodeErrorZ");
	*ret_conv = CResult_COption_MonitorEventZDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKHTLCUpdate o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = HTLCUpdate_clone(&o_conv);
	LDKCResult_HTLCUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCUpdateDecodeErrorZ), "LDKCResult_HTLCUpdateDecodeErrorZ");
	*ret_conv = CResult_HTLCUpdateDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_HTLCUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCUpdateDecodeErrorZ), "LDKCResult_HTLCUpdateDecodeErrorZ");
	*ret_conv = CResult_HTLCUpdateDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_HTLCUpdateDecodeErrorZ* o_conv = (LDKCResult_HTLCUpdateDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_HTLCUpdateDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_HTLCUpdateDecodeErrorZ _res_conv = *(LDKCResult_HTLCUpdateDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_HTLCUpdateDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_HTLCUpdateDecodeErrorZ_clone_ptr(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_HTLCUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCUpdateDecodeErrorZ), "LDKCResult_HTLCUpdateDecodeErrorZ");
	*ret_conv = CResult_HTLCUpdateDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_HTLCUpdateDecodeErrorZ* arg_conv = (LDKCResult_HTLCUpdateDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_HTLCUpdateDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1HTLCUpdateDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_HTLCUpdateDecodeErrorZ* orig_conv = (LDKCResult_HTLCUpdateDecodeErrorZ*)(orig & ~1);
	LDKCResult_HTLCUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCUpdateDecodeErrorZ), "LDKCResult_HTLCUpdateDecodeErrorZ");
	*ret_conv = CResult_HTLCUpdateDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C2Tuple_OutPointScriptZ_clone_ptr(LDKC2Tuple_OutPointScriptZ *NONNULL_PTR arg) {
	LDKC2Tuple_OutPointScriptZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_OutPointScriptZ), "LDKC2Tuple_OutPointScriptZ");
	*ret_conv = C2Tuple_OutPointScriptZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1OutPointScriptZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_OutPointScriptZ* arg_conv = (LDKC2Tuple_OutPointScriptZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_OutPointScriptZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1OutPointScriptZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_OutPointScriptZ* orig_conv = (LDKC2Tuple_OutPointScriptZ*)(orig & ~1);
	LDKC2Tuple_OutPointScriptZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_OutPointScriptZ), "LDKC2Tuple_OutPointScriptZ");
	*ret_conv = C2Tuple_OutPointScriptZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1OutPointScriptZ_1new(JNIEnv *env, jclass clz, int64_t a, int8_tArray b) {
	LDKOutPoint a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = OutPoint_clone(&a_conv);
	LDKCVec_u8Z b_ref;
	b_ref.datalen = (*env)->GetArrayLength(env, b);
	b_ref.data = MALLOC(b_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, b, 0, b_ref.datalen, b_ref.data);
	LDKC2Tuple_OutPointScriptZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_OutPointScriptZ), "LDKC2Tuple_OutPointScriptZ");
	*ret_conv = C2Tuple_OutPointScriptZ_new(a_conv, b_ref);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1OutPointScriptZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_OutPointScriptZ _res_conv = *(LDKC2Tuple_OutPointScriptZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_OutPointScriptZ_free(_res_conv);
}

static inline uintptr_t C2Tuple_u32ScriptZ_clone_ptr(LDKC2Tuple_u32ScriptZ *NONNULL_PTR arg) {
	LDKC2Tuple_u32ScriptZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_u32ScriptZ), "LDKC2Tuple_u32ScriptZ");
	*ret_conv = C2Tuple_u32ScriptZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32ScriptZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_u32ScriptZ* arg_conv = (LDKC2Tuple_u32ScriptZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_u32ScriptZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32ScriptZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_u32ScriptZ* orig_conv = (LDKC2Tuple_u32ScriptZ*)(orig & ~1);
	LDKC2Tuple_u32ScriptZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_u32ScriptZ), "LDKC2Tuple_u32ScriptZ");
	*ret_conv = C2Tuple_u32ScriptZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32ScriptZ_1new(JNIEnv *env, jclass clz, int32_t a, int8_tArray b) {
	LDKCVec_u8Z b_ref;
	b_ref.datalen = (*env)->GetArrayLength(env, b);
	b_ref.data = MALLOC(b_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, b, 0, b_ref.datalen, b_ref.data);
	LDKC2Tuple_u32ScriptZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_u32ScriptZ), "LDKC2Tuple_u32ScriptZ");
	*ret_conv = C2Tuple_u32ScriptZ_new(a, b_ref);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32ScriptZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_u32ScriptZ _res_conv = *(LDKC2Tuple_u32ScriptZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_u32ScriptZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C2Tuple_1u32ScriptZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C2Tuple_u32ScriptZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC2Tuple_u32ScriptZ), "LDKCVec_C2Tuple_u32ScriptZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t v = 0; v < _res_constr.datalen; v++) {
		int64_t _res_conv_21 = _res_vals[v];
		void* _res_conv_21_ptr = (void*)(((uintptr_t)_res_conv_21) & ~1);
		CHECK_ACCESS(_res_conv_21_ptr);
		LDKC2Tuple_u32ScriptZ _res_conv_21_conv = *(LDKC2Tuple_u32ScriptZ*)(_res_conv_21_ptr);
		FREE((void*)_res_conv_21);
		_res_constr.data[v] = _res_conv_21_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C2Tuple_u32ScriptZZ_free(_res_constr);
}

static inline uintptr_t C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone_ptr(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ *NONNULL_PTR arg) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ");
	*ret_conv = C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32ScriptZZZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* arg_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32ScriptZZZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* orig_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ*)(orig & ~1);
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ");
	*ret_conv = C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32ScriptZZZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int64_tArray b) {
	LDKThirtyTwoBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 32);
	(*env)->GetByteArrayRegion(env, a, 0, 32, a_ref.data);
	LDKCVec_C2Tuple_u32ScriptZZ b_constr;
	b_constr.datalen = (*env)->GetArrayLength(env, b);
	if (b_constr.datalen > 0)
		b_constr.data = MALLOC(b_constr.datalen * sizeof(LDKC2Tuple_u32ScriptZ), "LDKCVec_C2Tuple_u32ScriptZZ Elements");
	else
		b_constr.data = NULL;
	int64_t* b_vals = (*env)->GetLongArrayElements (env, b, NULL);
	for (size_t v = 0; v < b_constr.datalen; v++) {
		int64_t b_conv_21 = b_vals[v];
		void* b_conv_21_ptr = (void*)(((uintptr_t)b_conv_21) & ~1);
		CHECK_ACCESS(b_conv_21_ptr);
		LDKC2Tuple_u32ScriptZ b_conv_21_conv = *(LDKC2Tuple_u32ScriptZ*)(b_conv_21_ptr);
		b_conv_21_conv = C2Tuple_u32ScriptZ_clone((LDKC2Tuple_u32ScriptZ*)(((uintptr_t)b_conv_21) & ~1));
		b_constr.data[v] = b_conv_21_conv;
	}
	(*env)->ReleaseLongArrayElements(env, b, b_vals, 0);
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ");
	*ret_conv = C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_new(a_ref, b_constr);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32ScriptZZZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ _res_conv = *(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C2Tuple_1TxidCVec_1C2Tuple_1u32ScriptZZZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ), "LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t o = 0; o < _res_constr.datalen; o++) {
		int64_t _res_conv_40 = _res_vals[o];
		void* _res_conv_40_ptr = (void*)(((uintptr_t)_res_conv_40) & ~1);
		CHECK_ACCESS(_res_conv_40_ptr);
		LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ _res_conv_40_conv = *(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ*)(_res_conv_40_ptr);
		FREE((void*)_res_conv_40);
		_res_constr.data[o] = _res_conv_40_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1EventZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_EventZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKEvent), "LDKCVec_EventZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t h = 0; h < _res_constr.datalen; h++) {
		int64_t _res_conv_7 = _res_vals[h];
		void* _res_conv_7_ptr = (void*)(((uintptr_t)_res_conv_7) & ~1);
		CHECK_ACCESS(_res_conv_7_ptr);
		LDKEvent _res_conv_7_conv = *(LDKEvent*)(_res_conv_7_ptr);
		FREE((void*)_res_conv_7);
		_res_constr.data[h] = _res_conv_7_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_EventZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1TransactionZ_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_TransactionZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKTransaction), "LDKCVec_TransactionZ Elements");
	else
		_res_constr.data = NULL;
	for (size_t i = 0; i < _res_constr.datalen; i++) {
		int8_tArray _res_conv_8 = (*env)->GetObjectArrayElement(env, _res, i);
		LDKTransaction _res_conv_8_ref;
		_res_conv_8_ref.datalen = (*env)->GetArrayLength(env, _res_conv_8);
		_res_conv_8_ref.data = MALLOC(_res_conv_8_ref.datalen, "LDKTransaction Bytes");
		(*env)->GetByteArrayRegion(env, _res_conv_8, 0, _res_conv_8_ref.datalen, _res_conv_8_ref.data);
		_res_conv_8_ref.data_is_owned = true;
		_res_constr.data[i] = _res_conv_8_ref;
	}
	CVec_TransactionZ_free(_res_constr);
}

static inline uintptr_t C2Tuple_u32TxOutZ_clone_ptr(LDKC2Tuple_u32TxOutZ *NONNULL_PTR arg) {
	LDKC2Tuple_u32TxOutZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_u32TxOutZ), "LDKC2Tuple_u32TxOutZ");
	*ret_conv = C2Tuple_u32TxOutZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32TxOutZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_u32TxOutZ* arg_conv = (LDKC2Tuple_u32TxOutZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_u32TxOutZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32TxOutZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_u32TxOutZ* orig_conv = (LDKC2Tuple_u32TxOutZ*)(orig & ~1);
	LDKC2Tuple_u32TxOutZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_u32TxOutZ), "LDKC2Tuple_u32TxOutZ");
	*ret_conv = C2Tuple_u32TxOutZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32TxOutZ_1new(JNIEnv *env, jclass clz, int32_t a, int64_t b) {
	void* b_ptr = (void*)(((uintptr_t)b) & ~1);
	CHECK_ACCESS(b_ptr);
	LDKTxOut b_conv = *(LDKTxOut*)(b_ptr);
	b_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)b) & ~1));
	LDKC2Tuple_u32TxOutZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_u32TxOutZ), "LDKC2Tuple_u32TxOutZ");
	*ret_conv = C2Tuple_u32TxOutZ_new(a, b_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1u32TxOutZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_u32TxOutZ _res_conv = *(LDKC2Tuple_u32TxOutZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_u32TxOutZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C2Tuple_1u32TxOutZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C2Tuple_u32TxOutZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC2Tuple_u32TxOutZ), "LDKCVec_C2Tuple_u32TxOutZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t u = 0; u < _res_constr.datalen; u++) {
		int64_t _res_conv_20 = _res_vals[u];
		void* _res_conv_20_ptr = (void*)(((uintptr_t)_res_conv_20) & ~1);
		CHECK_ACCESS(_res_conv_20_ptr);
		LDKC2Tuple_u32TxOutZ _res_conv_20_conv = *(LDKC2Tuple_u32TxOutZ*)(_res_conv_20_ptr);
		FREE((void*)_res_conv_20);
		_res_constr.data[u] = _res_conv_20_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C2Tuple_u32TxOutZZ_free(_res_constr);
}

static inline uintptr_t C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone_ptr(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR arg) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ");
	*ret_conv = C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32TxOutZZZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* arg_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32TxOutZZZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* orig_conv = (LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ*)(orig & ~1);
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ");
	*ret_conv = C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32TxOutZZZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int64_tArray b) {
	LDKThirtyTwoBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 32);
	(*env)->GetByteArrayRegion(env, a, 0, 32, a_ref.data);
	LDKCVec_C2Tuple_u32TxOutZZ b_constr;
	b_constr.datalen = (*env)->GetArrayLength(env, b);
	if (b_constr.datalen > 0)
		b_constr.data = MALLOC(b_constr.datalen * sizeof(LDKC2Tuple_u32TxOutZ), "LDKCVec_C2Tuple_u32TxOutZZ Elements");
	else
		b_constr.data = NULL;
	int64_t* b_vals = (*env)->GetLongArrayElements (env, b, NULL);
	for (size_t u = 0; u < b_constr.datalen; u++) {
		int64_t b_conv_20 = b_vals[u];
		void* b_conv_20_ptr = (void*)(((uintptr_t)b_conv_20) & ~1);
		CHECK_ACCESS(b_conv_20_ptr);
		LDKC2Tuple_u32TxOutZ b_conv_20_conv = *(LDKC2Tuple_u32TxOutZ*)(b_conv_20_ptr);
		b_conv_20_conv = C2Tuple_u32TxOutZ_clone((LDKC2Tuple_u32TxOutZ*)(((uintptr_t)b_conv_20) & ~1));
		b_constr.data[u] = b_conv_20_conv;
	}
	(*env)->ReleaseLongArrayElements(env, b, b_vals, 0);
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ");
	*ret_conv = C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_new(a_ref, b_constr);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1TxidCVec_1C2Tuple_1u32TxOutZZZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ _res_conv = *(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C2Tuple_1TxidCVec_1C2Tuple_1u32TxOutZZZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ), "LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t n = 0; n < _res_constr.datalen; n++) {
		int64_t _res_conv_39 = _res_vals[n];
		void* _res_conv_39_ptr = (void*)(((uintptr_t)_res_conv_39) & ~1);
		CHECK_ACCESS(_res_conv_39_ptr);
		LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ _res_conv_39_conv = *(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ*)(_res_conv_39_ptr);
		FREE((void*)_res_conv_39);
		_res_constr.data[n] = _res_conv_39_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1BalanceZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_BalanceZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKBalance), "LDKCVec_BalanceZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t j = 0; j < _res_constr.datalen; j++) {
		int64_t _res_conv_9 = _res_vals[j];
		void* _res_conv_9_ptr = (void*)(((uintptr_t)_res_conv_9) & ~1);
		CHECK_ACCESS(_res_conv_9_ptr);
		LDKBalance _res_conv_9_conv = *(LDKBalance*)(_res_conv_9_ptr);
		FREE((void*)_res_conv_9);
		_res_constr.data[j] = _res_conv_9_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_BalanceZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKC2Tuple_BlockHashChannelMonitorZ o_conv = *(LDKC2Tuple_BlockHashChannelMonitorZ*)(o_ptr);
	o_conv = C2Tuple_BlockHashChannelMonitorZ_clone((LDKC2Tuple_BlockHashChannelMonitorZ*)(((uintptr_t)o) & ~1));
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ");
	*ret_conv = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ");
	*ret_conv = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* o_conv = (LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ _res_conv = *(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone_ptr(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ");
	*ret_conv = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* arg_conv = (LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1C2Tuple_1BlockHashChannelMonitorZDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* orig_conv = (LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ*)(orig & ~1);
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ");
	*ret_conv = CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = CResult_NoneLightningErrorZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKLightningError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = LightningError_clone(&e_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = CResult_NoneLightningErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NoneLightningErrorZ* o_conv = (LDKCResult_NoneLightningErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NoneLightningErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NoneLightningErrorZ _res_conv = *(LDKCResult_NoneLightningErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NoneLightningErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NoneLightningErrorZ_clone_ptr(LDKCResult_NoneLightningErrorZ *NONNULL_PTR arg) {
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = CResult_NoneLightningErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NoneLightningErrorZ* arg_conv = (LDKCResult_NoneLightningErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NoneLightningErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NoneLightningErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NoneLightningErrorZ* orig_conv = (LDKCResult_NoneLightningErrorZ*)(orig & ~1);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = CResult_NoneLightningErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C2Tuple_PublicKeyTypeZ_clone_ptr(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR arg) {
	LDKC2Tuple_PublicKeyTypeZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PublicKeyTypeZ), "LDKC2Tuple_PublicKeyTypeZ");
	*ret_conv = C2Tuple_PublicKeyTypeZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PublicKeyTypeZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC2Tuple_PublicKeyTypeZ* arg_conv = (LDKC2Tuple_PublicKeyTypeZ*)(arg & ~1);
	int64_t ret_val = C2Tuple_PublicKeyTypeZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PublicKeyTypeZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC2Tuple_PublicKeyTypeZ* orig_conv = (LDKC2Tuple_PublicKeyTypeZ*)(orig & ~1);
	LDKC2Tuple_PublicKeyTypeZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PublicKeyTypeZ), "LDKC2Tuple_PublicKeyTypeZ");
	*ret_conv = C2Tuple_PublicKeyTypeZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PublicKeyTypeZ_1new(JNIEnv *env, jclass clz, int8_tArray a, int64_t b) {
	LDKPublicKey a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 33);
	(*env)->GetByteArrayRegion(env, a, 0, 33, a_ref.compressed_form);
	void* b_ptr = (void*)(((uintptr_t)b) & ~1);
	CHECK_ACCESS(b_ptr);
	LDKType b_conv = *(LDKType*)(b_ptr);
	if (b_conv.free == LDKType_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKType_JCalls_cloned(&b_conv);
	}
	LDKC2Tuple_PublicKeyTypeZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_PublicKeyTypeZ), "LDKC2Tuple_PublicKeyTypeZ");
	*ret_conv = C2Tuple_PublicKeyTypeZ_new(a_ref, b_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C2Tuple_1PublicKeyTypeZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC2Tuple_PublicKeyTypeZ _res_conv = *(LDKC2Tuple_PublicKeyTypeZ*)(_res_ptr);
	FREE((void*)_res);
	C2Tuple_PublicKeyTypeZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C2Tuple_1PublicKeyTypeZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C2Tuple_PublicKeyTypeZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC2Tuple_PublicKeyTypeZ), "LDKCVec_C2Tuple_PublicKeyTypeZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t z = 0; z < _res_constr.datalen; z++) {
		int64_t _res_conv_25 = _res_vals[z];
		void* _res_conv_25_ptr = (void*)(((uintptr_t)_res_conv_25) & ~1);
		CHECK_ACCESS(_res_conv_25_ptr);
		LDKC2Tuple_PublicKeyTypeZ _res_conv_25_conv = *(LDKC2Tuple_PublicKeyTypeZ*)(_res_conv_25_ptr);
		FREE((void*)_res_conv_25);
		_res_constr.data[z] = _res_conv_25_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C2Tuple_PublicKeyTypeZZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1ok(JNIEnv *env, jclass clz, jboolean o) {
	LDKCResult_boolLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolLightningErrorZ), "LDKCResult_boolLightningErrorZ");
	*ret_conv = CResult_boolLightningErrorZ_ok(o);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKLightningError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = LightningError_clone(&e_conv);
	LDKCResult_boolLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolLightningErrorZ), "LDKCResult_boolLightningErrorZ");
	*ret_conv = CResult_boolLightningErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_boolLightningErrorZ* o_conv = (LDKCResult_boolLightningErrorZ*)(o & ~1);
	jboolean ret_val = CResult_boolLightningErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_boolLightningErrorZ _res_conv = *(LDKCResult_boolLightningErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_boolLightningErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_boolLightningErrorZ_clone_ptr(LDKCResult_boolLightningErrorZ *NONNULL_PTR arg) {
	LDKCResult_boolLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolLightningErrorZ), "LDKCResult_boolLightningErrorZ");
	*ret_conv = CResult_boolLightningErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_boolLightningErrorZ* arg_conv = (LDKCResult_boolLightningErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_boolLightningErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolLightningErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_boolLightningErrorZ* orig_conv = (LDKCResult_boolLightningErrorZ*)(orig & ~1);
	LDKCResult_boolLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolLightningErrorZ), "LDKCResult_boolLightningErrorZ");
	*ret_conv = CResult_boolLightningErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

static inline uintptr_t C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR arg) {
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* ret_conv = MALLOC(sizeof(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ), "LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ");
	*ret_conv = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(arg);
	return ((uintptr_t)ret_conv);
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* arg_conv = (LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(arg & ~1);
	int64_t ret_val = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* orig_conv = (LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(orig & ~1);
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* ret_conv = MALLOC(sizeof(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ), "LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ");
	*ret_conv = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(orig_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZ_1new(JNIEnv *env, jclass clz, int64_t a, int64_t b, int64_t c) {
	LDKChannelAnnouncement a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = ChannelAnnouncement_clone(&a_conv);
	LDKChannelUpdate b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = (b & 1) || (b == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	b_conv = ChannelUpdate_clone(&b_conv);
	LDKChannelUpdate c_conv;
	c_conv.inner = (void*)(c & (~1));
	c_conv.is_owned = (c & 1) || (c == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(c_conv);
	c_conv = ChannelUpdate_clone(&c_conv);
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ* ret_conv = MALLOC(sizeof(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ), "LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ");
	*ret_conv = C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new(a_conv, b_conv, c_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ _res_conv = *(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(_res_ptr);
	FREE((void*)_res);
	C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1C3Tuple_1ChannelAnnouncementChannelUpdateChannelUpdateZZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ), "LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t h = 0; h < _res_constr.datalen; h++) {
		int64_t _res_conv_59 = _res_vals[h];
		void* _res_conv_59_ptr = (void*)(((uintptr_t)_res_conv_59) & ~1);
		CHECK_ACCESS(_res_conv_59_ptr);
		LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ _res_conv_59_conv = *(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ*)(_res_conv_59_ptr);
		FREE((void*)_res_conv_59);
		_res_constr.data[h] = _res_conv_59_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1NodeAnnouncementZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_NodeAnnouncementZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKNodeAnnouncement), "LDKCVec_NodeAnnouncementZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t s = 0; s < _res_constr.datalen; s++) {
		int64_t _res_conv_18 = _res_vals[s];
		LDKNodeAnnouncement _res_conv_18_conv;
		_res_conv_18_conv.inner = (void*)(_res_conv_18 & (~1));
		_res_conv_18_conv.is_owned = (_res_conv_18 & 1) || (_res_conv_18 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_18_conv);
		_res_constr.data[s] = _res_conv_18_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_NodeAnnouncementZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1PublicKeyZ_1free(JNIEnv *env, jclass clz, jobjectArray _res) {
	LDKCVec_PublicKeyZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKPublicKey), "LDKCVec_PublicKeyZ Elements");
	else
		_res_constr.data = NULL;
	for (size_t i = 0; i < _res_constr.datalen; i++) {
		int8_tArray _res_conv_8 = (*env)->GetObjectArrayElement(env, _res, i);
		LDKPublicKey _res_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, _res_conv_8) == 33);
		(*env)->GetByteArrayRegion(env, _res_conv_8, 0, 33, _res_conv_8_ref.compressed_form);
		_res_constr.data[i] = _res_conv_8_ref;
	}
	CVec_PublicKeyZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1ok(JNIEnv *env, jclass clz, int8_tArray o) {
	LDKCVec_u8Z o_ref;
	o_ref.datalen = (*env)->GetArrayLength(env, o);
	o_ref.data = MALLOC(o_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, o, 0, o_ref.datalen, o_ref.data);
	LDKCResult_CVec_u8ZPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_u8ZPeerHandleErrorZ), "LDKCResult_CVec_u8ZPeerHandleErrorZ");
	*ret_conv = CResult_CVec_u8ZPeerHandleErrorZ_ok(o_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKPeerHandleError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = PeerHandleError_clone(&e_conv);
	LDKCResult_CVec_u8ZPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_u8ZPeerHandleErrorZ), "LDKCResult_CVec_u8ZPeerHandleErrorZ");
	*ret_conv = CResult_CVec_u8ZPeerHandleErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CVec_u8ZPeerHandleErrorZ* o_conv = (LDKCResult_CVec_u8ZPeerHandleErrorZ*)(o & ~1);
	jboolean ret_val = CResult_CVec_u8ZPeerHandleErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CVec_u8ZPeerHandleErrorZ _res_conv = *(LDKCResult_CVec_u8ZPeerHandleErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CVec_u8ZPeerHandleErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR arg) {
	LDKCResult_CVec_u8ZPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_u8ZPeerHandleErrorZ), "LDKCResult_CVec_u8ZPeerHandleErrorZ");
	*ret_conv = CResult_CVec_u8ZPeerHandleErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CVec_u8ZPeerHandleErrorZ* arg_conv = (LDKCResult_CVec_u8ZPeerHandleErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CVec_1u8ZPeerHandleErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CVec_u8ZPeerHandleErrorZ* orig_conv = (LDKCResult_CVec_u8ZPeerHandleErrorZ*)(orig & ~1);
	LDKCResult_CVec_u8ZPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_u8ZPeerHandleErrorZ), "LDKCResult_CVec_u8ZPeerHandleErrorZ");
	*ret_conv = CResult_CVec_u8ZPeerHandleErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1ok(JNIEnv *env, jclass clz) {
	LDKCResult_NonePeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePeerHandleErrorZ), "LDKCResult_NonePeerHandleErrorZ");
	*ret_conv = CResult_NonePeerHandleErrorZ_ok();
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKPeerHandleError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = PeerHandleError_clone(&e_conv);
	LDKCResult_NonePeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePeerHandleErrorZ), "LDKCResult_NonePeerHandleErrorZ");
	*ret_conv = CResult_NonePeerHandleErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NonePeerHandleErrorZ* o_conv = (LDKCResult_NonePeerHandleErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NonePeerHandleErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NonePeerHandleErrorZ _res_conv = *(LDKCResult_NonePeerHandleErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NonePeerHandleErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NonePeerHandleErrorZ_clone_ptr(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR arg) {
	LDKCResult_NonePeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePeerHandleErrorZ), "LDKCResult_NonePeerHandleErrorZ");
	*ret_conv = CResult_NonePeerHandleErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NonePeerHandleErrorZ* arg_conv = (LDKCResult_NonePeerHandleErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NonePeerHandleErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NonePeerHandleErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NonePeerHandleErrorZ* orig_conv = (LDKCResult_NonePeerHandleErrorZ*)(orig & ~1);
	LDKCResult_NonePeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePeerHandleErrorZ), "LDKCResult_NonePeerHandleErrorZ");
	*ret_conv = CResult_NonePeerHandleErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1ok(JNIEnv *env, jclass clz, jboolean o) {
	LDKCResult_boolPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolPeerHandleErrorZ), "LDKCResult_boolPeerHandleErrorZ");
	*ret_conv = CResult_boolPeerHandleErrorZ_ok(o);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKPeerHandleError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = PeerHandleError_clone(&e_conv);
	LDKCResult_boolPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolPeerHandleErrorZ), "LDKCResult_boolPeerHandleErrorZ");
	*ret_conv = CResult_boolPeerHandleErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_boolPeerHandleErrorZ* o_conv = (LDKCResult_boolPeerHandleErrorZ*)(o & ~1);
	jboolean ret_val = CResult_boolPeerHandleErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_boolPeerHandleErrorZ _res_conv = *(LDKCResult_boolPeerHandleErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_boolPeerHandleErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_boolPeerHandleErrorZ_clone_ptr(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR arg) {
	LDKCResult_boolPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolPeerHandleErrorZ), "LDKCResult_boolPeerHandleErrorZ");
	*ret_conv = CResult_boolPeerHandleErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_boolPeerHandleErrorZ* arg_conv = (LDKCResult_boolPeerHandleErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_boolPeerHandleErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1boolPeerHandleErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_boolPeerHandleErrorZ* orig_conv = (LDKCResult_boolPeerHandleErrorZ*)(orig & ~1);
	LDKCResult_boolPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolPeerHandleErrorZ), "LDKCResult_boolPeerHandleErrorZ");
	*ret_conv = CResult_boolPeerHandleErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKNodeId o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = NodeId_clone(&o_conv);
	LDKCResult_NodeIdDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeIdDecodeErrorZ), "LDKCResult_NodeIdDecodeErrorZ");
	*ret_conv = CResult_NodeIdDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_NodeIdDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeIdDecodeErrorZ), "LDKCResult_NodeIdDecodeErrorZ");
	*ret_conv = CResult_NodeIdDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NodeIdDecodeErrorZ* o_conv = (LDKCResult_NodeIdDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NodeIdDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NodeIdDecodeErrorZ _res_conv = *(LDKCResult_NodeIdDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NodeIdDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NodeIdDecodeErrorZ_clone_ptr(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_NodeIdDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeIdDecodeErrorZ), "LDKCResult_NodeIdDecodeErrorZ");
	*ret_conv = CResult_NodeIdDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NodeIdDecodeErrorZ* arg_conv = (LDKCResult_NodeIdDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NodeIdDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeIdDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NodeIdDecodeErrorZ* orig_conv = (LDKCResult_NodeIdDecodeErrorZ*)(orig & ~1);
	LDKCResult_NodeIdDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeIdDecodeErrorZ), "LDKCResult_NodeIdDecodeErrorZ");
	*ret_conv = CResult_NodeIdDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKCOption_NetworkUpdateZ o_conv = *(LDKCOption_NetworkUpdateZ*)(o_ptr);
	o_conv = COption_NetworkUpdateZ_clone((LDKCOption_NetworkUpdateZ*)(((uintptr_t)o) & ~1));
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_NetworkUpdateZDecodeErrorZ), "LDKCResult_COption_NetworkUpdateZDecodeErrorZ");
	*ret_conv = CResult_COption_NetworkUpdateZDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_NetworkUpdateZDecodeErrorZ), "LDKCResult_COption_NetworkUpdateZDecodeErrorZ");
	*ret_conv = CResult_COption_NetworkUpdateZDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* o_conv = (LDKCResult_COption_NetworkUpdateZDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ _res_conv = *(LDKCResult_COption_NetworkUpdateZDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_COption_NetworkUpdateZDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_NetworkUpdateZDecodeErrorZ), "LDKCResult_COption_NetworkUpdateZDecodeErrorZ");
	*ret_conv = CResult_COption_NetworkUpdateZDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* arg_conv = (LDKCResult_COption_NetworkUpdateZDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1COption_1NetworkUpdateZDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* orig_conv = (LDKCResult_COption_NetworkUpdateZDecodeErrorZ*)(orig & ~1);
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_NetworkUpdateZDecodeErrorZ), "LDKCResult_COption_NetworkUpdateZDecodeErrorZ");
	*ret_conv = CResult_COption_NetworkUpdateZDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1AccessZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKAccess o_conv = *(LDKAccess*)(o_ptr);
	if (o_conv.free == LDKAccess_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKAccess_JCalls_cloned(&o_conv);
	}
	LDKCOption_AccessZ *ret_copy = MALLOC(sizeof(LDKCOption_AccessZ), "LDKCOption_AccessZ");
	*ret_copy = COption_AccessZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1AccessZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_AccessZ *ret_copy = MALLOC(sizeof(LDKCOption_AccessZ), "LDKCOption_AccessZ");
	*ret_copy = COption_AccessZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1AccessZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_AccessZ _res_conv = *(LDKCOption_AccessZ*)(_res_ptr);
	FREE((void*)_res);
	COption_AccessZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelUpdateInfo o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelUpdateInfo_clone(&o_conv);
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateInfoDecodeErrorZ), "LDKCResult_ChannelUpdateInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateInfoDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateInfoDecodeErrorZ), "LDKCResult_ChannelUpdateInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateInfoDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* o_conv = (LDKCResult_ChannelUpdateInfoDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelUpdateInfoDecodeErrorZ _res_conv = *(LDKCResult_ChannelUpdateInfoDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelUpdateInfoDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateInfoDecodeErrorZ), "LDKCResult_ChannelUpdateInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateInfoDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* arg_conv = (LDKCResult_ChannelUpdateInfoDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateInfoDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* orig_conv = (LDKCResult_ChannelUpdateInfoDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateInfoDecodeErrorZ), "LDKCResult_ChannelUpdateInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateInfoDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelInfo o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelInfo_clone(&o_conv);
	LDKCResult_ChannelInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelInfoDecodeErrorZ), "LDKCResult_ChannelInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelInfoDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelInfoDecodeErrorZ), "LDKCResult_ChannelInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelInfoDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelInfoDecodeErrorZ* o_conv = (LDKCResult_ChannelInfoDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelInfoDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelInfoDecodeErrorZ _res_conv = *(LDKCResult_ChannelInfoDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelInfoDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelInfoDecodeErrorZ), "LDKCResult_ChannelInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelInfoDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelInfoDecodeErrorZ* arg_conv = (LDKCResult_ChannelInfoDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelInfoDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelInfoDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelInfoDecodeErrorZ* orig_conv = (LDKCResult_ChannelInfoDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelInfoDecodeErrorZ), "LDKCResult_ChannelInfoDecodeErrorZ");
	*ret_conv = CResult_ChannelInfoDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRoutingFees o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = RoutingFees_clone(&o_conv);
	LDKCResult_RoutingFeesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RoutingFeesDecodeErrorZ), "LDKCResult_RoutingFeesDecodeErrorZ");
	*ret_conv = CResult_RoutingFeesDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_RoutingFeesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RoutingFeesDecodeErrorZ), "LDKCResult_RoutingFeesDecodeErrorZ");
	*ret_conv = CResult_RoutingFeesDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RoutingFeesDecodeErrorZ* o_conv = (LDKCResult_RoutingFeesDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RoutingFeesDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RoutingFeesDecodeErrorZ _res_conv = *(LDKCResult_RoutingFeesDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RoutingFeesDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RoutingFeesDecodeErrorZ_clone_ptr(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_RoutingFeesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RoutingFeesDecodeErrorZ), "LDKCResult_RoutingFeesDecodeErrorZ");
	*ret_conv = CResult_RoutingFeesDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RoutingFeesDecodeErrorZ* arg_conv = (LDKCResult_RoutingFeesDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RoutingFeesDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RoutingFeesDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RoutingFeesDecodeErrorZ* orig_conv = (LDKCResult_RoutingFeesDecodeErrorZ*)(orig & ~1);
	LDKCResult_RoutingFeesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RoutingFeesDecodeErrorZ), "LDKCResult_RoutingFeesDecodeErrorZ");
	*ret_conv = CResult_RoutingFeesDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKNodeAnnouncementInfo o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = NodeAnnouncementInfo_clone(&o_conv);
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementInfoDecodeErrorZ), "LDKCResult_NodeAnnouncementInfoDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementInfoDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementInfoDecodeErrorZ), "LDKCResult_NodeAnnouncementInfoDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementInfoDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* o_conv = (LDKCResult_NodeAnnouncementInfoDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ _res_conv = *(LDKCResult_NodeAnnouncementInfoDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NodeAnnouncementInfoDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementInfoDecodeErrorZ), "LDKCResult_NodeAnnouncementInfoDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementInfoDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* arg_conv = (LDKCResult_NodeAnnouncementInfoDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementInfoDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* orig_conv = (LDKCResult_NodeAnnouncementInfoDecodeErrorZ*)(orig & ~1);
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementInfoDecodeErrorZ), "LDKCResult_NodeAnnouncementInfoDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementInfoDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1u64Z_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_u64Z _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(int64_t), "LDKCVec_u64Z Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t g = 0; g < _res_constr.datalen; g++) {
		int64_t _res_conv_6 = _res_vals[g];
		_res_constr.data[g] = _res_conv_6;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_u64Z_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKNodeInfo o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = NodeInfo_clone(&o_conv);
	LDKCResult_NodeInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeInfoDecodeErrorZ), "LDKCResult_NodeInfoDecodeErrorZ");
	*ret_conv = CResult_NodeInfoDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_NodeInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeInfoDecodeErrorZ), "LDKCResult_NodeInfoDecodeErrorZ");
	*ret_conv = CResult_NodeInfoDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NodeInfoDecodeErrorZ* o_conv = (LDKCResult_NodeInfoDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NodeInfoDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NodeInfoDecodeErrorZ _res_conv = *(LDKCResult_NodeInfoDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NodeInfoDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NodeInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_NodeInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeInfoDecodeErrorZ), "LDKCResult_NodeInfoDecodeErrorZ");
	*ret_conv = CResult_NodeInfoDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NodeInfoDecodeErrorZ* arg_conv = (LDKCResult_NodeInfoDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NodeInfoDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeInfoDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NodeInfoDecodeErrorZ* orig_conv = (LDKCResult_NodeInfoDecodeErrorZ*)(orig & ~1);
	LDKCResult_NodeInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeInfoDecodeErrorZ), "LDKCResult_NodeInfoDecodeErrorZ");
	*ret_conv = CResult_NodeInfoDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKNetworkGraph o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = NetworkGraph_clone(&o_conv);
	LDKCResult_NetworkGraphDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetworkGraphDecodeErrorZ), "LDKCResult_NetworkGraphDecodeErrorZ");
	*ret_conv = CResult_NetworkGraphDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_NetworkGraphDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetworkGraphDecodeErrorZ), "LDKCResult_NetworkGraphDecodeErrorZ");
	*ret_conv = CResult_NetworkGraphDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NetworkGraphDecodeErrorZ* o_conv = (LDKCResult_NetworkGraphDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NetworkGraphDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NetworkGraphDecodeErrorZ _res_conv = *(LDKCResult_NetworkGraphDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NetworkGraphDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NetworkGraphDecodeErrorZ_clone_ptr(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_NetworkGraphDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetworkGraphDecodeErrorZ), "LDKCResult_NetworkGraphDecodeErrorZ");
	*ret_conv = CResult_NetworkGraphDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NetworkGraphDecodeErrorZ* arg_conv = (LDKCResult_NetworkGraphDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NetworkGraphDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetworkGraphDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NetworkGraphDecodeErrorZ* orig_conv = (LDKCResult_NetworkGraphDecodeErrorZ*)(orig & ~1);
	LDKCResult_NetworkGraphDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetworkGraphDecodeErrorZ), "LDKCResult_NetworkGraphDecodeErrorZ");
	*ret_conv = CResult_NetworkGraphDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1CVec_1NetAddressZZ_1some(JNIEnv *env, jclass clz, int64_tArray o) {
	LDKCVec_NetAddressZ o_constr;
	o_constr.datalen = (*env)->GetArrayLength(env, o);
	if (o_constr.datalen > 0)
		o_constr.data = MALLOC(o_constr.datalen * sizeof(LDKNetAddress), "LDKCVec_NetAddressZ Elements");
	else
		o_constr.data = NULL;
	int64_t* o_vals = (*env)->GetLongArrayElements (env, o, NULL);
	for (size_t m = 0; m < o_constr.datalen; m++) {
		int64_t o_conv_12 = o_vals[m];
		void* o_conv_12_ptr = (void*)(((uintptr_t)o_conv_12) & ~1);
		CHECK_ACCESS(o_conv_12_ptr);
		LDKNetAddress o_conv_12_conv = *(LDKNetAddress*)(o_conv_12_ptr);
		o_conv_12_conv = NetAddress_clone((LDKNetAddress*)(((uintptr_t)o_conv_12) & ~1));
		o_constr.data[m] = o_conv_12_conv;
	}
	(*env)->ReleaseLongArrayElements(env, o, o_vals, 0);
	LDKCOption_CVec_NetAddressZZ *ret_copy = MALLOC(sizeof(LDKCOption_CVec_NetAddressZZ), "LDKCOption_CVec_NetAddressZZ");
	*ret_copy = COption_CVec_NetAddressZZ_some(o_constr);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1CVec_1NetAddressZZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_CVec_NetAddressZZ *ret_copy = MALLOC(sizeof(LDKCOption_CVec_NetAddressZZ), "LDKCOption_CVec_NetAddressZZ");
	*ret_copy = COption_CVec_NetAddressZZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1CVec_1NetAddressZZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_CVec_NetAddressZZ _res_conv = *(LDKCOption_CVec_NetAddressZZ*)(_res_ptr);
	FREE((void*)_res);
	COption_CVec_NetAddressZZ_free(_res_conv);
}

static inline uintptr_t COption_CVec_NetAddressZZ_clone_ptr(LDKCOption_CVec_NetAddressZZ *NONNULL_PTR arg) {
	LDKCOption_CVec_NetAddressZZ *ret_copy = MALLOC(sizeof(LDKCOption_CVec_NetAddressZZ), "LDKCOption_CVec_NetAddressZZ");
	*ret_copy = COption_CVec_NetAddressZZ_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1CVec_1NetAddressZZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCOption_CVec_NetAddressZZ* arg_conv = (LDKCOption_CVec_NetAddressZZ*)arg;
	int64_t ret_val = COption_CVec_NetAddressZZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1CVec_1NetAddressZZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCOption_CVec_NetAddressZZ* orig_conv = (LDKCOption_CVec_NetAddressZZ*)orig;
	LDKCOption_CVec_NetAddressZZ *ret_copy = MALLOC(sizeof(LDKCOption_CVec_NetAddressZZ), "LDKCOption_CVec_NetAddressZZ");
	*ret_copy = COption_CVec_NetAddressZZ_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKNetAddress o_conv = *(LDKNetAddress*)(o_ptr);
	o_conv = NetAddress_clone((LDKNetAddress*)(((uintptr_t)o) & ~1));
	LDKCResult_NetAddressDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetAddressDecodeErrorZ), "LDKCResult_NetAddressDecodeErrorZ");
	*ret_conv = CResult_NetAddressDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_NetAddressDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetAddressDecodeErrorZ), "LDKCResult_NetAddressDecodeErrorZ");
	*ret_conv = CResult_NetAddressDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NetAddressDecodeErrorZ* o_conv = (LDKCResult_NetAddressDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NetAddressDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NetAddressDecodeErrorZ _res_conv = *(LDKCResult_NetAddressDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NetAddressDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NetAddressDecodeErrorZ_clone_ptr(LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_NetAddressDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetAddressDecodeErrorZ), "LDKCResult_NetAddressDecodeErrorZ");
	*ret_conv = CResult_NetAddressDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NetAddressDecodeErrorZ* arg_conv = (LDKCResult_NetAddressDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NetAddressDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NetAddressDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NetAddressDecodeErrorZ* orig_conv = (LDKCResult_NetAddressDecodeErrorZ*)(orig & ~1);
	LDKCResult_NetAddressDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetAddressDecodeErrorZ), "LDKCResult_NetAddressDecodeErrorZ");
	*ret_conv = CResult_NetAddressDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1UpdateAddHTLCZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_UpdateAddHTLCZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKUpdateAddHTLC), "LDKCVec_UpdateAddHTLCZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t p = 0; p < _res_constr.datalen; p++) {
		int64_t _res_conv_15 = _res_vals[p];
		LDKUpdateAddHTLC _res_conv_15_conv;
		_res_conv_15_conv.inner = (void*)(_res_conv_15 & (~1));
		_res_conv_15_conv.is_owned = (_res_conv_15 & 1) || (_res_conv_15 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_15_conv);
		_res_constr.data[p] = _res_conv_15_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_UpdateAddHTLCZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1UpdateFulfillHTLCZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_UpdateFulfillHTLCZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKUpdateFulfillHTLC), "LDKCVec_UpdateFulfillHTLCZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t t = 0; t < _res_constr.datalen; t++) {
		int64_t _res_conv_19 = _res_vals[t];
		LDKUpdateFulfillHTLC _res_conv_19_conv;
		_res_conv_19_conv.inner = (void*)(_res_conv_19 & (~1));
		_res_conv_19_conv.is_owned = (_res_conv_19 & 1) || (_res_conv_19 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_19_conv);
		_res_constr.data[t] = _res_conv_19_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_UpdateFulfillHTLCZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1UpdateFailHTLCZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_UpdateFailHTLCZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKUpdateFailHTLC), "LDKCVec_UpdateFailHTLCZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t q = 0; q < _res_constr.datalen; q++) {
		int64_t _res_conv_16 = _res_vals[q];
		LDKUpdateFailHTLC _res_conv_16_conv;
		_res_conv_16_conv.inner = (void*)(_res_conv_16 & (~1));
		_res_conv_16_conv.is_owned = (_res_conv_16 & 1) || (_res_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_16_conv);
		_res_constr.data[q] = _res_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_UpdateFailHTLCZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1UpdateFailMalformedHTLCZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_UpdateFailMalformedHTLCZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKUpdateFailMalformedHTLC), "LDKCVec_UpdateFailMalformedHTLCZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t z = 0; z < _res_constr.datalen; z++) {
		int64_t _res_conv_25 = _res_vals[z];
		LDKUpdateFailMalformedHTLC _res_conv_25_conv;
		_res_conv_25_conv.inner = (void*)(_res_conv_25 & (~1));
		_res_conv_25_conv.is_owned = (_res_conv_25 & 1) || (_res_conv_25 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_25_conv);
		_res_constr.data[z] = _res_conv_25_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_UpdateFailMalformedHTLCZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKAcceptChannel o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = AcceptChannel_clone(&o_conv);
	LDKCResult_AcceptChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AcceptChannelDecodeErrorZ), "LDKCResult_AcceptChannelDecodeErrorZ");
	*ret_conv = CResult_AcceptChannelDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_AcceptChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AcceptChannelDecodeErrorZ), "LDKCResult_AcceptChannelDecodeErrorZ");
	*ret_conv = CResult_AcceptChannelDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_AcceptChannelDecodeErrorZ* o_conv = (LDKCResult_AcceptChannelDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_AcceptChannelDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_AcceptChannelDecodeErrorZ _res_conv = *(LDKCResult_AcceptChannelDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_AcceptChannelDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_AcceptChannelDecodeErrorZ_clone_ptr(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_AcceptChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AcceptChannelDecodeErrorZ), "LDKCResult_AcceptChannelDecodeErrorZ");
	*ret_conv = CResult_AcceptChannelDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_AcceptChannelDecodeErrorZ* arg_conv = (LDKCResult_AcceptChannelDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_AcceptChannelDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AcceptChannelDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_AcceptChannelDecodeErrorZ* orig_conv = (LDKCResult_AcceptChannelDecodeErrorZ*)(orig & ~1);
	LDKCResult_AcceptChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AcceptChannelDecodeErrorZ), "LDKCResult_AcceptChannelDecodeErrorZ");
	*ret_conv = CResult_AcceptChannelDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKAnnouncementSignatures o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = AnnouncementSignatures_clone(&o_conv);
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AnnouncementSignaturesDecodeErrorZ), "LDKCResult_AnnouncementSignaturesDecodeErrorZ");
	*ret_conv = CResult_AnnouncementSignaturesDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AnnouncementSignaturesDecodeErrorZ), "LDKCResult_AnnouncementSignaturesDecodeErrorZ");
	*ret_conv = CResult_AnnouncementSignaturesDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* o_conv = (LDKCResult_AnnouncementSignaturesDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_AnnouncementSignaturesDecodeErrorZ _res_conv = *(LDKCResult_AnnouncementSignaturesDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_AnnouncementSignaturesDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AnnouncementSignaturesDecodeErrorZ), "LDKCResult_AnnouncementSignaturesDecodeErrorZ");
	*ret_conv = CResult_AnnouncementSignaturesDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* arg_conv = (LDKCResult_AnnouncementSignaturesDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1AnnouncementSignaturesDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* orig_conv = (LDKCResult_AnnouncementSignaturesDecodeErrorZ*)(orig & ~1);
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AnnouncementSignaturesDecodeErrorZ), "LDKCResult_AnnouncementSignaturesDecodeErrorZ");
	*ret_conv = CResult_AnnouncementSignaturesDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelReestablish o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelReestablish_clone(&o_conv);
	LDKCResult_ChannelReestablishDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelReestablishDecodeErrorZ), "LDKCResult_ChannelReestablishDecodeErrorZ");
	*ret_conv = CResult_ChannelReestablishDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelReestablishDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelReestablishDecodeErrorZ), "LDKCResult_ChannelReestablishDecodeErrorZ");
	*ret_conv = CResult_ChannelReestablishDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelReestablishDecodeErrorZ* o_conv = (LDKCResult_ChannelReestablishDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelReestablishDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelReestablishDecodeErrorZ _res_conv = *(LDKCResult_ChannelReestablishDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelReestablishDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelReestablishDecodeErrorZ_clone_ptr(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelReestablishDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelReestablishDecodeErrorZ), "LDKCResult_ChannelReestablishDecodeErrorZ");
	*ret_conv = CResult_ChannelReestablishDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelReestablishDecodeErrorZ* arg_conv = (LDKCResult_ChannelReestablishDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelReestablishDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelReestablishDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelReestablishDecodeErrorZ* orig_conv = (LDKCResult_ChannelReestablishDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelReestablishDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelReestablishDecodeErrorZ), "LDKCResult_ChannelReestablishDecodeErrorZ");
	*ret_conv = CResult_ChannelReestablishDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKClosingSigned o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ClosingSigned_clone(&o_conv);
	LDKCResult_ClosingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedDecodeErrorZ), "LDKCResult_ClosingSignedDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ClosingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedDecodeErrorZ), "LDKCResult_ClosingSignedDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ClosingSignedDecodeErrorZ* o_conv = (LDKCResult_ClosingSignedDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ClosingSignedDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ClosingSignedDecodeErrorZ _res_conv = *(LDKCResult_ClosingSignedDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ClosingSignedDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ClosingSignedDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ClosingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedDecodeErrorZ), "LDKCResult_ClosingSignedDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ClosingSignedDecodeErrorZ* arg_conv = (LDKCResult_ClosingSignedDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ClosingSignedDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ClosingSignedDecodeErrorZ* orig_conv = (LDKCResult_ClosingSignedDecodeErrorZ*)(orig & ~1);
	LDKCResult_ClosingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedDecodeErrorZ), "LDKCResult_ClosingSignedDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKClosingSignedFeeRange o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ClosingSignedFeeRange_clone(&o_conv);
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ), "LDKCResult_ClosingSignedFeeRangeDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedFeeRangeDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ), "LDKCResult_ClosingSignedFeeRangeDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedFeeRangeDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* o_conv = (LDKCResult_ClosingSignedFeeRangeDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ _res_conv = *(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ClosingSignedFeeRangeDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ), "LDKCResult_ClosingSignedFeeRangeDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedFeeRangeDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* arg_conv = (LDKCResult_ClosingSignedFeeRangeDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ClosingSignedFeeRangeDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* orig_conv = (LDKCResult_ClosingSignedFeeRangeDecodeErrorZ*)(orig & ~1);
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ), "LDKCResult_ClosingSignedFeeRangeDecodeErrorZ");
	*ret_conv = CResult_ClosingSignedFeeRangeDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCommitmentSigned o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = CommitmentSigned_clone(&o_conv);
	LDKCResult_CommitmentSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentSignedDecodeErrorZ), "LDKCResult_CommitmentSignedDecodeErrorZ");
	*ret_conv = CResult_CommitmentSignedDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_CommitmentSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentSignedDecodeErrorZ), "LDKCResult_CommitmentSignedDecodeErrorZ");
	*ret_conv = CResult_CommitmentSignedDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_CommitmentSignedDecodeErrorZ* o_conv = (LDKCResult_CommitmentSignedDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_CommitmentSignedDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_CommitmentSignedDecodeErrorZ _res_conv = *(LDKCResult_CommitmentSignedDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_CommitmentSignedDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_CommitmentSignedDecodeErrorZ_clone_ptr(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_CommitmentSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentSignedDecodeErrorZ), "LDKCResult_CommitmentSignedDecodeErrorZ");
	*ret_conv = CResult_CommitmentSignedDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_CommitmentSignedDecodeErrorZ* arg_conv = (LDKCResult_CommitmentSignedDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_CommitmentSignedDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1CommitmentSignedDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_CommitmentSignedDecodeErrorZ* orig_conv = (LDKCResult_CommitmentSignedDecodeErrorZ*)(orig & ~1);
	LDKCResult_CommitmentSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentSignedDecodeErrorZ), "LDKCResult_CommitmentSignedDecodeErrorZ");
	*ret_conv = CResult_CommitmentSignedDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKFundingCreated o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = FundingCreated_clone(&o_conv);
	LDKCResult_FundingCreatedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingCreatedDecodeErrorZ), "LDKCResult_FundingCreatedDecodeErrorZ");
	*ret_conv = CResult_FundingCreatedDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_FundingCreatedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingCreatedDecodeErrorZ), "LDKCResult_FundingCreatedDecodeErrorZ");
	*ret_conv = CResult_FundingCreatedDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_FundingCreatedDecodeErrorZ* o_conv = (LDKCResult_FundingCreatedDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_FundingCreatedDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_FundingCreatedDecodeErrorZ _res_conv = *(LDKCResult_FundingCreatedDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_FundingCreatedDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_FundingCreatedDecodeErrorZ_clone_ptr(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_FundingCreatedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingCreatedDecodeErrorZ), "LDKCResult_FundingCreatedDecodeErrorZ");
	*ret_conv = CResult_FundingCreatedDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_FundingCreatedDecodeErrorZ* arg_conv = (LDKCResult_FundingCreatedDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_FundingCreatedDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingCreatedDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_FundingCreatedDecodeErrorZ* orig_conv = (LDKCResult_FundingCreatedDecodeErrorZ*)(orig & ~1);
	LDKCResult_FundingCreatedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingCreatedDecodeErrorZ), "LDKCResult_FundingCreatedDecodeErrorZ");
	*ret_conv = CResult_FundingCreatedDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKFundingSigned o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = FundingSigned_clone(&o_conv);
	LDKCResult_FundingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingSignedDecodeErrorZ), "LDKCResult_FundingSignedDecodeErrorZ");
	*ret_conv = CResult_FundingSignedDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_FundingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingSignedDecodeErrorZ), "LDKCResult_FundingSignedDecodeErrorZ");
	*ret_conv = CResult_FundingSignedDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_FundingSignedDecodeErrorZ* o_conv = (LDKCResult_FundingSignedDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_FundingSignedDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_FundingSignedDecodeErrorZ _res_conv = *(LDKCResult_FundingSignedDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_FundingSignedDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_FundingSignedDecodeErrorZ_clone_ptr(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_FundingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingSignedDecodeErrorZ), "LDKCResult_FundingSignedDecodeErrorZ");
	*ret_conv = CResult_FundingSignedDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_FundingSignedDecodeErrorZ* arg_conv = (LDKCResult_FundingSignedDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_FundingSignedDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingSignedDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_FundingSignedDecodeErrorZ* orig_conv = (LDKCResult_FundingSignedDecodeErrorZ*)(orig & ~1);
	LDKCResult_FundingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingSignedDecodeErrorZ), "LDKCResult_FundingSignedDecodeErrorZ");
	*ret_conv = CResult_FundingSignedDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKFundingLocked o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = FundingLocked_clone(&o_conv);
	LDKCResult_FundingLockedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingLockedDecodeErrorZ), "LDKCResult_FundingLockedDecodeErrorZ");
	*ret_conv = CResult_FundingLockedDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_FundingLockedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingLockedDecodeErrorZ), "LDKCResult_FundingLockedDecodeErrorZ");
	*ret_conv = CResult_FundingLockedDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_FundingLockedDecodeErrorZ* o_conv = (LDKCResult_FundingLockedDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_FundingLockedDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_FundingLockedDecodeErrorZ _res_conv = *(LDKCResult_FundingLockedDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_FundingLockedDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_FundingLockedDecodeErrorZ_clone_ptr(LDKCResult_FundingLockedDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_FundingLockedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingLockedDecodeErrorZ), "LDKCResult_FundingLockedDecodeErrorZ");
	*ret_conv = CResult_FundingLockedDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_FundingLockedDecodeErrorZ* arg_conv = (LDKCResult_FundingLockedDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_FundingLockedDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1FundingLockedDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_FundingLockedDecodeErrorZ* orig_conv = (LDKCResult_FundingLockedDecodeErrorZ*)(orig & ~1);
	LDKCResult_FundingLockedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingLockedDecodeErrorZ), "LDKCResult_FundingLockedDecodeErrorZ");
	*ret_conv = CResult_FundingLockedDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKInit o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Init_clone(&o_conv);
	LDKCResult_InitDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitDecodeErrorZ), "LDKCResult_InitDecodeErrorZ");
	*ret_conv = CResult_InitDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_InitDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitDecodeErrorZ), "LDKCResult_InitDecodeErrorZ");
	*ret_conv = CResult_InitDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_InitDecodeErrorZ* o_conv = (LDKCResult_InitDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_InitDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_InitDecodeErrorZ _res_conv = *(LDKCResult_InitDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_InitDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_InitDecodeErrorZ_clone_ptr(LDKCResult_InitDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_InitDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitDecodeErrorZ), "LDKCResult_InitDecodeErrorZ");
	*ret_conv = CResult_InitDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_InitDecodeErrorZ* arg_conv = (LDKCResult_InitDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_InitDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InitDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_InitDecodeErrorZ* orig_conv = (LDKCResult_InitDecodeErrorZ*)(orig & ~1);
	LDKCResult_InitDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitDecodeErrorZ), "LDKCResult_InitDecodeErrorZ");
	*ret_conv = CResult_InitDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKOpenChannel o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = OpenChannel_clone(&o_conv);
	LDKCResult_OpenChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OpenChannelDecodeErrorZ), "LDKCResult_OpenChannelDecodeErrorZ");
	*ret_conv = CResult_OpenChannelDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_OpenChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OpenChannelDecodeErrorZ), "LDKCResult_OpenChannelDecodeErrorZ");
	*ret_conv = CResult_OpenChannelDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_OpenChannelDecodeErrorZ* o_conv = (LDKCResult_OpenChannelDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_OpenChannelDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_OpenChannelDecodeErrorZ _res_conv = *(LDKCResult_OpenChannelDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_OpenChannelDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_OpenChannelDecodeErrorZ_clone_ptr(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_OpenChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OpenChannelDecodeErrorZ), "LDKCResult_OpenChannelDecodeErrorZ");
	*ret_conv = CResult_OpenChannelDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_OpenChannelDecodeErrorZ* arg_conv = (LDKCResult_OpenChannelDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_OpenChannelDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1OpenChannelDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_OpenChannelDecodeErrorZ* orig_conv = (LDKCResult_OpenChannelDecodeErrorZ*)(orig & ~1);
	LDKCResult_OpenChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OpenChannelDecodeErrorZ), "LDKCResult_OpenChannelDecodeErrorZ");
	*ret_conv = CResult_OpenChannelDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKRevokeAndACK o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = RevokeAndACK_clone(&o_conv);
	LDKCResult_RevokeAndACKDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RevokeAndACKDecodeErrorZ), "LDKCResult_RevokeAndACKDecodeErrorZ");
	*ret_conv = CResult_RevokeAndACKDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_RevokeAndACKDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RevokeAndACKDecodeErrorZ), "LDKCResult_RevokeAndACKDecodeErrorZ");
	*ret_conv = CResult_RevokeAndACKDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_RevokeAndACKDecodeErrorZ* o_conv = (LDKCResult_RevokeAndACKDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_RevokeAndACKDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_RevokeAndACKDecodeErrorZ _res_conv = *(LDKCResult_RevokeAndACKDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_RevokeAndACKDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_RevokeAndACKDecodeErrorZ_clone_ptr(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_RevokeAndACKDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RevokeAndACKDecodeErrorZ), "LDKCResult_RevokeAndACKDecodeErrorZ");
	*ret_conv = CResult_RevokeAndACKDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_RevokeAndACKDecodeErrorZ* arg_conv = (LDKCResult_RevokeAndACKDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_RevokeAndACKDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1RevokeAndACKDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_RevokeAndACKDecodeErrorZ* orig_conv = (LDKCResult_RevokeAndACKDecodeErrorZ*)(orig & ~1);
	LDKCResult_RevokeAndACKDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RevokeAndACKDecodeErrorZ), "LDKCResult_RevokeAndACKDecodeErrorZ");
	*ret_conv = CResult_RevokeAndACKDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKShutdown o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Shutdown_clone(&o_conv);
	LDKCResult_ShutdownDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownDecodeErrorZ), "LDKCResult_ShutdownDecodeErrorZ");
	*ret_conv = CResult_ShutdownDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ShutdownDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownDecodeErrorZ), "LDKCResult_ShutdownDecodeErrorZ");
	*ret_conv = CResult_ShutdownDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ShutdownDecodeErrorZ* o_conv = (LDKCResult_ShutdownDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ShutdownDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ShutdownDecodeErrorZ _res_conv = *(LDKCResult_ShutdownDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ShutdownDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ShutdownDecodeErrorZ_clone_ptr(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ShutdownDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownDecodeErrorZ), "LDKCResult_ShutdownDecodeErrorZ");
	*ret_conv = CResult_ShutdownDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ShutdownDecodeErrorZ* arg_conv = (LDKCResult_ShutdownDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ShutdownDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ShutdownDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ShutdownDecodeErrorZ* orig_conv = (LDKCResult_ShutdownDecodeErrorZ*)(orig & ~1);
	LDKCResult_ShutdownDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownDecodeErrorZ), "LDKCResult_ShutdownDecodeErrorZ");
	*ret_conv = CResult_ShutdownDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUpdateFailHTLC o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UpdateFailHTLC_clone(&o_conv);
	LDKCResult_UpdateFailHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailHTLCDecodeErrorZ), "LDKCResult_UpdateFailHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailHTLCDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UpdateFailHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailHTLCDecodeErrorZ), "LDKCResult_UpdateFailHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailHTLCDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UpdateFailHTLCDecodeErrorZ* o_conv = (LDKCResult_UpdateFailHTLCDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UpdateFailHTLCDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UpdateFailHTLCDecodeErrorZ _res_conv = *(LDKCResult_UpdateFailHTLCDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UpdateFailHTLCDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UpdateFailHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailHTLCDecodeErrorZ), "LDKCResult_UpdateFailHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailHTLCDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UpdateFailHTLCDecodeErrorZ* arg_conv = (LDKCResult_UpdateFailHTLCDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailHTLCDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UpdateFailHTLCDecodeErrorZ* orig_conv = (LDKCResult_UpdateFailHTLCDecodeErrorZ*)(orig & ~1);
	LDKCResult_UpdateFailHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailHTLCDecodeErrorZ), "LDKCResult_UpdateFailHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailHTLCDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUpdateFailMalformedHTLC o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UpdateFailMalformedHTLC_clone(&o_conv);
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ), "LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ), "LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailMalformedHTLCDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* o_conv = (LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ _res_conv = *(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UpdateFailMalformedHTLCDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ), "LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* arg_conv = (LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFailMalformedHTLCDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* orig_conv = (LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ*)(orig & ~1);
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ), "LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUpdateFee o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UpdateFee_clone(&o_conv);
	LDKCResult_UpdateFeeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFeeDecodeErrorZ), "LDKCResult_UpdateFeeDecodeErrorZ");
	*ret_conv = CResult_UpdateFeeDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UpdateFeeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFeeDecodeErrorZ), "LDKCResult_UpdateFeeDecodeErrorZ");
	*ret_conv = CResult_UpdateFeeDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UpdateFeeDecodeErrorZ* o_conv = (LDKCResult_UpdateFeeDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UpdateFeeDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UpdateFeeDecodeErrorZ _res_conv = *(LDKCResult_UpdateFeeDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UpdateFeeDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UpdateFeeDecodeErrorZ_clone_ptr(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UpdateFeeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFeeDecodeErrorZ), "LDKCResult_UpdateFeeDecodeErrorZ");
	*ret_conv = CResult_UpdateFeeDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UpdateFeeDecodeErrorZ* arg_conv = (LDKCResult_UpdateFeeDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UpdateFeeDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFeeDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UpdateFeeDecodeErrorZ* orig_conv = (LDKCResult_UpdateFeeDecodeErrorZ*)(orig & ~1);
	LDKCResult_UpdateFeeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFeeDecodeErrorZ), "LDKCResult_UpdateFeeDecodeErrorZ");
	*ret_conv = CResult_UpdateFeeDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUpdateFulfillHTLC o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UpdateFulfillHTLC_clone(&o_conv);
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFulfillHTLCDecodeErrorZ), "LDKCResult_UpdateFulfillHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFulfillHTLCDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFulfillHTLCDecodeErrorZ), "LDKCResult_UpdateFulfillHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFulfillHTLCDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* o_conv = (LDKCResult_UpdateFulfillHTLCDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ _res_conv = *(LDKCResult_UpdateFulfillHTLCDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UpdateFulfillHTLCDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFulfillHTLCDecodeErrorZ), "LDKCResult_UpdateFulfillHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFulfillHTLCDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* arg_conv = (LDKCResult_UpdateFulfillHTLCDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateFulfillHTLCDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* orig_conv = (LDKCResult_UpdateFulfillHTLCDecodeErrorZ*)(orig & ~1);
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFulfillHTLCDecodeErrorZ), "LDKCResult_UpdateFulfillHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateFulfillHTLCDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUpdateAddHTLC o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UpdateAddHTLC_clone(&o_conv);
	LDKCResult_UpdateAddHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateAddHTLCDecodeErrorZ), "LDKCResult_UpdateAddHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateAddHTLCDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UpdateAddHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateAddHTLCDecodeErrorZ), "LDKCResult_UpdateAddHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateAddHTLCDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UpdateAddHTLCDecodeErrorZ* o_conv = (LDKCResult_UpdateAddHTLCDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UpdateAddHTLCDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UpdateAddHTLCDecodeErrorZ _res_conv = *(LDKCResult_UpdateAddHTLCDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UpdateAddHTLCDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UpdateAddHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateAddHTLCDecodeErrorZ), "LDKCResult_UpdateAddHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateAddHTLCDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UpdateAddHTLCDecodeErrorZ* arg_conv = (LDKCResult_UpdateAddHTLCDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UpdateAddHTLCDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UpdateAddHTLCDecodeErrorZ* orig_conv = (LDKCResult_UpdateAddHTLCDecodeErrorZ*)(orig & ~1);
	LDKCResult_UpdateAddHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateAddHTLCDecodeErrorZ), "LDKCResult_UpdateAddHTLCDecodeErrorZ");
	*ret_conv = CResult_UpdateAddHTLCDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKPing o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Ping_clone(&o_conv);
	LDKCResult_PingDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PingDecodeErrorZ), "LDKCResult_PingDecodeErrorZ");
	*ret_conv = CResult_PingDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_PingDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PingDecodeErrorZ), "LDKCResult_PingDecodeErrorZ");
	*ret_conv = CResult_PingDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PingDecodeErrorZ* o_conv = (LDKCResult_PingDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PingDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PingDecodeErrorZ _res_conv = *(LDKCResult_PingDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PingDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PingDecodeErrorZ_clone_ptr(LDKCResult_PingDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_PingDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PingDecodeErrorZ), "LDKCResult_PingDecodeErrorZ");
	*ret_conv = CResult_PingDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PingDecodeErrorZ* arg_conv = (LDKCResult_PingDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PingDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PingDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PingDecodeErrorZ* orig_conv = (LDKCResult_PingDecodeErrorZ*)(orig & ~1);
	LDKCResult_PingDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PingDecodeErrorZ), "LDKCResult_PingDecodeErrorZ");
	*ret_conv = CResult_PingDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKPong o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Pong_clone(&o_conv);
	LDKCResult_PongDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PongDecodeErrorZ), "LDKCResult_PongDecodeErrorZ");
	*ret_conv = CResult_PongDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_PongDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PongDecodeErrorZ), "LDKCResult_PongDecodeErrorZ");
	*ret_conv = CResult_PongDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_PongDecodeErrorZ* o_conv = (LDKCResult_PongDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_PongDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_PongDecodeErrorZ _res_conv = *(LDKCResult_PongDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_PongDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_PongDecodeErrorZ_clone_ptr(LDKCResult_PongDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_PongDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PongDecodeErrorZ), "LDKCResult_PongDecodeErrorZ");
	*ret_conv = CResult_PongDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_PongDecodeErrorZ* arg_conv = (LDKCResult_PongDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_PongDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1PongDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_PongDecodeErrorZ* orig_conv = (LDKCResult_PongDecodeErrorZ*)(orig & ~1);
	LDKCResult_PongDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PongDecodeErrorZ), "LDKCResult_PongDecodeErrorZ");
	*ret_conv = CResult_PongDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUnsignedChannelAnnouncement o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UnsignedChannelAnnouncement_clone(&o_conv);
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ), "LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ), "LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelAnnouncementDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* o_conv = (LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ _res_conv = *(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UnsignedChannelAnnouncementDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ), "LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* arg_conv = (LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelAnnouncementDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* orig_conv = (LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ*)(orig & ~1);
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ), "LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelAnnouncement o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelAnnouncement_clone(&o_conv);
	LDKCResult_ChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelAnnouncementDecodeErrorZ), "LDKCResult_ChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_ChannelAnnouncementDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelAnnouncementDecodeErrorZ), "LDKCResult_ChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_ChannelAnnouncementDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelAnnouncementDecodeErrorZ* o_conv = (LDKCResult_ChannelAnnouncementDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelAnnouncementDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelAnnouncementDecodeErrorZ _res_conv = *(LDKCResult_ChannelAnnouncementDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelAnnouncementDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelAnnouncementDecodeErrorZ), "LDKCResult_ChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_ChannelAnnouncementDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelAnnouncementDecodeErrorZ* arg_conv = (LDKCResult_ChannelAnnouncementDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelAnnouncementDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelAnnouncementDecodeErrorZ* orig_conv = (LDKCResult_ChannelAnnouncementDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelAnnouncementDecodeErrorZ), "LDKCResult_ChannelAnnouncementDecodeErrorZ");
	*ret_conv = CResult_ChannelAnnouncementDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUnsignedChannelUpdate o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UnsignedChannelUpdate_clone(&o_conv);
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelUpdateDecodeErrorZ), "LDKCResult_UnsignedChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelUpdateDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelUpdateDecodeErrorZ), "LDKCResult_UnsignedChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelUpdateDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* o_conv = (LDKCResult_UnsignedChannelUpdateDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ _res_conv = *(LDKCResult_UnsignedChannelUpdateDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UnsignedChannelUpdateDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelUpdateDecodeErrorZ), "LDKCResult_UnsignedChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelUpdateDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* arg_conv = (LDKCResult_UnsignedChannelUpdateDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedChannelUpdateDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* orig_conv = (LDKCResult_UnsignedChannelUpdateDecodeErrorZ*)(orig & ~1);
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelUpdateDecodeErrorZ), "LDKCResult_UnsignedChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_UnsignedChannelUpdateDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKChannelUpdate o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ChannelUpdate_clone(&o_conv);
	LDKCResult_ChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateDecodeErrorZ), "LDKCResult_ChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateDecodeErrorZ), "LDKCResult_ChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ChannelUpdateDecodeErrorZ* o_conv = (LDKCResult_ChannelUpdateDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ChannelUpdateDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ChannelUpdateDecodeErrorZ _res_conv = *(LDKCResult_ChannelUpdateDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ChannelUpdateDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateDecodeErrorZ), "LDKCResult_ChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ChannelUpdateDecodeErrorZ* arg_conv = (LDKCResult_ChannelUpdateDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ChannelUpdateDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ChannelUpdateDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ChannelUpdateDecodeErrorZ* orig_conv = (LDKCResult_ChannelUpdateDecodeErrorZ*)(orig & ~1);
	LDKCResult_ChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateDecodeErrorZ), "LDKCResult_ChannelUpdateDecodeErrorZ");
	*ret_conv = CResult_ChannelUpdateDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKErrorMessage o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ErrorMessage_clone(&o_conv);
	LDKCResult_ErrorMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ErrorMessageDecodeErrorZ), "LDKCResult_ErrorMessageDecodeErrorZ");
	*ret_conv = CResult_ErrorMessageDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ErrorMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ErrorMessageDecodeErrorZ), "LDKCResult_ErrorMessageDecodeErrorZ");
	*ret_conv = CResult_ErrorMessageDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ErrorMessageDecodeErrorZ* o_conv = (LDKCResult_ErrorMessageDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ErrorMessageDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ErrorMessageDecodeErrorZ _res_conv = *(LDKCResult_ErrorMessageDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ErrorMessageDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ErrorMessageDecodeErrorZ_clone_ptr(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ErrorMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ErrorMessageDecodeErrorZ), "LDKCResult_ErrorMessageDecodeErrorZ");
	*ret_conv = CResult_ErrorMessageDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ErrorMessageDecodeErrorZ* arg_conv = (LDKCResult_ErrorMessageDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ErrorMessageDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ErrorMessageDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ErrorMessageDecodeErrorZ* orig_conv = (LDKCResult_ErrorMessageDecodeErrorZ*)(orig & ~1);
	LDKCResult_ErrorMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ErrorMessageDecodeErrorZ), "LDKCResult_ErrorMessageDecodeErrorZ");
	*ret_conv = CResult_ErrorMessageDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKWarningMessage o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = WarningMessage_clone(&o_conv);
	LDKCResult_WarningMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_WarningMessageDecodeErrorZ), "LDKCResult_WarningMessageDecodeErrorZ");
	*ret_conv = CResult_WarningMessageDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_WarningMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_WarningMessageDecodeErrorZ), "LDKCResult_WarningMessageDecodeErrorZ");
	*ret_conv = CResult_WarningMessageDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_WarningMessageDecodeErrorZ* o_conv = (LDKCResult_WarningMessageDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_WarningMessageDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_WarningMessageDecodeErrorZ _res_conv = *(LDKCResult_WarningMessageDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_WarningMessageDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_WarningMessageDecodeErrorZ_clone_ptr(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_WarningMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_WarningMessageDecodeErrorZ), "LDKCResult_WarningMessageDecodeErrorZ");
	*ret_conv = CResult_WarningMessageDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_WarningMessageDecodeErrorZ* arg_conv = (LDKCResult_WarningMessageDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_WarningMessageDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1WarningMessageDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_WarningMessageDecodeErrorZ* orig_conv = (LDKCResult_WarningMessageDecodeErrorZ*)(orig & ~1);
	LDKCResult_WarningMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_WarningMessageDecodeErrorZ), "LDKCResult_WarningMessageDecodeErrorZ");
	*ret_conv = CResult_WarningMessageDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKUnsignedNodeAnnouncement o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = UnsignedNodeAnnouncement_clone(&o_conv);
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ), "LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ), "LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedNodeAnnouncementDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* o_conv = (LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ _res_conv = *(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_UnsignedNodeAnnouncementDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ), "LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* arg_conv = (LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1UnsignedNodeAnnouncementDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* orig_conv = (LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ*)(orig & ~1);
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ), "LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKNodeAnnouncement o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = NodeAnnouncement_clone(&o_conv);
	LDKCResult_NodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementDecodeErrorZ), "LDKCResult_NodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_NodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementDecodeErrorZ), "LDKCResult_NodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_NodeAnnouncementDecodeErrorZ* o_conv = (LDKCResult_NodeAnnouncementDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_NodeAnnouncementDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_NodeAnnouncementDecodeErrorZ _res_conv = *(LDKCResult_NodeAnnouncementDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_NodeAnnouncementDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_NodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_NodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementDecodeErrorZ), "LDKCResult_NodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_NodeAnnouncementDecodeErrorZ* arg_conv = (LDKCResult_NodeAnnouncementDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_NodeAnnouncementDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1NodeAnnouncementDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_NodeAnnouncementDecodeErrorZ* orig_conv = (LDKCResult_NodeAnnouncementDecodeErrorZ*)(orig & ~1);
	LDKCResult_NodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementDecodeErrorZ), "LDKCResult_NodeAnnouncementDecodeErrorZ");
	*ret_conv = CResult_NodeAnnouncementDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKQueryShortChannelIds o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = QueryShortChannelIds_clone(&o_conv);
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryShortChannelIdsDecodeErrorZ), "LDKCResult_QueryShortChannelIdsDecodeErrorZ");
	*ret_conv = CResult_QueryShortChannelIdsDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryShortChannelIdsDecodeErrorZ), "LDKCResult_QueryShortChannelIdsDecodeErrorZ");
	*ret_conv = CResult_QueryShortChannelIdsDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* o_conv = (LDKCResult_QueryShortChannelIdsDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_QueryShortChannelIdsDecodeErrorZ _res_conv = *(LDKCResult_QueryShortChannelIdsDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_QueryShortChannelIdsDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryShortChannelIdsDecodeErrorZ), "LDKCResult_QueryShortChannelIdsDecodeErrorZ");
	*ret_conv = CResult_QueryShortChannelIdsDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* arg_conv = (LDKCResult_QueryShortChannelIdsDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryShortChannelIdsDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* orig_conv = (LDKCResult_QueryShortChannelIdsDecodeErrorZ*)(orig & ~1);
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryShortChannelIdsDecodeErrorZ), "LDKCResult_QueryShortChannelIdsDecodeErrorZ");
	*ret_conv = CResult_QueryShortChannelIdsDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKReplyShortChannelIdsEnd o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ReplyShortChannelIdsEnd_clone(&o_conv);
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ), "LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ");
	*ret_conv = CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ), "LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ");
	*ret_conv = CResult_ReplyShortChannelIdsEndDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* o_conv = (LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ _res_conv = *(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ReplyShortChannelIdsEndDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ), "LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ");
	*ret_conv = CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* arg_conv = (LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyShortChannelIdsEndDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* orig_conv = (LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ*)(orig & ~1);
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ), "LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ");
	*ret_conv = CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKQueryChannelRange o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = QueryChannelRange_clone(&o_conv);
	LDKCResult_QueryChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryChannelRangeDecodeErrorZ), "LDKCResult_QueryChannelRangeDecodeErrorZ");
	*ret_conv = CResult_QueryChannelRangeDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_QueryChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryChannelRangeDecodeErrorZ), "LDKCResult_QueryChannelRangeDecodeErrorZ");
	*ret_conv = CResult_QueryChannelRangeDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_QueryChannelRangeDecodeErrorZ* o_conv = (LDKCResult_QueryChannelRangeDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_QueryChannelRangeDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_QueryChannelRangeDecodeErrorZ _res_conv = *(LDKCResult_QueryChannelRangeDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_QueryChannelRangeDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_QueryChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_QueryChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryChannelRangeDecodeErrorZ), "LDKCResult_QueryChannelRangeDecodeErrorZ");
	*ret_conv = CResult_QueryChannelRangeDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_QueryChannelRangeDecodeErrorZ* arg_conv = (LDKCResult_QueryChannelRangeDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_QueryChannelRangeDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1QueryChannelRangeDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_QueryChannelRangeDecodeErrorZ* orig_conv = (LDKCResult_QueryChannelRangeDecodeErrorZ*)(orig & ~1);
	LDKCResult_QueryChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryChannelRangeDecodeErrorZ), "LDKCResult_QueryChannelRangeDecodeErrorZ");
	*ret_conv = CResult_QueryChannelRangeDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKReplyChannelRange o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = ReplyChannelRange_clone(&o_conv);
	LDKCResult_ReplyChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyChannelRangeDecodeErrorZ), "LDKCResult_ReplyChannelRangeDecodeErrorZ");
	*ret_conv = CResult_ReplyChannelRangeDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_ReplyChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyChannelRangeDecodeErrorZ), "LDKCResult_ReplyChannelRangeDecodeErrorZ");
	*ret_conv = CResult_ReplyChannelRangeDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_ReplyChannelRangeDecodeErrorZ* o_conv = (LDKCResult_ReplyChannelRangeDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_ReplyChannelRangeDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_ReplyChannelRangeDecodeErrorZ _res_conv = *(LDKCResult_ReplyChannelRangeDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_ReplyChannelRangeDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_ReplyChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyChannelRangeDecodeErrorZ), "LDKCResult_ReplyChannelRangeDecodeErrorZ");
	*ret_conv = CResult_ReplyChannelRangeDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_ReplyChannelRangeDecodeErrorZ* arg_conv = (LDKCResult_ReplyChannelRangeDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1ReplyChannelRangeDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_ReplyChannelRangeDecodeErrorZ* orig_conv = (LDKCResult_ReplyChannelRangeDecodeErrorZ*)(orig & ~1);
	LDKCResult_ReplyChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyChannelRangeDecodeErrorZ), "LDKCResult_ReplyChannelRangeDecodeErrorZ");
	*ret_conv = CResult_ReplyChannelRangeDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKGossipTimestampFilter o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = GossipTimestampFilter_clone(&o_conv);
	LDKCResult_GossipTimestampFilterDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_GossipTimestampFilterDecodeErrorZ), "LDKCResult_GossipTimestampFilterDecodeErrorZ");
	*ret_conv = CResult_GossipTimestampFilterDecodeErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	LDKDecodeError e_conv;
	e_conv.inner = (void*)(e & (~1));
	e_conv.is_owned = (e & 1) || (e == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(e_conv);
	e_conv = DecodeError_clone(&e_conv);
	LDKCResult_GossipTimestampFilterDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_GossipTimestampFilterDecodeErrorZ), "LDKCResult_GossipTimestampFilterDecodeErrorZ");
	*ret_conv = CResult_GossipTimestampFilterDecodeErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_GossipTimestampFilterDecodeErrorZ* o_conv = (LDKCResult_GossipTimestampFilterDecodeErrorZ*)(o & ~1);
	jboolean ret_val = CResult_GossipTimestampFilterDecodeErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_GossipTimestampFilterDecodeErrorZ _res_conv = *(LDKCResult_GossipTimestampFilterDecodeErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_GossipTimestampFilterDecodeErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR arg) {
	LDKCResult_GossipTimestampFilterDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_GossipTimestampFilterDecodeErrorZ), "LDKCResult_GossipTimestampFilterDecodeErrorZ");
	*ret_conv = CResult_GossipTimestampFilterDecodeErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_GossipTimestampFilterDecodeErrorZ* arg_conv = (LDKCResult_GossipTimestampFilterDecodeErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1GossipTimestampFilterDecodeErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_GossipTimestampFilterDecodeErrorZ* orig_conv = (LDKCResult_GossipTimestampFilterDecodeErrorZ*)(orig & ~1);
	LDKCResult_GossipTimestampFilterDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_GossipTimestampFilterDecodeErrorZ), "LDKCResult_GossipTimestampFilterDecodeErrorZ");
	*ret_conv = CResult_GossipTimestampFilterDecodeErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1PhantomRouteHintsZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_PhantomRouteHintsZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKPhantomRouteHints), "LDKCVec_PhantomRouteHintsZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t t = 0; t < _res_constr.datalen; t++) {
		int64_t _res_conv_19 = _res_vals[t];
		LDKPhantomRouteHints _res_conv_19_conv;
		_res_conv_19_conv.inner = (void*)(_res_conv_19 & (~1));
		_res_conv_19_conv.is_owned = (_res_conv_19 & 1) || (_res_conv_19 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_19_conv);
		_res_constr.data[t] = _res_conv_19_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_PhantomRouteHintsZ_free(_res_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKInvoice o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	o_conv = Invoice_clone(&o_conv);
	LDKCResult_InvoiceSignOrCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSignOrCreationErrorZ), "LDKCResult_InvoiceSignOrCreationErrorZ");
	*ret_conv = CResult_InvoiceSignOrCreationErrorZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1err(JNIEnv *env, jclass clz, int64_t e) {
	void* e_ptr = (void*)(((uintptr_t)e) & ~1);
	CHECK_ACCESS(e_ptr);
	LDKSignOrCreationError e_conv = *(LDKSignOrCreationError*)(e_ptr);
	e_conv = SignOrCreationError_clone((LDKSignOrCreationError*)(((uintptr_t)e) & ~1));
	LDKCResult_InvoiceSignOrCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSignOrCreationErrorZ), "LDKCResult_InvoiceSignOrCreationErrorZ");
	*ret_conv = CResult_InvoiceSignOrCreationErrorZ_err(e_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_InvoiceSignOrCreationErrorZ* o_conv = (LDKCResult_InvoiceSignOrCreationErrorZ*)(o & ~1);
	jboolean ret_val = CResult_InvoiceSignOrCreationErrorZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_InvoiceSignOrCreationErrorZ _res_conv = *(LDKCResult_InvoiceSignOrCreationErrorZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_InvoiceSignOrCreationErrorZ_free(_res_conv);
}

static inline uintptr_t CResult_InvoiceSignOrCreationErrorZ_clone_ptr(LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR arg) {
	LDKCResult_InvoiceSignOrCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSignOrCreationErrorZ), "LDKCResult_InvoiceSignOrCreationErrorZ");
	*ret_conv = CResult_InvoiceSignOrCreationErrorZ_clone(arg);
	return (uintptr_t)ret_conv;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCResult_InvoiceSignOrCreationErrorZ* arg_conv = (LDKCResult_InvoiceSignOrCreationErrorZ*)(arg & ~1);
	int64_t ret_val = CResult_InvoiceSignOrCreationErrorZ_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1InvoiceSignOrCreationErrorZ_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCResult_InvoiceSignOrCreationErrorZ* orig_conv = (LDKCResult_InvoiceSignOrCreationErrorZ*)(orig & ~1);
	LDKCResult_InvoiceSignOrCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSignOrCreationErrorZ), "LDKCResult_InvoiceSignOrCreationErrorZ");
	*ret_conv = CResult_InvoiceSignOrCreationErrorZ_clone(orig_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1FilterZ_1some(JNIEnv *env, jclass clz, int64_t o) {
	void* o_ptr = (void*)(((uintptr_t)o) & ~1);
	CHECK_ACCESS(o_ptr);
	LDKFilter o_conv = *(LDKFilter*)(o_ptr);
	if (o_conv.free == LDKFilter_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFilter_JCalls_cloned(&o_conv);
	}
	LDKCOption_FilterZ *ret_copy = MALLOC(sizeof(LDKCOption_FilterZ), "LDKCOption_FilterZ");
	*ret_copy = COption_FilterZ_some(o_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_COption_1FilterZ_1none(JNIEnv *env, jclass clz) {
	LDKCOption_FilterZ *ret_copy = MALLOC(sizeof(LDKCOption_FilterZ), "LDKCOption_FilterZ");
	*ret_copy = COption_FilterZ_none();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_COption_1FilterZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCOption_FilterZ _res_conv = *(LDKCOption_FilterZ*)(_res_ptr);
	FREE((void*)_res);
	COption_FilterZ_free(_res_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1LockedChannelMonitorNoneZ_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKLockedChannelMonitor o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = (o & 1) || (o == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	// WARNING: we need a move here but no clone is available for LDKLockedChannelMonitor
	LDKCResult_LockedChannelMonitorNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_LockedChannelMonitorNoneZ), "LDKCResult_LockedChannelMonitorNoneZ");
	*ret_conv = CResult_LockedChannelMonitorNoneZ_ok(o_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CResult_1LockedChannelMonitorNoneZ_1err(JNIEnv *env, jclass clz) {
	LDKCResult_LockedChannelMonitorNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_LockedChannelMonitorNoneZ), "LDKCResult_LockedChannelMonitorNoneZ");
	*ret_conv = CResult_LockedChannelMonitorNoneZ_err();
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CResult_1LockedChannelMonitorNoneZ_1is_1ok(JNIEnv *env, jclass clz, int64_t o) {
	LDKCResult_LockedChannelMonitorNoneZ* o_conv = (LDKCResult_LockedChannelMonitorNoneZ*)(o & ~1);
	jboolean ret_val = CResult_LockedChannelMonitorNoneZ_is_ok(o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CResult_1LockedChannelMonitorNoneZ_1free(JNIEnv *env, jclass clz, int64_t _res) {
	if ((_res & 1) != 0) return;
	void* _res_ptr = (void*)(((uintptr_t)_res) & ~1);
	CHECK_ACCESS(_res_ptr);
	LDKCResult_LockedChannelMonitorNoneZ _res_conv = *(LDKCResult_LockedChannelMonitorNoneZ*)(_res_ptr);
	FREE((void*)_res);
	CResult_LockedChannelMonitorNoneZ_free(_res_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CVec_1OutPointZ_1free(JNIEnv *env, jclass clz, int64_tArray _res) {
	LDKCVec_OutPointZ _res_constr;
	_res_constr.datalen = (*env)->GetArrayLength(env, _res);
	if (_res_constr.datalen > 0)
		_res_constr.data = MALLOC(_res_constr.datalen * sizeof(LDKOutPoint), "LDKCVec_OutPointZ Elements");
	else
		_res_constr.data = NULL;
	int64_t* _res_vals = (*env)->GetLongArrayElements (env, _res, NULL);
	for (size_t k = 0; k < _res_constr.datalen; k++) {
		int64_t _res_conv_10 = _res_vals[k];
		LDKOutPoint _res_conv_10_conv;
		_res_conv_10_conv.inner = (void*)(_res_conv_10 & (~1));
		_res_conv_10_conv.is_owned = (_res_conv_10 & 1) || (_res_conv_10 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(_res_conv_10_conv);
		_res_constr.data[k] = _res_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, _res, _res_vals, 0);
	CVec_OutPointZ_free(_res_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentPurpose_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKPaymentPurpose this_ptr_conv = *(LDKPaymentPurpose*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	PaymentPurpose_free(this_ptr_conv);
}

static inline uintptr_t PaymentPurpose_clone_ptr(LDKPaymentPurpose *NONNULL_PTR arg) {
	LDKPaymentPurpose *ret_copy = MALLOC(sizeof(LDKPaymentPurpose), "LDKPaymentPurpose");
	*ret_copy = PaymentPurpose_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentPurpose_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPaymentPurpose* arg_conv = (LDKPaymentPurpose*)arg;
	int64_t ret_val = PaymentPurpose_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentPurpose_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPaymentPurpose* orig_conv = (LDKPaymentPurpose*)orig;
	LDKPaymentPurpose *ret_copy = MALLOC(sizeof(LDKPaymentPurpose), "LDKPaymentPurpose");
	*ret_copy = PaymentPurpose_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentPurpose_1invoice_1payment(JNIEnv *env, jclass clz, int8_tArray payment_preimage, int8_tArray payment_secret) {
	LDKThirtyTwoBytes payment_preimage_ref;
	CHECK((*env)->GetArrayLength(env, payment_preimage) == 32);
	(*env)->GetByteArrayRegion(env, payment_preimage, 0, 32, payment_preimage_ref.data);
	LDKThirtyTwoBytes payment_secret_ref;
	CHECK((*env)->GetArrayLength(env, payment_secret) == 32);
	(*env)->GetByteArrayRegion(env, payment_secret, 0, 32, payment_secret_ref.data);
	LDKPaymentPurpose *ret_copy = MALLOC(sizeof(LDKPaymentPurpose), "LDKPaymentPurpose");
	*ret_copy = PaymentPurpose_invoice_payment(payment_preimage_ref, payment_secret_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentPurpose_1spontaneous_1payment(JNIEnv *env, jclass clz, int8_tArray a) {
	LDKThirtyTwoBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 32);
	(*env)->GetByteArrayRegion(env, a, 0, 32, a_ref.data);
	LDKPaymentPurpose *ret_copy = MALLOC(sizeof(LDKPaymentPurpose), "LDKPaymentPurpose");
	*ret_copy = PaymentPurpose_spontaneous_payment(a_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosureReason_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKClosureReason this_ptr_conv = *(LDKClosureReason*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	ClosureReason_free(this_ptr_conv);
}

static inline uintptr_t ClosureReason_clone_ptr(LDKClosureReason *NONNULL_PTR arg) {
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKClosureReason* arg_conv = (LDKClosureReason*)arg;
	int64_t ret_val = ClosureReason_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKClosureReason* orig_conv = (LDKClosureReason*)orig;
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1counterparty_1force_1closed(JNIEnv *env, jclass clz, jstring peer_msg) {
	LDKStr peer_msg_conv = java_to_owned_str(env, peer_msg);
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_counterparty_force_closed(peer_msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1holder_1force_1closed(JNIEnv *env, jclass clz) {
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_holder_force_closed();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1cooperative_1closure(JNIEnv *env, jclass clz) {
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_cooperative_closure();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1commitment_1tx_1confirmed(JNIEnv *env, jclass clz) {
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_commitment_tx_confirmed();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1funding_1timed_1out(JNIEnv *env, jclass clz) {
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_funding_timed_out();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1processing_1error(JNIEnv *env, jclass clz, jstring err) {
	LDKStr err_conv = java_to_owned_str(env, err);
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_processing_error(err_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1disconnected_1peer(JNIEnv *env, jclass clz) {
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_disconnected_peer();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1outdated_1channel_1manager(JNIEnv *env, jclass clz) {
	LDKClosureReason *ret_copy = MALLOC(sizeof(LDKClosureReason), "LDKClosureReason");
	*ret_copy = ClosureReason_outdated_channel_manager();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ClosureReason_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKClosureReason* obj_conv = (LDKClosureReason*)obj;
	LDKCVec_u8Z ret_var = ClosureReason_write(obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosureReason_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_COption_ClosureReasonZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_ClosureReasonZDecodeErrorZ), "LDKCResult_COption_ClosureReasonZDecodeErrorZ");
	*ret_conv = ClosureReason_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Event_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKEvent this_ptr_conv = *(LDKEvent*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Event_free(this_ptr_conv);
}

static inline uintptr_t Event_clone_ptr(LDKEvent *NONNULL_PTR arg) {
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKEvent* arg_conv = (LDKEvent*)arg;
	int64_t ret_val = Event_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKEvent* orig_conv = (LDKEvent*)orig;
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1funding_1generation_1ready(JNIEnv *env, jclass clz, int8_tArray temporary_channel_id, int64_t channel_value_satoshis, int8_tArray output_script, int64_t user_channel_id) {
	LDKThirtyTwoBytes temporary_channel_id_ref;
	CHECK((*env)->GetArrayLength(env, temporary_channel_id) == 32);
	(*env)->GetByteArrayRegion(env, temporary_channel_id, 0, 32, temporary_channel_id_ref.data);
	LDKCVec_u8Z output_script_ref;
	output_script_ref.datalen = (*env)->GetArrayLength(env, output_script);
	output_script_ref.data = MALLOC(output_script_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, output_script, 0, output_script_ref.datalen, output_script_ref.data);
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_funding_generation_ready(temporary_channel_id_ref, channel_value_satoshis, output_script_ref, user_channel_id);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1payment_1received(JNIEnv *env, jclass clz, int8_tArray payment_hash, int64_t amt, int64_t purpose) {
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	void* purpose_ptr = (void*)(((uintptr_t)purpose) & ~1);
	CHECK_ACCESS(purpose_ptr);
	LDKPaymentPurpose purpose_conv = *(LDKPaymentPurpose*)(purpose_ptr);
	purpose_conv = PaymentPurpose_clone((LDKPaymentPurpose*)(((uintptr_t)purpose) & ~1));
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_payment_received(payment_hash_ref, amt, purpose_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1payment_1sent(JNIEnv *env, jclass clz, int8_tArray payment_id, int8_tArray payment_preimage, int8_tArray payment_hash, int64_t fee_paid_msat) {
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	LDKThirtyTwoBytes payment_preimage_ref;
	CHECK((*env)->GetArrayLength(env, payment_preimage) == 32);
	(*env)->GetByteArrayRegion(env, payment_preimage, 0, 32, payment_preimage_ref.data);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	void* fee_paid_msat_ptr = (void*)(((uintptr_t)fee_paid_msat) & ~1);
	CHECK_ACCESS(fee_paid_msat_ptr);
	LDKCOption_u64Z fee_paid_msat_conv = *(LDKCOption_u64Z*)(fee_paid_msat_ptr);
	fee_paid_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)fee_paid_msat) & ~1));
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_payment_sent(payment_id_ref, payment_preimage_ref, payment_hash_ref, fee_paid_msat_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1payment_1path_1failed(JNIEnv *env, jclass clz, int8_tArray payment_id, int8_tArray payment_hash, jboolean rejected_by_dest, int64_t network_update, jboolean all_paths_failed, int64_tArray path, int64_t short_channel_id, int64_t retry) {
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	void* network_update_ptr = (void*)(((uintptr_t)network_update) & ~1);
	CHECK_ACCESS(network_update_ptr);
	LDKCOption_NetworkUpdateZ network_update_conv = *(LDKCOption_NetworkUpdateZ*)(network_update_ptr);
	network_update_conv = COption_NetworkUpdateZ_clone((LDKCOption_NetworkUpdateZ*)(((uintptr_t)network_update) & ~1));
	LDKCVec_RouteHopZ path_constr;
	path_constr.datalen = (*env)->GetArrayLength(env, path);
	if (path_constr.datalen > 0)
		path_constr.data = MALLOC(path_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
	else
		path_constr.data = NULL;
	int64_t* path_vals = (*env)->GetLongArrayElements (env, path, NULL);
	for (size_t k = 0; k < path_constr.datalen; k++) {
		int64_t path_conv_10 = path_vals[k];
		LDKRouteHop path_conv_10_conv;
		path_conv_10_conv.inner = (void*)(path_conv_10 & (~1));
		path_conv_10_conv.is_owned = (path_conv_10 & 1) || (path_conv_10 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_conv);
		path_conv_10_conv = RouteHop_clone(&path_conv_10_conv);
		path_constr.data[k] = path_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, path, path_vals, 0);
	void* short_channel_id_ptr = (void*)(((uintptr_t)short_channel_id) & ~1);
	CHECK_ACCESS(short_channel_id_ptr);
	LDKCOption_u64Z short_channel_id_conv = *(LDKCOption_u64Z*)(short_channel_id_ptr);
	short_channel_id_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)short_channel_id) & ~1));
	LDKRouteParameters retry_conv;
	retry_conv.inner = (void*)(retry & (~1));
	retry_conv.is_owned = (retry & 1) || (retry == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(retry_conv);
	retry_conv = RouteParameters_clone(&retry_conv);
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_payment_path_failed(payment_id_ref, payment_hash_ref, rejected_by_dest, network_update_conv, all_paths_failed, path_constr, short_channel_id_conv, retry_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1payment_1failed(JNIEnv *env, jclass clz, int8_tArray payment_id, int8_tArray payment_hash) {
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_payment_failed(payment_id_ref, payment_hash_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1pending_1htlcs_1forwardable(JNIEnv *env, jclass clz, int64_t time_forwardable) {
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_pending_htlcs_forwardable(time_forwardable);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1spendable_1outputs(JNIEnv *env, jclass clz, int64_tArray outputs) {
	LDKCVec_SpendableOutputDescriptorZ outputs_constr;
	outputs_constr.datalen = (*env)->GetArrayLength(env, outputs);
	if (outputs_constr.datalen > 0)
		outputs_constr.data = MALLOC(outputs_constr.datalen * sizeof(LDKSpendableOutputDescriptor), "LDKCVec_SpendableOutputDescriptorZ Elements");
	else
		outputs_constr.data = NULL;
	int64_t* outputs_vals = (*env)->GetLongArrayElements (env, outputs, NULL);
	for (size_t b = 0; b < outputs_constr.datalen; b++) {
		int64_t outputs_conv_27 = outputs_vals[b];
		void* outputs_conv_27_ptr = (void*)(((uintptr_t)outputs_conv_27) & ~1);
		CHECK_ACCESS(outputs_conv_27_ptr);
		LDKSpendableOutputDescriptor outputs_conv_27_conv = *(LDKSpendableOutputDescriptor*)(outputs_conv_27_ptr);
		outputs_conv_27_conv = SpendableOutputDescriptor_clone((LDKSpendableOutputDescriptor*)(((uintptr_t)outputs_conv_27) & ~1));
		outputs_constr.data[b] = outputs_conv_27_conv;
	}
	(*env)->ReleaseLongArrayElements(env, outputs, outputs_vals, 0);
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_spendable_outputs(outputs_constr);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1payment_1forwarded(JNIEnv *env, jclass clz, int64_t fee_earned_msat, jboolean claim_from_onchain_tx) {
	void* fee_earned_msat_ptr = (void*)(((uintptr_t)fee_earned_msat) & ~1);
	CHECK_ACCESS(fee_earned_msat_ptr);
	LDKCOption_u64Z fee_earned_msat_conv = *(LDKCOption_u64Z*)(fee_earned_msat_ptr);
	fee_earned_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)fee_earned_msat) & ~1));
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_payment_forwarded(fee_earned_msat_conv, claim_from_onchain_tx);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1channel_1closed(JNIEnv *env, jclass clz, int8_tArray channel_id, int64_t user_channel_id, int64_t reason) {
	LDKThirtyTwoBytes channel_id_ref;
	CHECK((*env)->GetArrayLength(env, channel_id) == 32);
	(*env)->GetByteArrayRegion(env, channel_id, 0, 32, channel_id_ref.data);
	void* reason_ptr = (void*)(((uintptr_t)reason) & ~1);
	CHECK_ACCESS(reason_ptr);
	LDKClosureReason reason_conv = *(LDKClosureReason*)(reason_ptr);
	reason_conv = ClosureReason_clone((LDKClosureReason*)(((uintptr_t)reason) & ~1));
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_channel_closed(channel_id_ref, user_channel_id, reason_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1discard_1funding(JNIEnv *env, jclass clz, int8_tArray channel_id, int8_tArray transaction) {
	LDKThirtyTwoBytes channel_id_ref;
	CHECK((*env)->GetArrayLength(env, channel_id) == 32);
	(*env)->GetByteArrayRegion(env, channel_id, 0, 32, channel_id_ref.data);
	LDKTransaction transaction_ref;
	transaction_ref.datalen = (*env)->GetArrayLength(env, transaction);
	transaction_ref.data = MALLOC(transaction_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, transaction, 0, transaction_ref.datalen, transaction_ref.data);
	transaction_ref.data_is_owned = true;
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_discard_funding(channel_id_ref, transaction_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1payment_1path_1successful(JNIEnv *env, jclass clz, int8_tArray payment_id, int8_tArray payment_hash, int64_tArray path) {
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	LDKCVec_RouteHopZ path_constr;
	path_constr.datalen = (*env)->GetArrayLength(env, path);
	if (path_constr.datalen > 0)
		path_constr.data = MALLOC(path_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
	else
		path_constr.data = NULL;
	int64_t* path_vals = (*env)->GetLongArrayElements (env, path, NULL);
	for (size_t k = 0; k < path_constr.datalen; k++) {
		int64_t path_conv_10 = path_vals[k];
		LDKRouteHop path_conv_10_conv;
		path_conv_10_conv.inner = (void*)(path_conv_10 & (~1));
		path_conv_10_conv.is_owned = (path_conv_10 & 1) || (path_conv_10 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(path_conv_10_conv);
		path_conv_10_conv = RouteHop_clone(&path_conv_10_conv);
		path_constr.data[k] = path_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, path, path_vals, 0);
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_payment_path_successful(payment_id_ref, payment_hash_ref, path_constr);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1open_1channel_1request(JNIEnv *env, jclass clz, int8_tArray temporary_channel_id, int8_tArray counterparty_node_id, int64_t funding_satoshis, int64_t push_msat) {
	LDKThirtyTwoBytes temporary_channel_id_ref;
	CHECK((*env)->GetArrayLength(env, temporary_channel_id) == 32);
	(*env)->GetByteArrayRegion(env, temporary_channel_id, 0, 32, temporary_channel_id_ref.data);
	LDKPublicKey counterparty_node_id_ref;
	CHECK((*env)->GetArrayLength(env, counterparty_node_id) == 33);
	(*env)->GetByteArrayRegion(env, counterparty_node_id, 0, 33, counterparty_node_id_ref.compressed_form);
	LDKEvent *ret_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
	*ret_copy = Event_open_channel_request(temporary_channel_id_ref, counterparty_node_id_ref, funding_satoshis, push_msat);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Event_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKEvent* obj_conv = (LDKEvent*)obj;
	LDKCVec_u8Z ret_var = Event_write(obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Event_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_COption_EventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_EventZDecodeErrorZ), "LDKCResult_COption_EventZDecodeErrorZ");
	*ret_conv = Event_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKMessageSendEvent this_ptr_conv = *(LDKMessageSendEvent*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	MessageSendEvent_free(this_ptr_conv);
}

static inline uintptr_t MessageSendEvent_clone_ptr(LDKMessageSendEvent *NONNULL_PTR arg) {
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKMessageSendEvent* arg_conv = (LDKMessageSendEvent*)arg;
	int64_t ret_val = MessageSendEvent_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKMessageSendEvent* orig_conv = (LDKMessageSendEvent*)orig;
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1accept_1channel(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKAcceptChannel msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = AcceptChannel_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_accept_channel(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1open_1channel(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKOpenChannel msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = OpenChannel_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_open_channel(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1funding_1created(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKFundingCreated msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = FundingCreated_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_funding_created(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1funding_1signed(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKFundingSigned msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = FundingSigned_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_funding_signed(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1funding_1locked(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKFundingLocked msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = FundingLocked_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_funding_locked(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1announcement_1signatures(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKAnnouncementSignatures msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = AnnouncementSignatures_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_announcement_signatures(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1update_1htlcs(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t updates) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKCommitmentUpdate updates_conv;
	updates_conv.inner = (void*)(updates & (~1));
	updates_conv.is_owned = (updates & 1) || (updates == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(updates_conv);
	updates_conv = CommitmentUpdate_clone(&updates_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_update_htlcs(node_id_ref, updates_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1revoke_1and_1ack(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKRevokeAndACK msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = RevokeAndACK_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_revoke_and_ack(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1closing_1signed(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKClosingSigned msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ClosingSigned_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_closing_signed(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1shutdown(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKShutdown msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = Shutdown_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_shutdown(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1channel_1reestablish(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKChannelReestablish msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ChannelReestablish_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_channel_reestablish(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1broadcast_1channel_1announcement(JNIEnv *env, jclass clz, int64_t msg, int64_t update_msg) {
	LDKChannelAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ChannelAnnouncement_clone(&msg_conv);
	LDKChannelUpdate update_msg_conv;
	update_msg_conv.inner = (void*)(update_msg & (~1));
	update_msg_conv.is_owned = (update_msg & 1) || (update_msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_msg_conv);
	update_msg_conv = ChannelUpdate_clone(&update_msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_broadcast_channel_announcement(msg_conv, update_msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1broadcast_1node_1announcement(JNIEnv *env, jclass clz, int64_t msg) {
	LDKNodeAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = NodeAnnouncement_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_broadcast_node_announcement(msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1broadcast_1channel_1update(JNIEnv *env, jclass clz, int64_t msg) {
	LDKChannelUpdate msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ChannelUpdate_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_broadcast_channel_update(msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1channel_1update(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKChannelUpdate msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ChannelUpdate_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_channel_update(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1handle_1error(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t action) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	void* action_ptr = (void*)(((uintptr_t)action) & ~1);
	CHECK_ACCESS(action_ptr);
	LDKErrorAction action_conv = *(LDKErrorAction*)(action_ptr);
	action_conv = ErrorAction_clone((LDKErrorAction*)(((uintptr_t)action) & ~1));
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_handle_error(node_id_ref, action_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1channel_1range_1query(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKQueryChannelRange msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = QueryChannelRange_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_channel_range_query(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1short_1ids_1query(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKQueryShortChannelIds msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = QueryShortChannelIds_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_short_ids_query(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageSendEvent_1send_1reply_1channel_1range(JNIEnv *env, jclass clz, int8_tArray node_id, int64_t msg) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKReplyChannelRange msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ReplyChannelRange_clone(&msg_conv);
	LDKMessageSendEvent *ret_copy = MALLOC(sizeof(LDKMessageSendEvent), "LDKMessageSendEvent");
	*ret_copy = MessageSendEvent_send_reply_channel_range(node_id_ref, msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MessageSendEventsProvider_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKMessageSendEventsProvider this_ptr_conv = *(LDKMessageSendEventsProvider*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	MessageSendEventsProvider_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_EventsProvider_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKEventsProvider this_ptr_conv = *(LDKEventsProvider*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	EventsProvider_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_EventHandler_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKEventHandler this_ptr_conv = *(LDKEventHandler*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	EventHandler_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_APIError_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKAPIError this_ptr_conv = *(LDKAPIError*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	APIError_free(this_ptr_conv);
}

static inline uintptr_t APIError_clone_ptr(LDKAPIError *NONNULL_PTR arg) {
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKAPIError* arg_conv = (LDKAPIError*)arg;
	int64_t ret_val = APIError_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKAPIError* orig_conv = (LDKAPIError*)orig;
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1apimisuse_1error(JNIEnv *env, jclass clz, jstring err) {
	LDKStr err_conv = java_to_owned_str(env, err);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_apimisuse_error(err_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1fee_1rate_1too_1high(JNIEnv *env, jclass clz, jstring err, int32_t feerate) {
	LDKStr err_conv = java_to_owned_str(env, err);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_fee_rate_too_high(err_conv, feerate);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1route_1error(JNIEnv *env, jclass clz, jstring err) {
	LDKStr err_conv = java_to_owned_str(env, err);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_route_error(err_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1channel_1unavailable(JNIEnv *env, jclass clz, jstring err) {
	LDKStr err_conv = java_to_owned_str(env, err);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_channel_unavailable(err_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1monitor_1update_1failed(JNIEnv *env, jclass clz) {
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_monitor_update_failed();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_APIError_1incompatible_1shutdown_1script(JNIEnv *env, jclass clz, int64_t script) {
	LDKShutdownScript script_conv;
	script_conv.inner = (void*)(script & (~1));
	script_conv.is_owned = (script & 1) || (script == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(script_conv);
	script_conv = ShutdownScript_clone(&script_conv);
	LDKAPIError *ret_copy = MALLOC(sizeof(LDKAPIError), "LDKAPIError");
	*ret_copy = APIError_incompatible_shutdown_script(script_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_sign(JNIEnv *env, jclass clz, int8_tArray msg, int8_tArray sk) {
	LDKu8slice msg_ref;
	msg_ref.datalen = (*env)->GetArrayLength(env, msg);
	msg_ref.data = (*env)->GetByteArrayElements (env, msg, NULL);
	unsigned char sk_arr[32];
	CHECK((*env)->GetArrayLength(env, sk) == 32);
	(*env)->GetByteArrayRegion(env, sk, 0, 32, sk_arr);
	unsigned char (*sk_ref)[32] = &sk_arr;
	LDKCResult_StringErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StringErrorZ), "LDKCResult_StringErrorZ");
	*ret_conv = sign(msg_ref, sk_ref);
	(*env)->ReleaseByteArrayElements(env, msg, (int8_t*)msg_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_recover_1pk(JNIEnv *env, jclass clz, int8_tArray msg, jstring sig) {
	LDKu8slice msg_ref;
	msg_ref.datalen = (*env)->GetArrayLength(env, msg);
	msg_ref.data = (*env)->GetByteArrayElements (env, msg, NULL);
	LDKStr sig_conv = java_to_owned_str(env, sig);
	LDKCResult_PublicKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PublicKeyErrorZ), "LDKCResult_PublicKeyErrorZ");
	*ret_conv = recover_pk(msg_ref, sig_conv);
	(*env)->ReleaseByteArrayElements(env, msg, (int8_t*)msg_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_verify(JNIEnv *env, jclass clz, int8_tArray msg, jstring sig, int8_tArray pk) {
	LDKu8slice msg_ref;
	msg_ref.datalen = (*env)->GetArrayLength(env, msg);
	msg_ref.data = (*env)->GetByteArrayElements (env, msg, NULL);
	LDKStr sig_conv = java_to_owned_str(env, sig);
	LDKPublicKey pk_ref;
	CHECK((*env)->GetArrayLength(env, pk) == 33);
	(*env)->GetByteArrayRegion(env, pk, 0, 33, pk_ref.compressed_form);
	jboolean ret_val = verify(msg_ref, sig_conv, pk_ref);
	(*env)->ReleaseByteArrayElements(env, msg, (int8_t*)msg_ref.data, 0);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_construct_1invoice_1preimage(JNIEnv *env, jclass clz, int8_tArray hrp_bytes, jobjectArray data_without_signature) {
	LDKu8slice hrp_bytes_ref;
	hrp_bytes_ref.datalen = (*env)->GetArrayLength(env, hrp_bytes);
	hrp_bytes_ref.data = (*env)->GetByteArrayElements (env, hrp_bytes, NULL);
	LDKCVec_u5Z data_without_signature_constr;
	data_without_signature_constr.datalen = (*env)->GetArrayLength(env, data_without_signature);
	if (data_without_signature_constr.datalen > 0)
		data_without_signature_constr.data = MALLOC(data_without_signature_constr.datalen * sizeof(LDKu5), "LDKCVec_u5Z Elements");
	else
		data_without_signature_constr.data = NULL;
	int8_t* data_without_signature_vals = (*env)->GetByteArrayElements (env, data_without_signature, NULL);
	for (size_t h = 0; h < data_without_signature_constr.datalen; h++) {
		int8_t data_without_signature_conv_7 = data_without_signature_vals[h];
		
		data_without_signature_constr.data[h] = (LDKu5){ ._0 = data_without_signature_conv_7 };
	}
	(*env)->ReleaseByteArrayElements(env, data_without_signature, data_without_signature_vals, 0);
	LDKCVec_u8Z ret_var = construct_invoice_preimage(hrp_bytes_ref, data_without_signature_constr);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	(*env)->ReleaseByteArrayElements(env, hrp_bytes, (int8_t*)hrp_bytes_ref.data, 0);
	return ret_arr;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKLevel* orig_conv = (LDKLevel*)(orig & ~1);
	jclass ret_conv = LDKLevel_to_java(env, Level_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1gossip(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKLevel_to_java(env, Level_gossip());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1trace(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKLevel_to_java(env, Level_trace());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1debug(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKLevel_to_java(env, Level_debug());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1info(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKLevel_to_java(env, Level_info());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1warn(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKLevel_to_java(env, Level_warn());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1error(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKLevel_to_java(env, Level_error());
	return ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Level_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKLevel* a_conv = (LDKLevel*)(a & ~1);
	LDKLevel* b_conv = (LDKLevel*)(b & ~1);
	jboolean ret_val = Level_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Level_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKLevel* o_conv = (LDKLevel*)(o & ~1);
	int64_t ret_val = Level_hash(o_conv);
	return ret_val;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Level_1max(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKLevel_to_java(env, Level_max());
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Record_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRecord this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Record_free(this_obj_conv);
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Record_1get_1level(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jclass ret_conv = LDKLevel_to_java(env, Record_get_level(&this_ptr_conv));
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Record_1set_1level(JNIEnv *env, jclass clz, int64_t this_ptr, jclass val) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKLevel val_conv = LDKLevel_from_java(env, val);
	Record_set_level(&this_ptr_conv, val_conv);
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_Record_1get_1args(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr ret_str = Record_get_args(&this_ptr_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Record_1set_1args(JNIEnv *env, jclass clz, int64_t this_ptr, jstring val) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr val_conv = java_to_owned_str(env, val);
	Record_set_args(&this_ptr_conv, val_conv);
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_Record_1get_1module_1path(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr ret_str = Record_get_module_path(&this_ptr_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Record_1set_1module_1path(JNIEnv *env, jclass clz, int64_t this_ptr, jstring val) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr val_conv = java_to_owned_str(env, val);
	Record_set_module_path(&this_ptr_conv, val_conv);
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_Record_1get_1file(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr ret_str = Record_get_file(&this_ptr_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Record_1set_1file(JNIEnv *env, jclass clz, int64_t this_ptr, jstring val) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr val_conv = java_to_owned_str(env, val);
	Record_set_file(&this_ptr_conv, val_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_Record_1get_1line(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = Record_get_line(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Record_1set_1line(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKRecord this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	Record_set_line(&this_ptr_conv, val);
}

static inline uintptr_t Record_clone_ptr(LDKRecord *NONNULL_PTR arg) {
	LDKRecord ret_var = Record_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Record_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRecord arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Record_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Record_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRecord orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRecord ret_var = Record_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Logger_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKLogger this_ptr_conv = *(LDKLogger*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Logger_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelHandshakeConfig this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelHandshakeConfig_free(this_obj_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1get_1minimum_1depth(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = ChannelHandshakeConfig_get_minimum_depth(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1set_1minimum_1depth(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKChannelHandshakeConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeConfig_set_minimum_depth(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1get_1our_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = ChannelHandshakeConfig_get_our_to_self_delay(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1set_1our_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKChannelHandshakeConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeConfig_set_our_to_self_delay(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1get_1our_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelHandshakeConfig_get_our_htlc_minimum_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1set_1our_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelHandshakeConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeConfig_set_our_htlc_minimum_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1new(JNIEnv *env, jclass clz, int32_t minimum_depth_arg, int16_t our_to_self_delay_arg, int64_t our_htlc_minimum_msat_arg) {
	LDKChannelHandshakeConfig ret_var = ChannelHandshakeConfig_new(minimum_depth_arg, our_to_self_delay_arg, our_htlc_minimum_msat_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelHandshakeConfig_clone_ptr(LDKChannelHandshakeConfig *NONNULL_PTR arg) {
	LDKChannelHandshakeConfig ret_var = ChannelHandshakeConfig_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelHandshakeConfig arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelHandshakeConfig_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelHandshakeConfig orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelHandshakeConfig ret_var = ChannelHandshakeConfig_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeConfig_1default(JNIEnv *env, jclass clz) {
	LDKChannelHandshakeConfig ret_var = ChannelHandshakeConfig_default();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelHandshakeLimits this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelHandshakeLimits_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1min_1funding_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelHandshakeLimits_get_min_funding_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1min_1funding_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_min_funding_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1max_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelHandshakeLimits_get_max_htlc_minimum_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1max_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_max_htlc_minimum_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1min_1max_1htlc_1value_1in_1flight_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1min_1max_1htlc_1value_1in_1flight_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1max_1channel_1reserve_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelHandshakeLimits_get_max_channel_reserve_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1max_1channel_1reserve_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_max_channel_reserve_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1min_1max_1accepted_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = ChannelHandshakeLimits_get_min_max_accepted_htlcs(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1min_1max_1accepted_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_min_max_accepted_htlcs(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1max_1minimum_1depth(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = ChannelHandshakeLimits_get_max_minimum_depth(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1max_1minimum_1depth(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_max_minimum_depth(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1force_1announced_1channel_1preference(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelHandshakeLimits_get_force_announced_channel_preference(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1force_1announced_1channel_1preference(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_force_announced_channel_preference(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1get_1their_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = ChannelHandshakeLimits_get_their_to_self_delay(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1set_1their_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKChannelHandshakeLimits this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelHandshakeLimits_set_their_to_self_delay(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1new(JNIEnv *env, jclass clz, int64_t min_funding_satoshis_arg, int64_t max_htlc_minimum_msat_arg, int64_t min_max_htlc_value_in_flight_msat_arg, int64_t max_channel_reserve_satoshis_arg, int16_t min_max_accepted_htlcs_arg, int32_t max_minimum_depth_arg, jboolean force_announced_channel_preference_arg, int16_t their_to_self_delay_arg) {
	LDKChannelHandshakeLimits ret_var = ChannelHandshakeLimits_new(min_funding_satoshis_arg, max_htlc_minimum_msat_arg, min_max_htlc_value_in_flight_msat_arg, max_channel_reserve_satoshis_arg, min_max_accepted_htlcs_arg, max_minimum_depth_arg, force_announced_channel_preference_arg, their_to_self_delay_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelHandshakeLimits_clone_ptr(LDKChannelHandshakeLimits *NONNULL_PTR arg) {
	LDKChannelHandshakeLimits ret_var = ChannelHandshakeLimits_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelHandshakeLimits arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelHandshakeLimits_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelHandshakeLimits orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelHandshakeLimits ret_var = ChannelHandshakeLimits_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelHandshakeLimits_1default(JNIEnv *env, jclass clz) {
	LDKChannelHandshakeLimits ret_var = ChannelHandshakeLimits_default();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelConfig this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelConfig_free(this_obj_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1get_1forwarding_1fee_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = ChannelConfig_get_forwarding_fee_proportional_millionths(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1set_1forwarding_1fee_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelConfig_set_forwarding_fee_proportional_millionths(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1get_1forwarding_1fee_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = ChannelConfig_get_forwarding_fee_base_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1set_1forwarding_1fee_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelConfig_set_forwarding_fee_base_msat(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1get_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = ChannelConfig_get_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1set_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelConfig_set_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1get_1announced_1channel(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelConfig_get_announced_channel(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1set_1announced_1channel(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelConfig_set_announced_channel(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1get_1commit_1upfront_1shutdown_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelConfig_get_commit_upfront_shutdown_pubkey(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1set_1commit_1upfront_1shutdown_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelConfig_set_commit_upfront_shutdown_pubkey(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1get_1max_1dust_1htlc_1exposure_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelConfig_get_max_dust_htlc_exposure_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1set_1max_1dust_1htlc_1exposure_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelConfig_set_max_dust_htlc_exposure_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1get_1force_1close_1avoidance_1max_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelConfig_get_force_close_avoidance_max_fee_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1set_1force_1close_1avoidance_1max_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelConfig_set_force_close_avoidance_max_fee_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1new(JNIEnv *env, jclass clz, int32_t forwarding_fee_proportional_millionths_arg, int32_t forwarding_fee_base_msat_arg, int16_t cltv_expiry_delta_arg, jboolean announced_channel_arg, jboolean commit_upfront_shutdown_pubkey_arg, int64_t max_dust_htlc_exposure_msat_arg, int64_t force_close_avoidance_max_fee_satoshis_arg) {
	LDKChannelConfig ret_var = ChannelConfig_new(forwarding_fee_proportional_millionths_arg, forwarding_fee_base_msat_arg, cltv_expiry_delta_arg, announced_channel_arg, commit_upfront_shutdown_pubkey_arg, max_dust_htlc_exposure_msat_arg, force_close_avoidance_max_fee_satoshis_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelConfig_clone_ptr(LDKChannelConfig *NONNULL_PTR arg) {
	LDKChannelConfig ret_var = ChannelConfig_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelConfig arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelConfig_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelConfig orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelConfig ret_var = ChannelConfig_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1default(JNIEnv *env, jclass clz) {
	LDKChannelConfig ret_var = ChannelConfig_default();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelConfig obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelConfig_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelConfig_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelConfigDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelConfigDecodeErrorZ), "LDKCResult_ChannelConfigDecodeErrorZ");
	*ret_conv = ChannelConfig_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UserConfig_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUserConfig this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UserConfig_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UserConfig_1get_1own_1channel_1config(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelHandshakeConfig ret_var = UserConfig_get_own_channel_config(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UserConfig_1set_1own_1channel_1config(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelHandshakeConfig val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelHandshakeConfig_clone(&val_conv);
	UserConfig_set_own_channel_config(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UserConfig_1get_1peer_1channel_1config_1limits(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelHandshakeLimits ret_var = UserConfig_get_peer_channel_config_limits(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UserConfig_1set_1peer_1channel_1config_1limits(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelHandshakeLimits val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelHandshakeLimits_clone(&val_conv);
	UserConfig_set_peer_channel_config_limits(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UserConfig_1get_1channel_1options(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelConfig ret_var = UserConfig_get_channel_options(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UserConfig_1set_1channel_1options(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelConfig val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelConfig_clone(&val_conv);
	UserConfig_set_channel_options(&this_ptr_conv, val_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_UserConfig_1get_1accept_1forwards_1to_1priv_1channels(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = UserConfig_get_accept_forwards_to_priv_channels(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UserConfig_1set_1accept_1forwards_1to_1priv_1channels(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UserConfig_set_accept_forwards_to_priv_channels(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_UserConfig_1get_1accept_1inbound_1channels(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = UserConfig_get_accept_inbound_channels(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UserConfig_1set_1accept_1inbound_1channels(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UserConfig_set_accept_inbound_channels(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_UserConfig_1get_1manually_1accept_1inbound_1channels(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = UserConfig_get_manually_accept_inbound_channels(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UserConfig_1set_1manually_1accept_1inbound_1channels(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKUserConfig this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UserConfig_set_manually_accept_inbound_channels(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UserConfig_1new(JNIEnv *env, jclass clz, int64_t own_channel_config_arg, int64_t peer_channel_config_limits_arg, int64_t channel_options_arg, jboolean accept_forwards_to_priv_channels_arg, jboolean accept_inbound_channels_arg, jboolean manually_accept_inbound_channels_arg) {
	LDKChannelHandshakeConfig own_channel_config_arg_conv;
	own_channel_config_arg_conv.inner = (void*)(own_channel_config_arg & (~1));
	own_channel_config_arg_conv.is_owned = (own_channel_config_arg & 1) || (own_channel_config_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(own_channel_config_arg_conv);
	own_channel_config_arg_conv = ChannelHandshakeConfig_clone(&own_channel_config_arg_conv);
	LDKChannelHandshakeLimits peer_channel_config_limits_arg_conv;
	peer_channel_config_limits_arg_conv.inner = (void*)(peer_channel_config_limits_arg & (~1));
	peer_channel_config_limits_arg_conv.is_owned = (peer_channel_config_limits_arg & 1) || (peer_channel_config_limits_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(peer_channel_config_limits_arg_conv);
	peer_channel_config_limits_arg_conv = ChannelHandshakeLimits_clone(&peer_channel_config_limits_arg_conv);
	LDKChannelConfig channel_options_arg_conv;
	channel_options_arg_conv.inner = (void*)(channel_options_arg & (~1));
	channel_options_arg_conv.is_owned = (channel_options_arg & 1) || (channel_options_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_options_arg_conv);
	channel_options_arg_conv = ChannelConfig_clone(&channel_options_arg_conv);
	LDKUserConfig ret_var = UserConfig_new(own_channel_config_arg_conv, peer_channel_config_limits_arg_conv, channel_options_arg_conv, accept_forwards_to_priv_channels_arg, accept_inbound_channels_arg, manually_accept_inbound_channels_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t UserConfig_clone_ptr(LDKUserConfig *NONNULL_PTR arg) {
	LDKUserConfig ret_var = UserConfig_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UserConfig_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUserConfig arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UserConfig_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UserConfig_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUserConfig orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUserConfig ret_var = UserConfig_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UserConfig_1default(JNIEnv *env, jclass clz) {
	LDKUserConfig ret_var = UserConfig_default();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BestBlock_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKBestBlock this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	BestBlock_free(this_obj_conv);
}

static inline uintptr_t BestBlock_clone_ptr(LDKBestBlock *NONNULL_PTR arg) {
	LDKBestBlock ret_var = BestBlock_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BestBlock_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKBestBlock arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = BestBlock_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BestBlock_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKBestBlock orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKBestBlock ret_var = BestBlock_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BestBlock_1from_1genesis(JNIEnv *env, jclass clz, jclass network) {
	LDKNetwork network_conv = LDKNetwork_from_java(env, network);
	LDKBestBlock ret_var = BestBlock_from_genesis(network_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BestBlock_1new(JNIEnv *env, jclass clz, int8_tArray block_hash, int32_t height) {
	LDKThirtyTwoBytes block_hash_ref;
	CHECK((*env)->GetArrayLength(env, block_hash) == 32);
	(*env)->GetByteArrayRegion(env, block_hash, 0, 32, block_hash_ref.data);
	LDKBestBlock ret_var = BestBlock_new(block_hash_ref, height);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BestBlock_1block_1hash(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKBestBlock this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, BestBlock_block_hash(&this_arg_conv).data);
	return ret_arr;
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_BestBlock_1height(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKBestBlock this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int32_t ret_val = BestBlock_height(&this_arg_conv);
	return ret_val;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_AccessError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKAccessError* orig_conv = (LDKAccessError*)(orig & ~1);
	jclass ret_conv = LDKAccessError_to_java(env, AccessError_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_AccessError_1unknown_1chain(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKAccessError_to_java(env, AccessError_unknown_chain());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_AccessError_1unknown_1tx(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKAccessError_to_java(env, AccessError_unknown_tx());
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Access_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKAccess this_ptr_conv = *(LDKAccess*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Access_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Listen_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKListen this_ptr_conv = *(LDKListen*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Listen_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Confirm_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKConfirm this_ptr_conv = *(LDKConfirm*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Confirm_free(this_ptr_conv);
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdateErr_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelMonitorUpdateErr* orig_conv = (LDKChannelMonitorUpdateErr*)(orig & ~1);
	jclass ret_conv = LDKChannelMonitorUpdateErr_to_java(env, ChannelMonitorUpdateErr_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdateErr_1temporary_1failure(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKChannelMonitorUpdateErr_to_java(env, ChannelMonitorUpdateErr_temporary_failure());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdateErr_1permanent_1failure(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKChannelMonitorUpdateErr_to_java(env, ChannelMonitorUpdateErr_permanent_failure());
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Watch_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKWatch this_ptr_conv = *(LDKWatch*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Watch_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Filter_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKFilter this_ptr_conv = *(LDKFilter*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Filter_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKWatchedOutput this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	WatchedOutput_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1get_1block_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKWatchedOutput this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, WatchedOutput_get_block_hash(&this_ptr_conv).data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1set_1block_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKWatchedOutput this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	WatchedOutput_set_block_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1get_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKWatchedOutput this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint ret_var = WatchedOutput_get_outpoint(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1set_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKWatchedOutput this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = OutPoint_clone(&val_conv);
	WatchedOutput_set_outpoint(&this_ptr_conv, val_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1get_1script_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKWatchedOutput this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKu8slice ret_var = WatchedOutput_get_script_pubkey(&this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1set_1script_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKWatchedOutput this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_u8Z val_ref;
	val_ref.datalen = (*env)->GetArrayLength(env, val);
	val_ref.data = MALLOC(val_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, val, 0, val_ref.datalen, val_ref.data);
	WatchedOutput_set_script_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1new(JNIEnv *env, jclass clz, int8_tArray block_hash_arg, int64_t outpoint_arg, int8_tArray script_pubkey_arg) {
	LDKThirtyTwoBytes block_hash_arg_ref;
	CHECK((*env)->GetArrayLength(env, block_hash_arg) == 32);
	(*env)->GetByteArrayRegion(env, block_hash_arg, 0, 32, block_hash_arg_ref.data);
	LDKOutPoint outpoint_arg_conv;
	outpoint_arg_conv.inner = (void*)(outpoint_arg & (~1));
	outpoint_arg_conv.is_owned = (outpoint_arg & 1) || (outpoint_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(outpoint_arg_conv);
	outpoint_arg_conv = OutPoint_clone(&outpoint_arg_conv);
	LDKCVec_u8Z script_pubkey_arg_ref;
	script_pubkey_arg_ref.datalen = (*env)->GetArrayLength(env, script_pubkey_arg);
	script_pubkey_arg_ref.data = MALLOC(script_pubkey_arg_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, script_pubkey_arg, 0, script_pubkey_arg_ref.datalen, script_pubkey_arg_ref.data);
	LDKWatchedOutput ret_var = WatchedOutput_new(block_hash_arg_ref, outpoint_arg_conv, script_pubkey_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t WatchedOutput_clone_ptr(LDKWatchedOutput *NONNULL_PTR arg) {
	LDKWatchedOutput ret_var = WatchedOutput_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKWatchedOutput arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = WatchedOutput_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKWatchedOutput orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKWatchedOutput ret_var = WatchedOutput_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WatchedOutput_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKWatchedOutput o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = WatchedOutput_hash(&o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BroadcasterInterface_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKBroadcasterInterface this_ptr_conv = *(LDKBroadcasterInterface*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	BroadcasterInterface_free(this_ptr_conv);
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ConfirmationTarget_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKConfirmationTarget* orig_conv = (LDKConfirmationTarget*)(orig & ~1);
	jclass ret_conv = LDKConfirmationTarget_to_java(env, ConfirmationTarget_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ConfirmationTarget_1background(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKConfirmationTarget_to_java(env, ConfirmationTarget_background());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ConfirmationTarget_1normal(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKConfirmationTarget_to_java(env, ConfirmationTarget_normal());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ConfirmationTarget_1high_1priority(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKConfirmationTarget_to_java(env, ConfirmationTarget_high_priority());
	return ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ConfirmationTarget_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKConfirmationTarget* a_conv = (LDKConfirmationTarget*)(a & ~1);
	LDKConfirmationTarget* b_conv = (LDKConfirmationTarget*)(b & ~1);
	jboolean ret_val = ConfirmationTarget_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FeeEstimator_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKFeeEstimator this_ptr_conv = *(LDKFeeEstimator*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	FeeEstimator_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MonitorUpdateId_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKMonitorUpdateId this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	MonitorUpdateId_free(this_obj_conv);
}

static inline uintptr_t MonitorUpdateId_clone_ptr(LDKMonitorUpdateId *NONNULL_PTR arg) {
	LDKMonitorUpdateId ret_var = MonitorUpdateId_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorUpdateId_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKMonitorUpdateId arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = MonitorUpdateId_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorUpdateId_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKMonitorUpdateId orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKMonitorUpdateId ret_var = MonitorUpdateId_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorUpdateId_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKMonitorUpdateId o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = MonitorUpdateId_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_MonitorUpdateId_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKMonitorUpdateId a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKMonitorUpdateId b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = MonitorUpdateId_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Persist_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKPersist this_ptr_conv = *(LDKPersist*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Persist_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_LockedChannelMonitor_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKLockedChannelMonitor this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	LockedChannelMonitor_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChainMonitor this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChainMonitor_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1new(JNIEnv *env, jclass clz, int64_t chain_source, int64_t broadcaster, int64_t logger, int64_t feeest, int64_t persister) {
	void* chain_source_ptr = (void*)(((uintptr_t)chain_source) & ~1);
	CHECK_ACCESS(chain_source_ptr);
	LDKCOption_FilterZ chain_source_conv = *(LDKCOption_FilterZ*)(chain_source_ptr);
	// WARNING: we may need a move here but no clone is available for LDKCOption_FilterZ
	if (chain_source_conv.tag == LDKCOption_FilterZ_Some) {
		// Manually implement clone for Java trait instances
		if (chain_source_conv.some.free == LDKFilter_JCalls_free) {
			// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
			LDKFilter_JCalls_cloned(&chain_source_conv.some);
		}
	}
	void* broadcaster_ptr = (void*)(((uintptr_t)broadcaster) & ~1);
	CHECK_ACCESS(broadcaster_ptr);
	LDKBroadcasterInterface broadcaster_conv = *(LDKBroadcasterInterface*)(broadcaster_ptr);
	if (broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&broadcaster_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	void* feeest_ptr = (void*)(((uintptr_t)feeest) & ~1);
	CHECK_ACCESS(feeest_ptr);
	LDKFeeEstimator feeest_conv = *(LDKFeeEstimator*)(feeest_ptr);
	if (feeest_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&feeest_conv);
	}
	void* persister_ptr = (void*)(((uintptr_t)persister) & ~1);
	CHECK_ACCESS(persister_ptr);
	LDKPersist persister_conv = *(LDKPersist*)(persister_ptr);
	if (persister_conv.free == LDKPersist_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKPersist_JCalls_cloned(&persister_conv);
	}
	LDKChainMonitor ret_var = ChainMonitor_new(chain_source_conv, broadcaster_conv, logger_conv, feeest_conv, persister_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1get_1claimable_1balances(JNIEnv *env, jclass clz, int64_t this_arg, int64_tArray ignored_channels) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_ChannelDetailsZ ignored_channels_constr;
	ignored_channels_constr.datalen = (*env)->GetArrayLength(env, ignored_channels);
	if (ignored_channels_constr.datalen > 0)
		ignored_channels_constr.data = MALLOC(ignored_channels_constr.datalen * sizeof(LDKChannelDetails), "LDKCVec_ChannelDetailsZ Elements");
	else
		ignored_channels_constr.data = NULL;
	int64_t* ignored_channels_vals = (*env)->GetLongArrayElements (env, ignored_channels, NULL);
	for (size_t q = 0; q < ignored_channels_constr.datalen; q++) {
		int64_t ignored_channels_conv_16 = ignored_channels_vals[q];
		LDKChannelDetails ignored_channels_conv_16_conv;
		ignored_channels_conv_16_conv.inner = (void*)(ignored_channels_conv_16 & (~1));
		ignored_channels_conv_16_conv.is_owned = (ignored_channels_conv_16 & 1) || (ignored_channels_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ignored_channels_conv_16_conv);
		ignored_channels_conv_16_conv = ChannelDetails_clone(&ignored_channels_conv_16_conv);
		ignored_channels_constr.data[q] = ignored_channels_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, ignored_channels, ignored_channels_vals, 0);
	LDKCVec_BalanceZ ret_var = ChainMonitor_get_claimable_balances(&this_arg_conv, ignored_channels_constr);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t j = 0; j < ret_var.datalen; j++) {
		LDKBalance *ret_conv_9_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
		*ret_conv_9_copy = ret_var.data[j];
		uintptr_t ret_conv_9_ref = (uintptr_t)ret_conv_9_copy;
		ret_arr_ptr[j] = ret_conv_9_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1get_1monitor(JNIEnv *env, jclass clz, int64_t this_arg, int64_t funding_txo) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKOutPoint funding_txo_conv;
	funding_txo_conv.inner = (void*)(funding_txo & (~1));
	funding_txo_conv.is_owned = (funding_txo & 1) || (funding_txo == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_conv);
	funding_txo_conv = OutPoint_clone(&funding_txo_conv);
	LDKCResult_LockedChannelMonitorNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_LockedChannelMonitorNoneZ), "LDKCResult_LockedChannelMonitorNoneZ");
	*ret_conv = ChainMonitor_get_monitor(&this_arg_conv, funding_txo_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1list_1monitors(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_OutPointZ ret_var = ChainMonitor_list_monitors(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t k = 0; k < ret_var.datalen; k++) {
		LDKOutPoint ret_conv_10_var = ret_var.data[k];
		uintptr_t ret_conv_10_ref = 0;
		CHECK((((uintptr_t)ret_conv_10_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_10_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_10_var);
		ret_conv_10_ref = (uintptr_t)ret_conv_10_var.inner;
		if (ret_conv_10_var.is_owned) {
			ret_conv_10_ref |= 1;
		}
		ret_arr_ptr[k] = ret_conv_10_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1channel_1monitor_1updated(JNIEnv *env, jclass clz, int64_t this_arg, int64_t funding_txo, int64_t completed_update_id) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKOutPoint funding_txo_conv;
	funding_txo_conv.inner = (void*)(funding_txo & (~1));
	funding_txo_conv.is_owned = (funding_txo & 1) || (funding_txo == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_conv);
	funding_txo_conv = OutPoint_clone(&funding_txo_conv);
	LDKMonitorUpdateId completed_update_id_conv;
	completed_update_id_conv.inner = (void*)(completed_update_id & (~1));
	completed_update_id_conv.is_owned = (completed_update_id & 1) || (completed_update_id == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(completed_update_id_conv);
	completed_update_id_conv = MonitorUpdateId_clone(&completed_update_id_conv);
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = ChainMonitor_channel_monitor_updated(&this_arg_conv, funding_txo_conv, completed_update_id_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1as_1Listen(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKListen* ret_ret = MALLOC(sizeof(LDKListen), "LDKListen");
	*ret_ret = ChainMonitor_as_Listen(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1as_1Confirm(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKConfirm* ret_ret = MALLOC(sizeof(LDKConfirm), "LDKConfirm");
	*ret_ret = ChainMonitor_as_Confirm(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1as_1Watch(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKWatch* ret_ret = MALLOC(sizeof(LDKWatch), "LDKWatch");
	*ret_ret = ChainMonitor_as_Watch(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainMonitor_1as_1EventsProvider(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChainMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKEventsProvider* ret_ret = MALLOC(sizeof(LDKEventsProvider), "LDKEventsProvider");
	*ret_ret = ChainMonitor_as_EventsProvider(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdate_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelMonitorUpdate this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelMonitorUpdate_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdate_1get_1update_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelMonitorUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelMonitorUpdate_get_update_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdate_1set_1update_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelMonitorUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelMonitorUpdate_set_update_id(&this_ptr_conv, val);
}

static inline uintptr_t ChannelMonitorUpdate_clone_ptr(LDKChannelMonitorUpdate *NONNULL_PTR arg) {
	LDKChannelMonitorUpdate ret_var = ChannelMonitorUpdate_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdate_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelMonitorUpdate arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelMonitorUpdate_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdate_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelMonitorUpdate orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelMonitorUpdate ret_var = ChannelMonitorUpdate_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdate_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelMonitorUpdate obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelMonitorUpdate_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitorUpdate_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelMonitorUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelMonitorUpdateDecodeErrorZ), "LDKCResult_ChannelMonitorUpdateDecodeErrorZ");
	*ret_conv = ChannelMonitorUpdate_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKMonitorEvent this_ptr_conv = *(LDKMonitorEvent*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	MonitorEvent_free(this_ptr_conv);
}

static inline uintptr_t MonitorEvent_clone_ptr(LDKMonitorEvent *NONNULL_PTR arg) {
	LDKMonitorEvent *ret_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
	*ret_copy = MonitorEvent_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKMonitorEvent* arg_conv = (LDKMonitorEvent*)arg;
	int64_t ret_val = MonitorEvent_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKMonitorEvent* orig_conv = (LDKMonitorEvent*)orig;
	LDKMonitorEvent *ret_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
	*ret_copy = MonitorEvent_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1htlcevent(JNIEnv *env, jclass clz, int64_t a) {
	LDKHTLCUpdate a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = HTLCUpdate_clone(&a_conv);
	LDKMonitorEvent *ret_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
	*ret_copy = MonitorEvent_htlcevent(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1commitment_1tx_1confirmed(JNIEnv *env, jclass clz, int64_t a) {
	LDKOutPoint a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = OutPoint_clone(&a_conv);
	LDKMonitorEvent *ret_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
	*ret_copy = MonitorEvent_commitment_tx_confirmed(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1update_1completed(JNIEnv *env, jclass clz, int64_t funding_txo, int64_t monitor_update_id) {
	LDKOutPoint funding_txo_conv;
	funding_txo_conv.inner = (void*)(funding_txo & (~1));
	funding_txo_conv.is_owned = (funding_txo & 1) || (funding_txo == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_conv);
	funding_txo_conv = OutPoint_clone(&funding_txo_conv);
	LDKMonitorEvent *ret_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
	*ret_copy = MonitorEvent_update_completed(funding_txo_conv, monitor_update_id);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1update_1failed(JNIEnv *env, jclass clz, int64_t a) {
	LDKOutPoint a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = OutPoint_clone(&a_conv);
	LDKMonitorEvent *ret_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
	*ret_copy = MonitorEvent_update_failed(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKMonitorEvent* obj_conv = (LDKMonitorEvent*)obj;
	LDKCVec_u8Z ret_var = MonitorEvent_write(obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MonitorEvent_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_COption_MonitorEventZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_MonitorEventZDecodeErrorZ), "LDKCResult_COption_MonitorEventZDecodeErrorZ");
	*ret_conv = MonitorEvent_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HTLCUpdate_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKHTLCUpdate this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	HTLCUpdate_free(this_obj_conv);
}

static inline uintptr_t HTLCUpdate_clone_ptr(LDKHTLCUpdate *NONNULL_PTR arg) {
	LDKHTLCUpdate ret_var = HTLCUpdate_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCUpdate_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKHTLCUpdate arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = HTLCUpdate_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCUpdate_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKHTLCUpdate orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKHTLCUpdate ret_var = HTLCUpdate_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_HTLCUpdate_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKHTLCUpdate obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = HTLCUpdate_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCUpdate_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_HTLCUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCUpdateDecodeErrorZ), "LDKCResult_HTLCUpdateDecodeErrorZ");
	*ret_conv = HTLCUpdate_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Balance_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKBalance this_ptr_conv = *(LDKBalance*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Balance_free(this_ptr_conv);
}

static inline uintptr_t Balance_clone_ptr(LDKBalance *NONNULL_PTR arg) {
	LDKBalance *ret_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
	*ret_copy = Balance_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Balance_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKBalance* arg_conv = (LDKBalance*)arg;
	int64_t ret_val = Balance_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Balance_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKBalance* orig_conv = (LDKBalance*)orig;
	LDKBalance *ret_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
	*ret_copy = Balance_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Balance_1claimable_1on_1channel_1close(JNIEnv *env, jclass clz, int64_t claimable_amount_satoshis) {
	LDKBalance *ret_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
	*ret_copy = Balance_claimable_on_channel_close(claimable_amount_satoshis);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Balance_1claimable_1awaiting_1confirmations(JNIEnv *env, jclass clz, int64_t claimable_amount_satoshis, int32_t confirmation_height) {
	LDKBalance *ret_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
	*ret_copy = Balance_claimable_awaiting_confirmations(claimable_amount_satoshis, confirmation_height);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Balance_1contentious_1claimable(JNIEnv *env, jclass clz, int64_t claimable_amount_satoshis, int32_t timeout_height) {
	LDKBalance *ret_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
	*ret_copy = Balance_contentious_claimable(claimable_amount_satoshis, timeout_height);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Balance_1maybe_1claimable_1htlcawaiting_1timeout(JNIEnv *env, jclass clz, int64_t claimable_amount_satoshis, int32_t claimable_height) {
	LDKBalance *ret_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
	*ret_copy = Balance_maybe_claimable_htlcawaiting_timeout(claimable_amount_satoshis, claimable_height);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Balance_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKBalance* a_conv = (LDKBalance*)a;
	LDKBalance* b_conv = (LDKBalance*)b;
	jboolean ret_val = Balance_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelMonitor this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelMonitor_free(this_obj_conv);
}

static inline uintptr_t ChannelMonitor_clone_ptr(LDKChannelMonitor *NONNULL_PTR arg) {
	LDKChannelMonitor ret_var = ChannelMonitor_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelMonitor arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelMonitor_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelMonitor orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelMonitor ret_var = ChannelMonitor_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelMonitor obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelMonitor_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1update_1monitor(JNIEnv *env, jclass clz, int64_t this_arg, int64_t updates, int64_t broadcaster, int64_t fee_estimator, int64_t logger) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelMonitorUpdate updates_conv;
	updates_conv.inner = (void*)(updates & (~1));
	updates_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(updates_conv);
	void* broadcaster_ptr = (void*)(((uintptr_t)broadcaster) & ~1);
	if (!(broadcaster & 1)) { CHECK_ACCESS(broadcaster_ptr); }
	LDKBroadcasterInterface* broadcaster_conv = (LDKBroadcasterInterface*)broadcaster_ptr;
	void* fee_estimator_ptr = (void*)(((uintptr_t)fee_estimator) & ~1);
	if (!(fee_estimator & 1)) { CHECK_ACCESS(fee_estimator_ptr); }
	LDKFeeEstimator* fee_estimator_conv = (LDKFeeEstimator*)fee_estimator_ptr;
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	if (!(logger & 1)) { CHECK_ACCESS(logger_ptr); }
	LDKLogger* logger_conv = (LDKLogger*)logger_ptr;
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = ChannelMonitor_update_monitor(&this_arg_conv, &updates_conv, broadcaster_conv, fee_estimator_conv, logger_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1latest_1update_1id(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = ChannelMonitor_get_latest_update_id(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1funding_1txo(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKC2Tuple_OutPointScriptZ* ret_conv = MALLOC(sizeof(LDKC2Tuple_OutPointScriptZ), "LDKC2Tuple_OutPointScriptZ");
	*ret_conv = ChannelMonitor_get_funding_txo(&this_arg_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1outputs_1to_1watch(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ ret_var = ChannelMonitor_get_outputs_to_watch(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t o = 0; o < ret_var.datalen; o++) {
		LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ* ret_conv_40_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ");
		*ret_conv_40_conv = ret_var.data[o];
		ret_arr_ptr[o] = ((uintptr_t)ret_conv_40_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1load_1outputs_1to_1watch(JNIEnv *env, jclass clz, int64_t this_arg, int64_t filter) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* filter_ptr = (void*)(((uintptr_t)filter) & ~1);
	if (!(filter & 1)) { CHECK_ACCESS(filter_ptr); }
	LDKFilter* filter_conv = (LDKFilter*)filter_ptr;
	ChannelMonitor_load_outputs_to_watch(&this_arg_conv, filter_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1and_1clear_1pending_1monitor_1events(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_MonitorEventZ ret_var = ChannelMonitor_get_and_clear_pending_monitor_events(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t o = 0; o < ret_var.datalen; o++) {
		LDKMonitorEvent *ret_conv_14_copy = MALLOC(sizeof(LDKMonitorEvent), "LDKMonitorEvent");
		*ret_conv_14_copy = ret_var.data[o];
		uintptr_t ret_conv_14_ref = (uintptr_t)ret_conv_14_copy;
		ret_arr_ptr[o] = ret_conv_14_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1and_1clear_1pending_1events(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_EventZ ret_var = ChannelMonitor_get_and_clear_pending_events(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t h = 0; h < ret_var.datalen; h++) {
		LDKEvent *ret_conv_7_copy = MALLOC(sizeof(LDKEvent), "LDKEvent");
		*ret_conv_7_copy = ret_var.data[h];
		uintptr_t ret_conv_7_ref = (uintptr_t)ret_conv_7_copy;
		ret_arr_ptr[h] = ret_conv_7_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1latest_1holder_1commitment_1txn(JNIEnv *env, jclass clz, int64_t this_arg, int64_t logger) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	if (!(logger & 1)) { CHECK_ACCESS(logger_ptr); }
	LDKLogger* logger_conv = (LDKLogger*)logger_ptr;
	LDKCVec_TransactionZ ret_var = ChannelMonitor_get_latest_holder_commitment_txn(&this_arg_conv, logger_conv);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < ret_var.datalen; i++) {
		LDKTransaction ret_conv_8_var = ret_var.data[i];
		int8_tArray ret_conv_8_arr = (*env)->NewByteArray(env, ret_conv_8_var.datalen);
		(*env)->SetByteArrayRegion(env, ret_conv_8_arr, 0, ret_conv_8_var.datalen, ret_conv_8_var.data);
		Transaction_free(ret_conv_8_var);
		(*env)->SetObjectArrayElement(env, ret_arr, i, ret_conv_8_arr);
	}
	
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1block_1connected(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray header, int64_tArray txdata, int32_t height, int64_t broadcaster, int64_t fee_estimator, int64_t logger) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char header_arr[80];
	CHECK((*env)->GetArrayLength(env, header) == 80);
	(*env)->GetByteArrayRegion(env, header, 0, 80, header_arr);
	unsigned char (*header_ref)[80] = &header_arr;
	LDKCVec_C2Tuple_usizeTransactionZZ txdata_constr;
	txdata_constr.datalen = (*env)->GetArrayLength(env, txdata);
	if (txdata_constr.datalen > 0)
		txdata_constr.data = MALLOC(txdata_constr.datalen * sizeof(LDKC2Tuple_usizeTransactionZ), "LDKCVec_C2Tuple_usizeTransactionZZ Elements");
	else
		txdata_constr.data = NULL;
	int64_t* txdata_vals = (*env)->GetLongArrayElements (env, txdata, NULL);
	for (size_t c = 0; c < txdata_constr.datalen; c++) {
		int64_t txdata_conv_28 = txdata_vals[c];
		void* txdata_conv_28_ptr = (void*)(((uintptr_t)txdata_conv_28) & ~1);
		CHECK_ACCESS(txdata_conv_28_ptr);
		LDKC2Tuple_usizeTransactionZ txdata_conv_28_conv = *(LDKC2Tuple_usizeTransactionZ*)(txdata_conv_28_ptr);
		txdata_conv_28_conv = C2Tuple_usizeTransactionZ_clone((LDKC2Tuple_usizeTransactionZ*)(((uintptr_t)txdata_conv_28) & ~1));
		txdata_constr.data[c] = txdata_conv_28_conv;
	}
	(*env)->ReleaseLongArrayElements(env, txdata, txdata_vals, 0);
	void* broadcaster_ptr = (void*)(((uintptr_t)broadcaster) & ~1);
	CHECK_ACCESS(broadcaster_ptr);
	LDKBroadcasterInterface broadcaster_conv = *(LDKBroadcasterInterface*)(broadcaster_ptr);
	if (broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&broadcaster_conv);
	}
	void* fee_estimator_ptr = (void*)(((uintptr_t)fee_estimator) & ~1);
	CHECK_ACCESS(fee_estimator_ptr);
	LDKFeeEstimator fee_estimator_conv = *(LDKFeeEstimator*)(fee_estimator_ptr);
	if (fee_estimator_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&fee_estimator_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ ret_var = ChannelMonitor_block_connected(&this_arg_conv, header_ref, txdata_constr, height, broadcaster_conv, fee_estimator_conv, logger_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t n = 0; n < ret_var.datalen; n++) {
		LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* ret_conv_39_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ");
		*ret_conv_39_conv = ret_var.data[n];
		ret_arr_ptr[n] = ((uintptr_t)ret_conv_39_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1block_1disconnected(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray header, int32_t height, int64_t broadcaster, int64_t fee_estimator, int64_t logger) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char header_arr[80];
	CHECK((*env)->GetArrayLength(env, header) == 80);
	(*env)->GetByteArrayRegion(env, header, 0, 80, header_arr);
	unsigned char (*header_ref)[80] = &header_arr;
	void* broadcaster_ptr = (void*)(((uintptr_t)broadcaster) & ~1);
	CHECK_ACCESS(broadcaster_ptr);
	LDKBroadcasterInterface broadcaster_conv = *(LDKBroadcasterInterface*)(broadcaster_ptr);
	if (broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&broadcaster_conv);
	}
	void* fee_estimator_ptr = (void*)(((uintptr_t)fee_estimator) & ~1);
	CHECK_ACCESS(fee_estimator_ptr);
	LDKFeeEstimator fee_estimator_conv = *(LDKFeeEstimator*)(fee_estimator_ptr);
	if (fee_estimator_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&fee_estimator_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	ChannelMonitor_block_disconnected(&this_arg_conv, header_ref, height, broadcaster_conv, fee_estimator_conv, logger_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1transactions_1confirmed(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray header, int64_tArray txdata, int32_t height, int64_t broadcaster, int64_t fee_estimator, int64_t logger) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char header_arr[80];
	CHECK((*env)->GetArrayLength(env, header) == 80);
	(*env)->GetByteArrayRegion(env, header, 0, 80, header_arr);
	unsigned char (*header_ref)[80] = &header_arr;
	LDKCVec_C2Tuple_usizeTransactionZZ txdata_constr;
	txdata_constr.datalen = (*env)->GetArrayLength(env, txdata);
	if (txdata_constr.datalen > 0)
		txdata_constr.data = MALLOC(txdata_constr.datalen * sizeof(LDKC2Tuple_usizeTransactionZ), "LDKCVec_C2Tuple_usizeTransactionZZ Elements");
	else
		txdata_constr.data = NULL;
	int64_t* txdata_vals = (*env)->GetLongArrayElements (env, txdata, NULL);
	for (size_t c = 0; c < txdata_constr.datalen; c++) {
		int64_t txdata_conv_28 = txdata_vals[c];
		void* txdata_conv_28_ptr = (void*)(((uintptr_t)txdata_conv_28) & ~1);
		CHECK_ACCESS(txdata_conv_28_ptr);
		LDKC2Tuple_usizeTransactionZ txdata_conv_28_conv = *(LDKC2Tuple_usizeTransactionZ*)(txdata_conv_28_ptr);
		txdata_conv_28_conv = C2Tuple_usizeTransactionZ_clone((LDKC2Tuple_usizeTransactionZ*)(((uintptr_t)txdata_conv_28) & ~1));
		txdata_constr.data[c] = txdata_conv_28_conv;
	}
	(*env)->ReleaseLongArrayElements(env, txdata, txdata_vals, 0);
	void* broadcaster_ptr = (void*)(((uintptr_t)broadcaster) & ~1);
	CHECK_ACCESS(broadcaster_ptr);
	LDKBroadcasterInterface broadcaster_conv = *(LDKBroadcasterInterface*)(broadcaster_ptr);
	if (broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&broadcaster_conv);
	}
	void* fee_estimator_ptr = (void*)(((uintptr_t)fee_estimator) & ~1);
	CHECK_ACCESS(fee_estimator_ptr);
	LDKFeeEstimator fee_estimator_conv = *(LDKFeeEstimator*)(fee_estimator_ptr);
	if (fee_estimator_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&fee_estimator_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ ret_var = ChannelMonitor_transactions_confirmed(&this_arg_conv, header_ref, txdata_constr, height, broadcaster_conv, fee_estimator_conv, logger_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t n = 0; n < ret_var.datalen; n++) {
		LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* ret_conv_39_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ");
		*ret_conv_39_conv = ret_var.data[n];
		ret_arr_ptr[n] = ((uintptr_t)ret_conv_39_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1transaction_1unconfirmed(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray txid, int64_t broadcaster, int64_t fee_estimator, int64_t logger) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char txid_arr[32];
	CHECK((*env)->GetArrayLength(env, txid) == 32);
	(*env)->GetByteArrayRegion(env, txid, 0, 32, txid_arr);
	unsigned char (*txid_ref)[32] = &txid_arr;
	void* broadcaster_ptr = (void*)(((uintptr_t)broadcaster) & ~1);
	CHECK_ACCESS(broadcaster_ptr);
	LDKBroadcasterInterface broadcaster_conv = *(LDKBroadcasterInterface*)(broadcaster_ptr);
	if (broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&broadcaster_conv);
	}
	void* fee_estimator_ptr = (void*)(((uintptr_t)fee_estimator) & ~1);
	CHECK_ACCESS(fee_estimator_ptr);
	LDKFeeEstimator fee_estimator_conv = *(LDKFeeEstimator*)(fee_estimator_ptr);
	if (fee_estimator_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&fee_estimator_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	ChannelMonitor_transaction_unconfirmed(&this_arg_conv, txid_ref, broadcaster_conv, fee_estimator_conv, logger_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1best_1block_1updated(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray header, int32_t height, int64_t broadcaster, int64_t fee_estimator, int64_t logger) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char header_arr[80];
	CHECK((*env)->GetArrayLength(env, header) == 80);
	(*env)->GetByteArrayRegion(env, header, 0, 80, header_arr);
	unsigned char (*header_ref)[80] = &header_arr;
	void* broadcaster_ptr = (void*)(((uintptr_t)broadcaster) & ~1);
	CHECK_ACCESS(broadcaster_ptr);
	LDKBroadcasterInterface broadcaster_conv = *(LDKBroadcasterInterface*)(broadcaster_ptr);
	if (broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&broadcaster_conv);
	}
	void* fee_estimator_ptr = (void*)(((uintptr_t)fee_estimator) & ~1);
	CHECK_ACCESS(fee_estimator_ptr);
	LDKFeeEstimator fee_estimator_conv = *(LDKFeeEstimator*)(fee_estimator_ptr);
	if (fee_estimator_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&fee_estimator_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ ret_var = ChannelMonitor_best_block_updated(&this_arg_conv, header_ref, height, broadcaster_conv, fee_estimator_conv, logger_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t n = 0; n < ret_var.datalen; n++) {
		LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ* ret_conv_39_conv = MALLOC(sizeof(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ), "LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ");
		*ret_conv_39_conv = ret_var.data[n];
		ret_arr_ptr[n] = ((uintptr_t)ret_conv_39_conv);
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1relevant_1txids(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_TxidZ ret_var = ChannelMonitor_get_relevant_txids(&this_arg_conv);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < ret_var.datalen; i++) {
		int8_tArray ret_conv_8_arr = (*env)->NewByteArray(env, 32);
		(*env)->SetByteArrayRegion(env, ret_conv_8_arr, 0, 32, ret_var.data[i].data);
		(*env)->SetObjectArrayElement(env, ret_arr, i, ret_conv_8_arr);
	}
	
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1current_1best_1block(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKBestBlock ret_var = ChannelMonitor_current_best_block(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelMonitor_1get_1claimable_1balances(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelMonitor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_BalanceZ ret_var = ChannelMonitor_get_claimable_balances(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t j = 0; j < ret_var.datalen; j++) {
		LDKBalance *ret_conv_9_copy = MALLOC(sizeof(LDKBalance), "LDKBalance");
		*ret_conv_9_copy = ret_var.data[j];
		uintptr_t ret_conv_9_ref = (uintptr_t)ret_conv_9_copy;
		ret_arr_ptr[j] = ret_conv_9_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelMonitorZ_1read(JNIEnv *env, jclass clz, int8_tArray ser, int64_t arg) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	void* arg_ptr = (void*)(((uintptr_t)arg) & ~1);
	if (!(arg & 1)) { CHECK_ACCESS(arg_ptr); }
	LDKKeysInterface* arg_conv = (LDKKeysInterface*)arg_ptr;
	LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ");
	*ret_conv = C2Tuple_BlockHashChannelMonitorZ_read(ser_ref, arg_conv);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OutPoint_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKOutPoint this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	OutPoint_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OutPoint_1get_1txid(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOutPoint this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *OutPoint_get_txid(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OutPoint_1set_1txid(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOutPoint this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	OutPoint_set_txid(&this_ptr_conv, val_ref);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_OutPoint_1get_1index(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOutPoint this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = OutPoint_get_index(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OutPoint_1set_1index(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKOutPoint this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OutPoint_set_index(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OutPoint_1new(JNIEnv *env, jclass clz, int8_tArray txid_arg, int16_t index_arg) {
	LDKThirtyTwoBytes txid_arg_ref;
	CHECK((*env)->GetArrayLength(env, txid_arg) == 32);
	(*env)->GetByteArrayRegion(env, txid_arg, 0, 32, txid_arg_ref.data);
	LDKOutPoint ret_var = OutPoint_new(txid_arg_ref, index_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t OutPoint_clone_ptr(LDKOutPoint *NONNULL_PTR arg) {
	LDKOutPoint ret_var = OutPoint_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OutPoint_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKOutPoint arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = OutPoint_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OutPoint_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKOutPoint orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKOutPoint ret_var = OutPoint_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_OutPoint_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKOutPoint a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKOutPoint b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = OutPoint_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OutPoint_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKOutPoint o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = OutPoint_hash(&o_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OutPoint_1to_1channel_1id(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKOutPoint this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, OutPoint_to_channel_id(&this_arg_conv).data);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OutPoint_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKOutPoint obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = OutPoint_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OutPoint_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_OutPointDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OutPointDecodeErrorZ), "LDKCResult_OutPointDecodeErrorZ");
	*ret_conv = OutPoint_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKDelayedPaymentOutputDescriptor this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	DelayedPaymentOutputDescriptor_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1get_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint ret_var = DelayedPaymentOutputDescriptor_get_outpoint(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1set_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = OutPoint_clone(&val_conv);
	DelayedPaymentOutputDescriptor_set_outpoint(&this_ptr_conv, val_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1get_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, DelayedPaymentOutputDescriptor_get_per_commitment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1set_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	DelayedPaymentOutputDescriptor_set_per_commitment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1get_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = DelayedPaymentOutputDescriptor_get_to_self_delay(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1set_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	DelayedPaymentOutputDescriptor_set_to_self_delay(&this_ptr_conv, val);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1set_1output(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKTxOut val_conv = *(LDKTxOut*)(val_ptr);
	val_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)val) & ~1));
	DelayedPaymentOutputDescriptor_set_output(&this_ptr_conv, val_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1get_1revocation_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, DelayedPaymentOutputDescriptor_get_revocation_pubkey(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1set_1revocation_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	DelayedPaymentOutputDescriptor_set_revocation_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1get_1channel_1keys_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *DelayedPaymentOutputDescriptor_get_channel_keys_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1set_1channel_1keys_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	DelayedPaymentOutputDescriptor_set_channel_keys_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1get_1channel_1value_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = DelayedPaymentOutputDescriptor_get_channel_value_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1set_1channel_1value_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKDelayedPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	DelayedPaymentOutputDescriptor_set_channel_value_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1new(JNIEnv *env, jclass clz, int64_t outpoint_arg, int8_tArray per_commitment_point_arg, int16_t to_self_delay_arg, int64_t output_arg, int8_tArray revocation_pubkey_arg, int8_tArray channel_keys_id_arg, int64_t channel_value_satoshis_arg) {
	LDKOutPoint outpoint_arg_conv;
	outpoint_arg_conv.inner = (void*)(outpoint_arg & (~1));
	outpoint_arg_conv.is_owned = (outpoint_arg & 1) || (outpoint_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(outpoint_arg_conv);
	outpoint_arg_conv = OutPoint_clone(&outpoint_arg_conv);
	LDKPublicKey per_commitment_point_arg_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point_arg) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point_arg, 0, 33, per_commitment_point_arg_ref.compressed_form);
	void* output_arg_ptr = (void*)(((uintptr_t)output_arg) & ~1);
	CHECK_ACCESS(output_arg_ptr);
	LDKTxOut output_arg_conv = *(LDKTxOut*)(output_arg_ptr);
	output_arg_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)output_arg) & ~1));
	LDKPublicKey revocation_pubkey_arg_ref;
	CHECK((*env)->GetArrayLength(env, revocation_pubkey_arg) == 33);
	(*env)->GetByteArrayRegion(env, revocation_pubkey_arg, 0, 33, revocation_pubkey_arg_ref.compressed_form);
	LDKThirtyTwoBytes channel_keys_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_keys_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_keys_id_arg, 0, 32, channel_keys_id_arg_ref.data);
	LDKDelayedPaymentOutputDescriptor ret_var = DelayedPaymentOutputDescriptor_new(outpoint_arg_conv, per_commitment_point_arg_ref, to_self_delay_arg, output_arg_conv, revocation_pubkey_arg_ref, channel_keys_id_arg_ref, channel_value_satoshis_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t DelayedPaymentOutputDescriptor_clone_ptr(LDKDelayedPaymentOutputDescriptor *NONNULL_PTR arg) {
	LDKDelayedPaymentOutputDescriptor ret_var = DelayedPaymentOutputDescriptor_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKDelayedPaymentOutputDescriptor arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = DelayedPaymentOutputDescriptor_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKDelayedPaymentOutputDescriptor orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKDelayedPaymentOutputDescriptor ret_var = DelayedPaymentOutputDescriptor_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKDelayedPaymentOutputDescriptor obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = DelayedPaymentOutputDescriptor_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DelayedPaymentOutputDescriptor_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = DelayedPaymentOutputDescriptor_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKStaticPaymentOutputDescriptor this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	StaticPaymentOutputDescriptor_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1get_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKStaticPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint ret_var = StaticPaymentOutputDescriptor_get_outpoint(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1set_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKStaticPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = OutPoint_clone(&val_conv);
	StaticPaymentOutputDescriptor_set_outpoint(&this_ptr_conv, val_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1set_1output(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKStaticPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKTxOut val_conv = *(LDKTxOut*)(val_ptr);
	val_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)val) & ~1));
	StaticPaymentOutputDescriptor_set_output(&this_ptr_conv, val_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1get_1channel_1keys_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKStaticPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *StaticPaymentOutputDescriptor_get_channel_keys_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1set_1channel_1keys_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKStaticPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	StaticPaymentOutputDescriptor_set_channel_keys_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1get_1channel_1value_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKStaticPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = StaticPaymentOutputDescriptor_get_channel_value_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1set_1channel_1value_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKStaticPaymentOutputDescriptor this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	StaticPaymentOutputDescriptor_set_channel_value_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1new(JNIEnv *env, jclass clz, int64_t outpoint_arg, int64_t output_arg, int8_tArray channel_keys_id_arg, int64_t channel_value_satoshis_arg) {
	LDKOutPoint outpoint_arg_conv;
	outpoint_arg_conv.inner = (void*)(outpoint_arg & (~1));
	outpoint_arg_conv.is_owned = (outpoint_arg & 1) || (outpoint_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(outpoint_arg_conv);
	outpoint_arg_conv = OutPoint_clone(&outpoint_arg_conv);
	void* output_arg_ptr = (void*)(((uintptr_t)output_arg) & ~1);
	CHECK_ACCESS(output_arg_ptr);
	LDKTxOut output_arg_conv = *(LDKTxOut*)(output_arg_ptr);
	output_arg_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)output_arg) & ~1));
	LDKThirtyTwoBytes channel_keys_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_keys_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_keys_id_arg, 0, 32, channel_keys_id_arg_ref.data);
	LDKStaticPaymentOutputDescriptor ret_var = StaticPaymentOutputDescriptor_new(outpoint_arg_conv, output_arg_conv, channel_keys_id_arg_ref, channel_value_satoshis_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t StaticPaymentOutputDescriptor_clone_ptr(LDKStaticPaymentOutputDescriptor *NONNULL_PTR arg) {
	LDKStaticPaymentOutputDescriptor ret_var = StaticPaymentOutputDescriptor_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKStaticPaymentOutputDescriptor arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = StaticPaymentOutputDescriptor_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKStaticPaymentOutputDescriptor orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKStaticPaymentOutputDescriptor ret_var = StaticPaymentOutputDescriptor_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKStaticPaymentOutputDescriptor obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = StaticPaymentOutputDescriptor_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_StaticPaymentOutputDescriptor_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ), "LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ");
	*ret_conv = StaticPaymentOutputDescriptor_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKSpendableOutputDescriptor this_ptr_conv = *(LDKSpendableOutputDescriptor*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	SpendableOutputDescriptor_free(this_ptr_conv);
}

static inline uintptr_t SpendableOutputDescriptor_clone_ptr(LDKSpendableOutputDescriptor *NONNULL_PTR arg) {
	LDKSpendableOutputDescriptor *ret_copy = MALLOC(sizeof(LDKSpendableOutputDescriptor), "LDKSpendableOutputDescriptor");
	*ret_copy = SpendableOutputDescriptor_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKSpendableOutputDescriptor* arg_conv = (LDKSpendableOutputDescriptor*)arg;
	int64_t ret_val = SpendableOutputDescriptor_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKSpendableOutputDescriptor* orig_conv = (LDKSpendableOutputDescriptor*)orig;
	LDKSpendableOutputDescriptor *ret_copy = MALLOC(sizeof(LDKSpendableOutputDescriptor), "LDKSpendableOutputDescriptor");
	*ret_copy = SpendableOutputDescriptor_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1static_1output(JNIEnv *env, jclass clz, int64_t outpoint, int64_t output) {
	LDKOutPoint outpoint_conv;
	outpoint_conv.inner = (void*)(outpoint & (~1));
	outpoint_conv.is_owned = (outpoint & 1) || (outpoint == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(outpoint_conv);
	outpoint_conv = OutPoint_clone(&outpoint_conv);
	void* output_ptr = (void*)(((uintptr_t)output) & ~1);
	CHECK_ACCESS(output_ptr);
	LDKTxOut output_conv = *(LDKTxOut*)(output_ptr);
	output_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)output) & ~1));
	LDKSpendableOutputDescriptor *ret_copy = MALLOC(sizeof(LDKSpendableOutputDescriptor), "LDKSpendableOutputDescriptor");
	*ret_copy = SpendableOutputDescriptor_static_output(outpoint_conv, output_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1delayed_1payment_1output(JNIEnv *env, jclass clz, int64_t a) {
	LDKDelayedPaymentOutputDescriptor a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = DelayedPaymentOutputDescriptor_clone(&a_conv);
	LDKSpendableOutputDescriptor *ret_copy = MALLOC(sizeof(LDKSpendableOutputDescriptor), "LDKSpendableOutputDescriptor");
	*ret_copy = SpendableOutputDescriptor_delayed_payment_output(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1static_1payment_1output(JNIEnv *env, jclass clz, int64_t a) {
	LDKStaticPaymentOutputDescriptor a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = StaticPaymentOutputDescriptor_clone(&a_conv);
	LDKSpendableOutputDescriptor *ret_copy = MALLOC(sizeof(LDKSpendableOutputDescriptor), "LDKSpendableOutputDescriptor");
	*ret_copy = SpendableOutputDescriptor_static_payment_output(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKSpendableOutputDescriptor* obj_conv = (LDKSpendableOutputDescriptor*)obj;
	LDKCVec_u8Z ret_var = SpendableOutputDescriptor_write(obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SpendableOutputDescriptor_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_SpendableOutputDescriptorDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SpendableOutputDescriptorDecodeErrorZ), "LDKCResult_SpendableOutputDescriptorDecodeErrorZ");
	*ret_conv = SpendableOutputDescriptor_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BaseSign_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKBaseSign this_ptr_conv = *(LDKBaseSign*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	BaseSign_free(this_ptr_conv);
}

static inline uintptr_t Sign_clone_ptr(LDKSign *NONNULL_PTR arg) {
	LDKSign* ret_ret = MALLOC(sizeof(LDKSign), "LDKSign");
	*ret_ret = Sign_clone(arg);
	return (uintptr_t)ret_ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Sign_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	void* arg_ptr = (void*)(((uintptr_t)arg) & ~1);
	if (!(arg & 1)) { CHECK_ACCESS(arg_ptr); }
	LDKSign* arg_conv = (LDKSign*)arg_ptr;
	int64_t ret_val = Sign_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Sign_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	void* orig_ptr = (void*)(((uintptr_t)orig) & ~1);
	if (!(orig & 1)) { CHECK_ACCESS(orig_ptr); }
	LDKSign* orig_conv = (LDKSign*)orig_ptr;
	LDKSign* ret_ret = MALLOC(sizeof(LDKSign), "LDKSign");
	*ret_ret = Sign_clone(orig_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Sign_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKSign this_ptr_conv = *(LDKSign*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Sign_free(this_ptr_conv);
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Recipient_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRecipient* orig_conv = (LDKRecipient*)(orig & ~1);
	jclass ret_conv = LDKRecipient_to_java(env, Recipient_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Recipient_1node(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKRecipient_to_java(env, Recipient_node());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Recipient_1phantom_1node(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKRecipient_to_java(env, Recipient_phantom_node());
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_KeysInterface_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKKeysInterface this_ptr_conv = *(LDKKeysInterface*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	KeysInterface_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInMemorySigner this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	InMemorySigner_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1get_1funding_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *InMemorySigner_get_funding_key(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1set_1funding_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSecretKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.bytes);
	InMemorySigner_set_funding_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1get_1revocation_1base_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *InMemorySigner_get_revocation_base_key(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1set_1revocation_1base_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSecretKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.bytes);
	InMemorySigner_set_revocation_base_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1get_1payment_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *InMemorySigner_get_payment_key(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1set_1payment_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSecretKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.bytes);
	InMemorySigner_set_payment_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1get_1delayed_1payment_1base_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *InMemorySigner_get_delayed_payment_base_key(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1set_1delayed_1payment_1base_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSecretKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.bytes);
	InMemorySigner_set_delayed_payment_base_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1get_1htlc_1base_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *InMemorySigner_get_htlc_base_key(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1set_1htlc_1base_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSecretKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.bytes);
	InMemorySigner_set_htlc_base_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1get_1commitment_1seed(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *InMemorySigner_get_commitment_seed(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1set_1commitment_1seed(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKInMemorySigner this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	InMemorySigner_set_commitment_seed(&this_ptr_conv, val_ref);
}

static inline uintptr_t InMemorySigner_clone_ptr(LDKInMemorySigner *NONNULL_PTR arg) {
	LDKInMemorySigner ret_var = InMemorySigner_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKInMemorySigner arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = InMemorySigner_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKInMemorySigner orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKInMemorySigner ret_var = InMemorySigner_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1new(JNIEnv *env, jclass clz, int8_tArray node_secret, int8_tArray funding_key, int8_tArray revocation_base_key, int8_tArray payment_key, int8_tArray delayed_payment_base_key, int8_tArray htlc_base_key, int8_tArray commitment_seed, int64_t channel_value_satoshis, int8_tArray channel_keys_id) {
	LDKSecretKey node_secret_ref;
	CHECK((*env)->GetArrayLength(env, node_secret) == 32);
	(*env)->GetByteArrayRegion(env, node_secret, 0, 32, node_secret_ref.bytes);
	LDKSecretKey funding_key_ref;
	CHECK((*env)->GetArrayLength(env, funding_key) == 32);
	(*env)->GetByteArrayRegion(env, funding_key, 0, 32, funding_key_ref.bytes);
	LDKSecretKey revocation_base_key_ref;
	CHECK((*env)->GetArrayLength(env, revocation_base_key) == 32);
	(*env)->GetByteArrayRegion(env, revocation_base_key, 0, 32, revocation_base_key_ref.bytes);
	LDKSecretKey payment_key_ref;
	CHECK((*env)->GetArrayLength(env, payment_key) == 32);
	(*env)->GetByteArrayRegion(env, payment_key, 0, 32, payment_key_ref.bytes);
	LDKSecretKey delayed_payment_base_key_ref;
	CHECK((*env)->GetArrayLength(env, delayed_payment_base_key) == 32);
	(*env)->GetByteArrayRegion(env, delayed_payment_base_key, 0, 32, delayed_payment_base_key_ref.bytes);
	LDKSecretKey htlc_base_key_ref;
	CHECK((*env)->GetArrayLength(env, htlc_base_key) == 32);
	(*env)->GetByteArrayRegion(env, htlc_base_key, 0, 32, htlc_base_key_ref.bytes);
	LDKThirtyTwoBytes commitment_seed_ref;
	CHECK((*env)->GetArrayLength(env, commitment_seed) == 32);
	(*env)->GetByteArrayRegion(env, commitment_seed, 0, 32, commitment_seed_ref.data);
	LDKThirtyTwoBytes channel_keys_id_ref;
	CHECK((*env)->GetArrayLength(env, channel_keys_id) == 32);
	(*env)->GetByteArrayRegion(env, channel_keys_id, 0, 32, channel_keys_id_ref.data);
	LDKInMemorySigner ret_var = InMemorySigner_new(node_secret_ref, funding_key_ref, revocation_base_key_ref, payment_key_ref, delayed_payment_base_key_ref, htlc_base_key_ref, commitment_seed_ref, channel_value_satoshis, channel_keys_id_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1counterparty_1pubkeys(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelPublicKeys ret_var = InMemorySigner_counterparty_pubkeys(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1counterparty_1selected_1contest_1delay(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int16_t ret_val = InMemorySigner_counterparty_selected_contest_delay(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1holder_1selected_1contest_1delay(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int16_t ret_val = InMemorySigner_holder_selected_contest_delay(&this_arg_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1is_1outbound(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = InMemorySigner_is_outbound(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1funding_1outpoint(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKOutPoint ret_var = InMemorySigner_funding_outpoint(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1get_1channel_1parameters(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelTransactionParameters ret_var = InMemorySigner_get_channel_parameters(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1opt_1anchors(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = InMemorySigner_opt_anchors(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1sign_1counterparty_1payment_1input(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray spend_tx, int64_t input_idx, int64_t descriptor) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKTransaction spend_tx_ref;
	spend_tx_ref.datalen = (*env)->GetArrayLength(env, spend_tx);
	spend_tx_ref.data = MALLOC(spend_tx_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, spend_tx, 0, spend_tx_ref.datalen, spend_tx_ref.data);
	spend_tx_ref.data_is_owned = true;
	LDKStaticPaymentOutputDescriptor descriptor_conv;
	descriptor_conv.inner = (void*)(descriptor & (~1));
	descriptor_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(descriptor_conv);
	LDKCResult_CVec_CVec_u8ZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_CVec_u8ZZNoneZ), "LDKCResult_CVec_CVec_u8ZZNoneZ");
	*ret_conv = InMemorySigner_sign_counterparty_payment_input(&this_arg_conv, spend_tx_ref, input_idx, &descriptor_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1sign_1dynamic_1p2wsh_1input(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray spend_tx, int64_t input_idx, int64_t descriptor) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKTransaction spend_tx_ref;
	spend_tx_ref.datalen = (*env)->GetArrayLength(env, spend_tx);
	spend_tx_ref.data = MALLOC(spend_tx_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, spend_tx, 0, spend_tx_ref.datalen, spend_tx_ref.data);
	spend_tx_ref.data_is_owned = true;
	LDKDelayedPaymentOutputDescriptor descriptor_conv;
	descriptor_conv.inner = (void*)(descriptor & (~1));
	descriptor_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(descriptor_conv);
	LDKCResult_CVec_CVec_u8ZZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_CVec_u8ZZNoneZ), "LDKCResult_CVec_CVec_u8ZZNoneZ");
	*ret_conv = InMemorySigner_sign_dynamic_p2wsh_input(&this_arg_conv, spend_tx_ref, input_idx, &descriptor_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1as_1BaseSign(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKBaseSign* ret_ret = MALLOC(sizeof(LDKBaseSign), "LDKBaseSign");
	*ret_ret = InMemorySigner_as_BaseSign(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1as_1Sign(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInMemorySigner this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKSign* ret_ret = MALLOC(sizeof(LDKSign), "LDKSign");
	*ret_ret = InMemorySigner_as_Sign(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKInMemorySigner obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = InMemorySigner_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InMemorySigner_1read(JNIEnv *env, jclass clz, int8_tArray ser, int8_tArray arg) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKSecretKey arg_ref;
	CHECK((*env)->GetArrayLength(env, arg) == 32);
	(*env)->GetByteArrayRegion(env, arg, 0, 32, arg_ref.bytes);
	LDKCResult_InMemorySignerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InMemorySignerDecodeErrorZ), "LDKCResult_InMemorySignerDecodeErrorZ");
	*ret_conv = InMemorySigner_read(ser_ref, arg_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_KeysManager_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKKeysManager this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	KeysManager_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysManager_1new(JNIEnv *env, jclass clz, int8_tArray seed, int64_t starting_time_secs, int32_t starting_time_nanos) {
	unsigned char seed_arr[32];
	CHECK((*env)->GetArrayLength(env, seed) == 32);
	(*env)->GetByteArrayRegion(env, seed, 0, 32, seed_arr);
	unsigned char (*seed_ref)[32] = &seed_arr;
	LDKKeysManager ret_var = KeysManager_new(seed_ref, starting_time_secs, starting_time_nanos);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysManager_1derive_1channel_1keys(JNIEnv *env, jclass clz, int64_t this_arg, int64_t channel_value_satoshis, int8_tArray params) {
	LDKKeysManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char params_arr[32];
	CHECK((*env)->GetArrayLength(env, params) == 32);
	(*env)->GetByteArrayRegion(env, params, 0, 32, params_arr);
	unsigned char (*params_ref)[32] = &params_arr;
	LDKInMemorySigner ret_var = KeysManager_derive_channel_keys(&this_arg_conv, channel_value_satoshis, params_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysManager_1spend_1spendable_1outputs(JNIEnv *env, jclass clz, int64_t this_arg, int64_tArray descriptors, int64_tArray outputs, int8_tArray change_destination_script, int32_t feerate_sat_per_1000_weight) {
	LDKKeysManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_SpendableOutputDescriptorZ descriptors_constr;
	descriptors_constr.datalen = (*env)->GetArrayLength(env, descriptors);
	if (descriptors_constr.datalen > 0)
		descriptors_constr.data = MALLOC(descriptors_constr.datalen * sizeof(LDKSpendableOutputDescriptor), "LDKCVec_SpendableOutputDescriptorZ Elements");
	else
		descriptors_constr.data = NULL;
	int64_t* descriptors_vals = (*env)->GetLongArrayElements (env, descriptors, NULL);
	for (size_t b = 0; b < descriptors_constr.datalen; b++) {
		int64_t descriptors_conv_27 = descriptors_vals[b];
		void* descriptors_conv_27_ptr = (void*)(((uintptr_t)descriptors_conv_27) & ~1);
		CHECK_ACCESS(descriptors_conv_27_ptr);
		LDKSpendableOutputDescriptor descriptors_conv_27_conv = *(LDKSpendableOutputDescriptor*)(descriptors_conv_27_ptr);
		descriptors_conv_27_conv = SpendableOutputDescriptor_clone((LDKSpendableOutputDescriptor*)(((uintptr_t)descriptors_conv_27) & ~1));
		descriptors_constr.data[b] = descriptors_conv_27_conv;
	}
	(*env)->ReleaseLongArrayElements(env, descriptors, descriptors_vals, 0);
	LDKCVec_TxOutZ outputs_constr;
	outputs_constr.datalen = (*env)->GetArrayLength(env, outputs);
	if (outputs_constr.datalen > 0)
		outputs_constr.data = MALLOC(outputs_constr.datalen * sizeof(LDKTxOut), "LDKCVec_TxOutZ Elements");
	else
		outputs_constr.data = NULL;
	int64_t* outputs_vals = (*env)->GetLongArrayElements (env, outputs, NULL);
	for (size_t h = 0; h < outputs_constr.datalen; h++) {
		int64_t outputs_conv_7 = outputs_vals[h];
		void* outputs_conv_7_ptr = (void*)(((uintptr_t)outputs_conv_7) & ~1);
		CHECK_ACCESS(outputs_conv_7_ptr);
		LDKTxOut outputs_conv_7_conv = *(LDKTxOut*)(outputs_conv_7_ptr);
		outputs_conv_7_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)outputs_conv_7) & ~1));
		outputs_constr.data[h] = outputs_conv_7_conv;
	}
	(*env)->ReleaseLongArrayElements(env, outputs, outputs_vals, 0);
	LDKCVec_u8Z change_destination_script_ref;
	change_destination_script_ref.datalen = (*env)->GetArrayLength(env, change_destination_script);
	change_destination_script_ref.data = MALLOC(change_destination_script_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, change_destination_script, 0, change_destination_script_ref.datalen, change_destination_script_ref.data);
	LDKCResult_TransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TransactionNoneZ), "LDKCResult_TransactionNoneZ");
	*ret_conv = KeysManager_spend_spendable_outputs(&this_arg_conv, descriptors_constr, outputs_constr, change_destination_script_ref, feerate_sat_per_1000_weight);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_KeysManager_1as_1KeysInterface(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKKeysManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKKeysInterface* ret_ret = MALLOC(sizeof(LDKKeysInterface), "LDKKeysInterface");
	*ret_ret = KeysManager_as_KeysInterface(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PhantomKeysManager_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPhantomKeysManager this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PhantomKeysManager_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomKeysManager_1as_1KeysInterface(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPhantomKeysManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKKeysInterface* ret_ret = MALLOC(sizeof(LDKKeysInterface), "LDKKeysInterface");
	*ret_ret = PhantomKeysManager_as_KeysInterface(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomKeysManager_1new(JNIEnv *env, jclass clz, int8_tArray seed, int64_t starting_time_secs, int32_t starting_time_nanos, int8_tArray cross_node_seed) {
	unsigned char seed_arr[32];
	CHECK((*env)->GetArrayLength(env, seed) == 32);
	(*env)->GetByteArrayRegion(env, seed, 0, 32, seed_arr);
	unsigned char (*seed_ref)[32] = &seed_arr;
	unsigned char cross_node_seed_arr[32];
	CHECK((*env)->GetArrayLength(env, cross_node_seed) == 32);
	(*env)->GetByteArrayRegion(env, cross_node_seed, 0, 32, cross_node_seed_arr);
	unsigned char (*cross_node_seed_ref)[32] = &cross_node_seed_arr;
	LDKPhantomKeysManager ret_var = PhantomKeysManager_new(seed_ref, starting_time_secs, starting_time_nanos, cross_node_seed_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomKeysManager_1spend_1spendable_1outputs(JNIEnv *env, jclass clz, int64_t this_arg, int64_tArray descriptors, int64_tArray outputs, int8_tArray change_destination_script, int32_t feerate_sat_per_1000_weight) {
	LDKPhantomKeysManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_SpendableOutputDescriptorZ descriptors_constr;
	descriptors_constr.datalen = (*env)->GetArrayLength(env, descriptors);
	if (descriptors_constr.datalen > 0)
		descriptors_constr.data = MALLOC(descriptors_constr.datalen * sizeof(LDKSpendableOutputDescriptor), "LDKCVec_SpendableOutputDescriptorZ Elements");
	else
		descriptors_constr.data = NULL;
	int64_t* descriptors_vals = (*env)->GetLongArrayElements (env, descriptors, NULL);
	for (size_t b = 0; b < descriptors_constr.datalen; b++) {
		int64_t descriptors_conv_27 = descriptors_vals[b];
		void* descriptors_conv_27_ptr = (void*)(((uintptr_t)descriptors_conv_27) & ~1);
		CHECK_ACCESS(descriptors_conv_27_ptr);
		LDKSpendableOutputDescriptor descriptors_conv_27_conv = *(LDKSpendableOutputDescriptor*)(descriptors_conv_27_ptr);
		descriptors_conv_27_conv = SpendableOutputDescriptor_clone((LDKSpendableOutputDescriptor*)(((uintptr_t)descriptors_conv_27) & ~1));
		descriptors_constr.data[b] = descriptors_conv_27_conv;
	}
	(*env)->ReleaseLongArrayElements(env, descriptors, descriptors_vals, 0);
	LDKCVec_TxOutZ outputs_constr;
	outputs_constr.datalen = (*env)->GetArrayLength(env, outputs);
	if (outputs_constr.datalen > 0)
		outputs_constr.data = MALLOC(outputs_constr.datalen * sizeof(LDKTxOut), "LDKCVec_TxOutZ Elements");
	else
		outputs_constr.data = NULL;
	int64_t* outputs_vals = (*env)->GetLongArrayElements (env, outputs, NULL);
	for (size_t h = 0; h < outputs_constr.datalen; h++) {
		int64_t outputs_conv_7 = outputs_vals[h];
		void* outputs_conv_7_ptr = (void*)(((uintptr_t)outputs_conv_7) & ~1);
		CHECK_ACCESS(outputs_conv_7_ptr);
		LDKTxOut outputs_conv_7_conv = *(LDKTxOut*)(outputs_conv_7_ptr);
		outputs_conv_7_conv = TxOut_clone((LDKTxOut*)(((uintptr_t)outputs_conv_7) & ~1));
		outputs_constr.data[h] = outputs_conv_7_conv;
	}
	(*env)->ReleaseLongArrayElements(env, outputs, outputs_vals, 0);
	LDKCVec_u8Z change_destination_script_ref;
	change_destination_script_ref.datalen = (*env)->GetArrayLength(env, change_destination_script);
	change_destination_script_ref.data = MALLOC(change_destination_script_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, change_destination_script, 0, change_destination_script_ref.datalen, change_destination_script_ref.data);
	LDKCResult_TransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TransactionNoneZ), "LDKCResult_TransactionNoneZ");
	*ret_conv = PhantomKeysManager_spend_spendable_outputs(&this_arg_conv, descriptors_constr, outputs_constr, change_destination_script_ref, feerate_sat_per_1000_weight);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomKeysManager_1derive_1channel_1keys(JNIEnv *env, jclass clz, int64_t this_arg, int64_t channel_value_satoshis, int8_tArray params) {
	LDKPhantomKeysManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char params_arr[32];
	CHECK((*env)->GetArrayLength(env, params) == 32);
	(*env)->GetByteArrayRegion(env, params, 0, 32, params_arr);
	unsigned char (*params_ref)[32] = &params_arr;
	LDKInMemorySigner ret_var = PhantomKeysManager_derive_channel_keys(&this_arg_conv, channel_value_satoshis, params_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManager_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelManager this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelManager_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChainParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChainParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChainParameters_free(this_obj_conv);
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ChainParameters_1get_1network(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChainParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jclass ret_conv = LDKNetwork_to_java(env, ChainParameters_get_network(&this_ptr_conv));
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChainParameters_1set_1network(JNIEnv *env, jclass clz, int64_t this_ptr, jclass val) {
	LDKChainParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNetwork val_conv = LDKNetwork_from_java(env, val);
	ChainParameters_set_network(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainParameters_1get_1best_1block(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChainParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKBestBlock ret_var = ChainParameters_get_best_block(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChainParameters_1set_1best_1block(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChainParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKBestBlock val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = BestBlock_clone(&val_conv);
	ChainParameters_set_best_block(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainParameters_1new(JNIEnv *env, jclass clz, jclass network_arg, int64_t best_block_arg) {
	LDKNetwork network_arg_conv = LDKNetwork_from_java(env, network_arg);
	LDKBestBlock best_block_arg_conv;
	best_block_arg_conv.inner = (void*)(best_block_arg & (~1));
	best_block_arg_conv.is_owned = (best_block_arg & 1) || (best_block_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(best_block_arg_conv);
	best_block_arg_conv = BestBlock_clone(&best_block_arg_conv);
	LDKChainParameters ret_var = ChainParameters_new(network_arg_conv, best_block_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChainParameters_clone_ptr(LDKChainParameters *NONNULL_PTR arg) {
	LDKChainParameters ret_var = ChainParameters_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainParameters_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChainParameters arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChainParameters_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChainParameters_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChainParameters orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChainParameters ret_var = ChainParameters_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKCounterpartyForwardingInfo this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	CounterpartyForwardingInfo_free(this_obj_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1get_1fee_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCounterpartyForwardingInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = CounterpartyForwardingInfo_get_fee_base_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1set_1fee_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKCounterpartyForwardingInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	CounterpartyForwardingInfo_set_fee_base_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1get_1fee_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCounterpartyForwardingInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = CounterpartyForwardingInfo_get_fee_proportional_millionths(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1set_1fee_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKCounterpartyForwardingInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	CounterpartyForwardingInfo_set_fee_proportional_millionths(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1get_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCounterpartyForwardingInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = CounterpartyForwardingInfo_get_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1set_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKCounterpartyForwardingInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	CounterpartyForwardingInfo_set_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1new(JNIEnv *env, jclass clz, int32_t fee_base_msat_arg, int32_t fee_proportional_millionths_arg, int16_t cltv_expiry_delta_arg) {
	LDKCounterpartyForwardingInfo ret_var = CounterpartyForwardingInfo_new(fee_base_msat_arg, fee_proportional_millionths_arg, cltv_expiry_delta_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t CounterpartyForwardingInfo_clone_ptr(LDKCounterpartyForwardingInfo *NONNULL_PTR arg) {
	LDKCounterpartyForwardingInfo ret_var = CounterpartyForwardingInfo_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCounterpartyForwardingInfo arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = CounterpartyForwardingInfo_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCounterpartyForwardingInfo orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKCounterpartyForwardingInfo ret_var = CounterpartyForwardingInfo_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelCounterparty this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelCounterparty_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1get_1node_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ChannelCounterparty_get_node_id(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1set_1node_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	ChannelCounterparty_set_node_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1get_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKInitFeatures ret_var = ChannelCounterparty_get_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1set_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKInitFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = InitFeatures_clone(&val_conv);
	ChannelCounterparty_set_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1get_1unspendable_1punishment_1reserve(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelCounterparty_get_unspendable_punishment_reserve(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1set_1unspendable_1punishment_1reserve(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelCounterparty_set_unspendable_punishment_reserve(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1get_1forwarding_1info(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCounterpartyForwardingInfo ret_var = ChannelCounterparty_get_forwarding_info(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1set_1forwarding_1info(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelCounterparty this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCounterpartyForwardingInfo val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = CounterpartyForwardingInfo_clone(&val_conv);
	ChannelCounterparty_set_forwarding_info(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1new(JNIEnv *env, jclass clz, int8_tArray node_id_arg, int64_t features_arg, int64_t unspendable_punishment_reserve_arg, int64_t forwarding_info_arg) {
	LDKPublicKey node_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, node_id_arg) == 33);
	(*env)->GetByteArrayRegion(env, node_id_arg, 0, 33, node_id_arg_ref.compressed_form);
	LDKInitFeatures features_arg_conv;
	features_arg_conv.inner = (void*)(features_arg & (~1));
	features_arg_conv.is_owned = (features_arg & 1) || (features_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(features_arg_conv);
	features_arg_conv = InitFeatures_clone(&features_arg_conv);
	LDKCounterpartyForwardingInfo forwarding_info_arg_conv;
	forwarding_info_arg_conv.inner = (void*)(forwarding_info_arg & (~1));
	forwarding_info_arg_conv.is_owned = (forwarding_info_arg & 1) || (forwarding_info_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(forwarding_info_arg_conv);
	forwarding_info_arg_conv = CounterpartyForwardingInfo_clone(&forwarding_info_arg_conv);
	LDKChannelCounterparty ret_var = ChannelCounterparty_new(node_id_arg_ref, features_arg_conv, unspendable_punishment_reserve_arg, forwarding_info_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelCounterparty_clone_ptr(LDKChannelCounterparty *NONNULL_PTR arg) {
	LDKChannelCounterparty ret_var = ChannelCounterparty_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelCounterparty arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelCounterparty_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelCounterparty orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelCounterparty ret_var = ChannelCounterparty_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelDetails this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelDetails_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *ChannelDetails_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	ChannelDetails_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1counterparty(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelCounterparty ret_var = ChannelDetails_get_counterparty(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1counterparty(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelCounterparty val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelCounterparty_clone(&val_conv);
	ChannelDetails_set_counterparty(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1funding_1txo(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint ret_var = ChannelDetails_get_funding_txo(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1funding_1txo(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = OutPoint_clone(&val_conv);
	ChannelDetails_set_funding_txo(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = ChannelDetails_get_short_channel_id(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u64Z val_conv = *(LDKCOption_u64Z*)(val_ptr);
	val_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)val) & ~1));
	ChannelDetails_set_short_channel_id(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1channel_1value_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelDetails_get_channel_value_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1channel_1value_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_channel_value_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1unspendable_1punishment_1reserve(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = ChannelDetails_get_unspendable_punishment_reserve(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1unspendable_1punishment_1reserve(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u64Z val_conv = *(LDKCOption_u64Z*)(val_ptr);
	val_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)val) & ~1));
	ChannelDetails_set_unspendable_punishment_reserve(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1user_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelDetails_get_user_channel_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1user_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_user_channel_id(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1balance_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelDetails_get_balance_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1balance_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_balance_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1outbound_1capacity_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelDetails_get_outbound_capacity_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1outbound_1capacity_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_outbound_capacity_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1inbound_1capacity_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelDetails_get_inbound_capacity_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1inbound_1capacity_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_inbound_capacity_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1confirmations_1required(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u32Z *ret_copy = MALLOC(sizeof(LDKCOption_u32Z), "LDKCOption_u32Z");
	*ret_copy = ChannelDetails_get_confirmations_required(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1confirmations_1required(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u32Z val_conv = *(LDKCOption_u32Z*)(val_ptr);
	val_conv = COption_u32Z_clone((LDKCOption_u32Z*)(((uintptr_t)val) & ~1));
	ChannelDetails_set_confirmations_required(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1force_1close_1spend_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u16Z *ret_copy = MALLOC(sizeof(LDKCOption_u16Z), "LDKCOption_u16Z");
	*ret_copy = ChannelDetails_get_force_close_spend_delay(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1force_1close_1spend_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u16Z val_conv = *(LDKCOption_u16Z*)(val_ptr);
	val_conv = COption_u16Z_clone((LDKCOption_u16Z*)(((uintptr_t)val) & ~1));
	ChannelDetails_set_force_close_spend_delay(&this_ptr_conv, val_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1is_1outbound(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelDetails_get_is_outbound(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1is_1outbound(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_is_outbound(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1is_1funding_1locked(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelDetails_get_is_funding_locked(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1is_1funding_1locked(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_is_funding_locked(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1is_1usable(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelDetails_get_is_usable(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1is_1usable(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_is_usable(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1get_1is_1public(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelDetails_get_is_public(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1set_1is_1public(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelDetails this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelDetails_set_is_public(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int64_t counterparty_arg, int64_t funding_txo_arg, int64_t short_channel_id_arg, int64_t channel_value_satoshis_arg, int64_t unspendable_punishment_reserve_arg, int64_t user_channel_id_arg, int64_t balance_msat_arg, int64_t outbound_capacity_msat_arg, int64_t inbound_capacity_msat_arg, int64_t confirmations_required_arg, int64_t force_close_spend_delay_arg, jboolean is_outbound_arg, jboolean is_funding_locked_arg, jboolean is_usable_arg, jboolean is_public_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKChannelCounterparty counterparty_arg_conv;
	counterparty_arg_conv.inner = (void*)(counterparty_arg & (~1));
	counterparty_arg_conv.is_owned = (counterparty_arg & 1) || (counterparty_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(counterparty_arg_conv);
	counterparty_arg_conv = ChannelCounterparty_clone(&counterparty_arg_conv);
	LDKOutPoint funding_txo_arg_conv;
	funding_txo_arg_conv.inner = (void*)(funding_txo_arg & (~1));
	funding_txo_arg_conv.is_owned = (funding_txo_arg & 1) || (funding_txo_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_txo_arg_conv);
	funding_txo_arg_conv = OutPoint_clone(&funding_txo_arg_conv);
	void* short_channel_id_arg_ptr = (void*)(((uintptr_t)short_channel_id_arg) & ~1);
	CHECK_ACCESS(short_channel_id_arg_ptr);
	LDKCOption_u64Z short_channel_id_arg_conv = *(LDKCOption_u64Z*)(short_channel_id_arg_ptr);
	short_channel_id_arg_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)short_channel_id_arg) & ~1));
	void* unspendable_punishment_reserve_arg_ptr = (void*)(((uintptr_t)unspendable_punishment_reserve_arg) & ~1);
	CHECK_ACCESS(unspendable_punishment_reserve_arg_ptr);
	LDKCOption_u64Z unspendable_punishment_reserve_arg_conv = *(LDKCOption_u64Z*)(unspendable_punishment_reserve_arg_ptr);
	void* confirmations_required_arg_ptr = (void*)(((uintptr_t)confirmations_required_arg) & ~1);
	CHECK_ACCESS(confirmations_required_arg_ptr);
	LDKCOption_u32Z confirmations_required_arg_conv = *(LDKCOption_u32Z*)(confirmations_required_arg_ptr);
	confirmations_required_arg_conv = COption_u32Z_clone((LDKCOption_u32Z*)(((uintptr_t)confirmations_required_arg) & ~1));
	void* force_close_spend_delay_arg_ptr = (void*)(((uintptr_t)force_close_spend_delay_arg) & ~1);
	CHECK_ACCESS(force_close_spend_delay_arg_ptr);
	LDKCOption_u16Z force_close_spend_delay_arg_conv = *(LDKCOption_u16Z*)(force_close_spend_delay_arg_ptr);
	force_close_spend_delay_arg_conv = COption_u16Z_clone((LDKCOption_u16Z*)(((uintptr_t)force_close_spend_delay_arg) & ~1));
	LDKChannelDetails ret_var = ChannelDetails_new(channel_id_arg_ref, counterparty_arg_conv, funding_txo_arg_conv, short_channel_id_arg_conv, channel_value_satoshis_arg, unspendable_punishment_reserve_arg_conv, user_channel_id_arg, balance_msat_arg, outbound_capacity_msat_arg, inbound_capacity_msat_arg, confirmations_required_arg_conv, force_close_spend_delay_arg_conv, is_outbound_arg, is_funding_locked_arg, is_usable_arg, is_public_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelDetails_clone_ptr(LDKChannelDetails *NONNULL_PTR arg) {
	LDKChannelDetails ret_var = ChannelDetails_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelDetails arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelDetails_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelDetails orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelDetails ret_var = ChannelDetails_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentSendFailure_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKPaymentSendFailure this_ptr_conv = *(LDKPaymentSendFailure*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	PaymentSendFailure_free(this_ptr_conv);
}

static inline uintptr_t PaymentSendFailure_clone_ptr(LDKPaymentSendFailure *NONNULL_PTR arg) {
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = PaymentSendFailure_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentSendFailure_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPaymentSendFailure* arg_conv = (LDKPaymentSendFailure*)arg;
	int64_t ret_val = PaymentSendFailure_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentSendFailure_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPaymentSendFailure* orig_conv = (LDKPaymentSendFailure*)orig;
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = PaymentSendFailure_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentSendFailure_1parameter_1error(JNIEnv *env, jclass clz, int64_t a) {
	void* a_ptr = (void*)(((uintptr_t)a) & ~1);
	CHECK_ACCESS(a_ptr);
	LDKAPIError a_conv = *(LDKAPIError*)(a_ptr);
	a_conv = APIError_clone((LDKAPIError*)(((uintptr_t)a) & ~1));
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = PaymentSendFailure_parameter_error(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentSendFailure_1path_1parameter_1error(JNIEnv *env, jclass clz, int64_tArray a) {
	LDKCVec_CResult_NoneAPIErrorZZ a_constr;
	a_constr.datalen = (*env)->GetArrayLength(env, a);
	if (a_constr.datalen > 0)
		a_constr.data = MALLOC(a_constr.datalen * sizeof(LDKCResult_NoneAPIErrorZ), "LDKCVec_CResult_NoneAPIErrorZZ Elements");
	else
		a_constr.data = NULL;
	int64_t* a_vals = (*env)->GetLongArrayElements (env, a, NULL);
	for (size_t w = 0; w < a_constr.datalen; w++) {
		int64_t a_conv_22 = a_vals[w];
		void* a_conv_22_ptr = (void*)(((uintptr_t)a_conv_22) & ~1);
		CHECK_ACCESS(a_conv_22_ptr);
		LDKCResult_NoneAPIErrorZ a_conv_22_conv = *(LDKCResult_NoneAPIErrorZ*)(a_conv_22_ptr);
		a_conv_22_conv = CResult_NoneAPIErrorZ_clone((LDKCResult_NoneAPIErrorZ*)(((uintptr_t)a_conv_22) & ~1));
		a_constr.data[w] = a_conv_22_conv;
	}
	(*env)->ReleaseLongArrayElements(env, a, a_vals, 0);
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = PaymentSendFailure_path_parameter_error(a_constr);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentSendFailure_1all_1failed_1retry_1safe(JNIEnv *env, jclass clz, int64_tArray a) {
	LDKCVec_APIErrorZ a_constr;
	a_constr.datalen = (*env)->GetArrayLength(env, a);
	if (a_constr.datalen > 0)
		a_constr.data = MALLOC(a_constr.datalen * sizeof(LDKAPIError), "LDKCVec_APIErrorZ Elements");
	else
		a_constr.data = NULL;
	int64_t* a_vals = (*env)->GetLongArrayElements (env, a, NULL);
	for (size_t k = 0; k < a_constr.datalen; k++) {
		int64_t a_conv_10 = a_vals[k];
		void* a_conv_10_ptr = (void*)(((uintptr_t)a_conv_10) & ~1);
		CHECK_ACCESS(a_conv_10_ptr);
		LDKAPIError a_conv_10_conv = *(LDKAPIError*)(a_conv_10_ptr);
		a_conv_10_conv = APIError_clone((LDKAPIError*)(((uintptr_t)a_conv_10) & ~1));
		a_constr.data[k] = a_conv_10_conv;
	}
	(*env)->ReleaseLongArrayElements(env, a, a_vals, 0);
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = PaymentSendFailure_all_failed_retry_safe(a_constr);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentSendFailure_1partial_1failure(JNIEnv *env, jclass clz, int64_tArray results, int64_t failed_paths_retry, int8_tArray payment_id) {
	LDKCVec_CResult_NoneAPIErrorZZ results_constr;
	results_constr.datalen = (*env)->GetArrayLength(env, results);
	if (results_constr.datalen > 0)
		results_constr.data = MALLOC(results_constr.datalen * sizeof(LDKCResult_NoneAPIErrorZ), "LDKCVec_CResult_NoneAPIErrorZZ Elements");
	else
		results_constr.data = NULL;
	int64_t* results_vals = (*env)->GetLongArrayElements (env, results, NULL);
	for (size_t w = 0; w < results_constr.datalen; w++) {
		int64_t results_conv_22 = results_vals[w];
		void* results_conv_22_ptr = (void*)(((uintptr_t)results_conv_22) & ~1);
		CHECK_ACCESS(results_conv_22_ptr);
		LDKCResult_NoneAPIErrorZ results_conv_22_conv = *(LDKCResult_NoneAPIErrorZ*)(results_conv_22_ptr);
		results_constr.data[w] = results_conv_22_conv;
	}
	(*env)->ReleaseLongArrayElements(env, results, results_vals, 0);
	LDKRouteParameters failed_paths_retry_conv;
	failed_paths_retry_conv.inner = (void*)(failed_paths_retry & (~1));
	failed_paths_retry_conv.is_owned = (failed_paths_retry & 1) || (failed_paths_retry == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(failed_paths_retry_conv);
	failed_paths_retry_conv = RouteParameters_clone(&failed_paths_retry_conv);
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	LDKPaymentSendFailure *ret_copy = MALLOC(sizeof(LDKPaymentSendFailure), "LDKPaymentSendFailure");
	*ret_copy = PaymentSendFailure_partial_failure(results_constr, failed_paths_retry_conv, payment_id_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPhantomRouteHints this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PhantomRouteHints_free(this_obj_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1get_1channels(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPhantomRouteHints this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_ChannelDetailsZ ret_var = PhantomRouteHints_get_channels(&this_ptr_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t q = 0; q < ret_var.datalen; q++) {
		LDKChannelDetails ret_conv_16_var = ret_var.data[q];
		uintptr_t ret_conv_16_ref = 0;
		CHECK((((uintptr_t)ret_conv_16_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_16_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_16_var);
		ret_conv_16_ref = (uintptr_t)ret_conv_16_var.inner;
		if (ret_conv_16_var.is_owned) {
			ret_conv_16_ref |= 1;
		}
		ret_arr_ptr[q] = ret_conv_16_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1set_1channels(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKPhantomRouteHints this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_ChannelDetailsZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKChannelDetails), "LDKCVec_ChannelDetailsZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t q = 0; q < val_constr.datalen; q++) {
		int64_t val_conv_16 = val_vals[q];
		LDKChannelDetails val_conv_16_conv;
		val_conv_16_conv.inner = (void*)(val_conv_16 & (~1));
		val_conv_16_conv.is_owned = (val_conv_16 & 1) || (val_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_16_conv);
		val_conv_16_conv = ChannelDetails_clone(&val_conv_16_conv);
		val_constr.data[q] = val_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	PhantomRouteHints_set_channels(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1get_1phantom_1scid(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPhantomRouteHints this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = PhantomRouteHints_get_phantom_scid(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1set_1phantom_1scid(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKPhantomRouteHints this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	PhantomRouteHints_set_phantom_scid(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1get_1real_1node_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPhantomRouteHints this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, PhantomRouteHints_get_real_node_pubkey(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1set_1real_1node_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKPhantomRouteHints this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	PhantomRouteHints_set_real_node_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1new(JNIEnv *env, jclass clz, int64_tArray channels_arg, int64_t phantom_scid_arg, int8_tArray real_node_pubkey_arg) {
	LDKCVec_ChannelDetailsZ channels_arg_constr;
	channels_arg_constr.datalen = (*env)->GetArrayLength(env, channels_arg);
	if (channels_arg_constr.datalen > 0)
		channels_arg_constr.data = MALLOC(channels_arg_constr.datalen * sizeof(LDKChannelDetails), "LDKCVec_ChannelDetailsZ Elements");
	else
		channels_arg_constr.data = NULL;
	int64_t* channels_arg_vals = (*env)->GetLongArrayElements (env, channels_arg, NULL);
	for (size_t q = 0; q < channels_arg_constr.datalen; q++) {
		int64_t channels_arg_conv_16 = channels_arg_vals[q];
		LDKChannelDetails channels_arg_conv_16_conv;
		channels_arg_conv_16_conv.inner = (void*)(channels_arg_conv_16 & (~1));
		channels_arg_conv_16_conv.is_owned = (channels_arg_conv_16 & 1) || (channels_arg_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(channels_arg_conv_16_conv);
		channels_arg_conv_16_conv = ChannelDetails_clone(&channels_arg_conv_16_conv);
		channels_arg_constr.data[q] = channels_arg_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, channels_arg, channels_arg_vals, 0);
	LDKPublicKey real_node_pubkey_arg_ref;
	CHECK((*env)->GetArrayLength(env, real_node_pubkey_arg) == 33);
	(*env)->GetByteArrayRegion(env, real_node_pubkey_arg, 0, 33, real_node_pubkey_arg_ref.compressed_form);
	LDKPhantomRouteHints ret_var = PhantomRouteHints_new(channels_arg_constr, phantom_scid_arg, real_node_pubkey_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t PhantomRouteHints_clone_ptr(LDKPhantomRouteHints *NONNULL_PTR arg) {
	LDKPhantomRouteHints ret_var = PhantomRouteHints_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPhantomRouteHints arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = PhantomRouteHints_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPhantomRouteHints orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPhantomRouteHints ret_var = PhantomRouteHints_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1new(JNIEnv *env, jclass clz, int64_t fee_est, int64_t chain_monitor, int64_t tx_broadcaster, int64_t logger, int64_t keys_manager, int64_t config, int64_t params) {
	void* fee_est_ptr = (void*)(((uintptr_t)fee_est) & ~1);
	CHECK_ACCESS(fee_est_ptr);
	LDKFeeEstimator fee_est_conv = *(LDKFeeEstimator*)(fee_est_ptr);
	if (fee_est_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&fee_est_conv);
	}
	void* chain_monitor_ptr = (void*)(((uintptr_t)chain_monitor) & ~1);
	CHECK_ACCESS(chain_monitor_ptr);
	LDKWatch chain_monitor_conv = *(LDKWatch*)(chain_monitor_ptr);
	if (chain_monitor_conv.free == LDKWatch_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKWatch_JCalls_cloned(&chain_monitor_conv);
	}
	void* tx_broadcaster_ptr = (void*)(((uintptr_t)tx_broadcaster) & ~1);
	CHECK_ACCESS(tx_broadcaster_ptr);
	LDKBroadcasterInterface tx_broadcaster_conv = *(LDKBroadcasterInterface*)(tx_broadcaster_ptr);
	if (tx_broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&tx_broadcaster_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	void* keys_manager_ptr = (void*)(((uintptr_t)keys_manager) & ~1);
	CHECK_ACCESS(keys_manager_ptr);
	LDKKeysInterface keys_manager_conv = *(LDKKeysInterface*)(keys_manager_ptr);
	if (keys_manager_conv.free == LDKKeysInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKKeysInterface_JCalls_cloned(&keys_manager_conv);
	}
	LDKUserConfig config_conv;
	config_conv.inner = (void*)(config & (~1));
	config_conv.is_owned = (config & 1) || (config == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(config_conv);
	config_conv = UserConfig_clone(&config_conv);
	LDKChainParameters params_conv;
	params_conv.inner = (void*)(params & (~1));
	params_conv.is_owned = (params & 1) || (params == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(params_conv);
	params_conv = ChainParameters_clone(&params_conv);
	LDKChannelManager ret_var = ChannelManager_new(fee_est_conv, chain_monitor_conv, tx_broadcaster_conv, logger_conv, keys_manager_conv, config_conv, params_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1get_1current_1default_1configuration(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKUserConfig ret_var = ChannelManager_get_current_default_configuration(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1create_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_network_key, int64_t channel_value_satoshis, int64_t push_msat, int64_t user_channel_id, int64_t override_config) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPublicKey their_network_key_ref;
	CHECK((*env)->GetArrayLength(env, their_network_key) == 33);
	(*env)->GetByteArrayRegion(env, their_network_key, 0, 33, their_network_key_ref.compressed_form);
	LDKUserConfig override_config_conv;
	override_config_conv.inner = (void*)(override_config & (~1));
	override_config_conv.is_owned = (override_config & 1) || (override_config == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(override_config_conv);
	override_config_conv = UserConfig_clone(&override_config_conv);
	LDKCResult__u832APIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult__u832APIErrorZ), "LDKCResult__u832APIErrorZ");
	*ret_conv = ChannelManager_create_channel(&this_arg_conv, their_network_key_ref, channel_value_satoshis, push_msat, user_channel_id, override_config_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelManager_1list_1channels(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_ChannelDetailsZ ret_var = ChannelManager_list_channels(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t q = 0; q < ret_var.datalen; q++) {
		LDKChannelDetails ret_conv_16_var = ret_var.data[q];
		uintptr_t ret_conv_16_ref = 0;
		CHECK((((uintptr_t)ret_conv_16_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_16_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_16_var);
		ret_conv_16_ref = (uintptr_t)ret_conv_16_var.inner;
		if (ret_conv_16_var.is_owned) {
			ret_conv_16_ref |= 1;
		}
		ret_arr_ptr[q] = ret_conv_16_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_ChannelManager_1list_1usable_1channels(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_ChannelDetailsZ ret_var = ChannelManager_list_usable_channels(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t q = 0; q < ret_var.datalen; q++) {
		LDKChannelDetails ret_conv_16_var = ret_var.data[q];
		uintptr_t ret_conv_16_ref = 0;
		CHECK((((uintptr_t)ret_conv_16_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_16_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_16_var);
		ret_conv_16_ref = (uintptr_t)ret_conv_16_var.inner;
		if (ret_conv_16_var.is_owned) {
			ret_conv_16_ref |= 1;
		}
		ret_arr_ptr[q] = ret_conv_16_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1close_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray channel_id) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char channel_id_arr[32];
	CHECK((*env)->GetArrayLength(env, channel_id) == 32);
	(*env)->GetByteArrayRegion(env, channel_id, 0, 32, channel_id_arr);
	unsigned char (*channel_id_ref)[32] = &channel_id_arr;
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = ChannelManager_close_channel(&this_arg_conv, channel_id_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1close_1channel_1with_1target_1feerate(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray channel_id, int32_t target_feerate_sats_per_1000_weight) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char channel_id_arr[32];
	CHECK((*env)->GetArrayLength(env, channel_id) == 32);
	(*env)->GetByteArrayRegion(env, channel_id, 0, 32, channel_id_arr);
	unsigned char (*channel_id_ref)[32] = &channel_id_arr;
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = ChannelManager_close_channel_with_target_feerate(&this_arg_conv, channel_id_ref, target_feerate_sats_per_1000_weight);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1force_1close_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray channel_id) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char channel_id_arr[32];
	CHECK((*env)->GetArrayLength(env, channel_id) == 32);
	(*env)->GetByteArrayRegion(env, channel_id, 0, 32, channel_id_arr);
	unsigned char (*channel_id_ref)[32] = &channel_id_arr;
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = ChannelManager_force_close_channel(&this_arg_conv, channel_id_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManager_1force_1close_1all_1channels(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	ChannelManager_force_close_all_channels(&this_arg_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1send_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t route, int8_tArray payment_hash, int8_tArray payment_secret) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKRoute route_conv;
	route_conv.inner = (void*)(route & (~1));
	route_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_conv);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	LDKThirtyTwoBytes payment_secret_ref;
	CHECK((*env)->GetArrayLength(env, payment_secret) == 32);
	(*env)->GetByteArrayRegion(env, payment_secret, 0, 32, payment_secret_ref.data);
	LDKCResult_PaymentIdPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentSendFailureZ), "LDKCResult_PaymentIdPaymentSendFailureZ");
	*ret_conv = ChannelManager_send_payment(&this_arg_conv, &route_conv, payment_hash_ref, payment_secret_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1retry_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t route, int8_tArray payment_id) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKRoute route_conv;
	route_conv.inner = (void*)(route & (~1));
	route_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_conv);
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	LDKCResult_NonePaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePaymentSendFailureZ), "LDKCResult_NonePaymentSendFailureZ");
	*ret_conv = ChannelManager_retry_payment(&this_arg_conv, &route_conv, payment_id_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManager_1abandon_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_id) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKThirtyTwoBytes payment_id_ref;
	CHECK((*env)->GetArrayLength(env, payment_id) == 32);
	(*env)->GetByteArrayRegion(env, payment_id, 0, 32, payment_id_ref.data);
	ChannelManager_abandon_payment(&this_arg_conv, payment_id_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1send_1spontaneous_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t route, int8_tArray payment_preimage) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKRoute route_conv;
	route_conv.inner = (void*)(route & (~1));
	route_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_conv);
	LDKThirtyTwoBytes payment_preimage_ref;
	CHECK((*env)->GetArrayLength(env, payment_preimage) == 32);
	(*env)->GetByteArrayRegion(env, payment_preimage, 0, 32, payment_preimage_ref.data);
	LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ), "LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ");
	*ret_conv = ChannelManager_send_spontaneous_payment(&this_arg_conv, &route_conv, payment_preimage_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1funding_1transaction_1generated(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray temporary_channel_id, int8_tArray funding_transaction) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char temporary_channel_id_arr[32];
	CHECK((*env)->GetArrayLength(env, temporary_channel_id) == 32);
	(*env)->GetByteArrayRegion(env, temporary_channel_id, 0, 32, temporary_channel_id_arr);
	unsigned char (*temporary_channel_id_ref)[32] = &temporary_channel_id_arr;
	LDKTransaction funding_transaction_ref;
	funding_transaction_ref.datalen = (*env)->GetArrayLength(env, funding_transaction);
	funding_transaction_ref.data = MALLOC(funding_transaction_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, funding_transaction, 0, funding_transaction_ref.datalen, funding_transaction_ref.data);
	funding_transaction_ref.data_is_owned = true;
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = ChannelManager_funding_transaction_generated(&this_arg_conv, temporary_channel_id_ref, funding_transaction_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManager_1broadcast_1node_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray rgb, int8_tArray alias, int64_tArray addresses) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKThreeBytes rgb_ref;
	CHECK((*env)->GetArrayLength(env, rgb) == 3);
	(*env)->GetByteArrayRegion(env, rgb, 0, 3, rgb_ref.data);
	LDKThirtyTwoBytes alias_ref;
	CHECK((*env)->GetArrayLength(env, alias) == 32);
	(*env)->GetByteArrayRegion(env, alias, 0, 32, alias_ref.data);
	LDKCVec_NetAddressZ addresses_constr;
	addresses_constr.datalen = (*env)->GetArrayLength(env, addresses);
	if (addresses_constr.datalen > 0)
		addresses_constr.data = MALLOC(addresses_constr.datalen * sizeof(LDKNetAddress), "LDKCVec_NetAddressZ Elements");
	else
		addresses_constr.data = NULL;
	int64_t* addresses_vals = (*env)->GetLongArrayElements (env, addresses, NULL);
	for (size_t m = 0; m < addresses_constr.datalen; m++) {
		int64_t addresses_conv_12 = addresses_vals[m];
		void* addresses_conv_12_ptr = (void*)(((uintptr_t)addresses_conv_12) & ~1);
		CHECK_ACCESS(addresses_conv_12_ptr);
		LDKNetAddress addresses_conv_12_conv = *(LDKNetAddress*)(addresses_conv_12_ptr);
		addresses_constr.data[m] = addresses_conv_12_conv;
	}
	(*env)->ReleaseLongArrayElements(env, addresses, addresses_vals, 0);
	ChannelManager_broadcast_node_announcement(&this_arg_conv, rgb_ref, alias_ref, addresses_constr);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManager_1process_1pending_1htlc_1forwards(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	ChannelManager_process_pending_htlc_forwards(&this_arg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManager_1timer_1tick_1occurred(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	ChannelManager_timer_tick_occurred(&this_arg_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelManager_1fail_1htlc_1backwards(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_hash) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char payment_hash_arr[32];
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_arr);
	unsigned char (*payment_hash_ref)[32] = &payment_hash_arr;
	jboolean ret_val = ChannelManager_fail_htlc_backwards(&this_arg_conv, payment_hash_ref);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelManager_1claim_1funds(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_preimage) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKThirtyTwoBytes payment_preimage_ref;
	CHECK((*env)->GetArrayLength(env, payment_preimage) == 32);
	(*env)->GetByteArrayRegion(env, payment_preimage, 0, 32, payment_preimage_ref.data);
	jboolean ret_val = ChannelManager_claim_funds(&this_arg_conv, payment_preimage_ref);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelManager_1get_1our_1node_1id(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ChannelManager_get_our_node_id(&this_arg_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1accept_1inbound_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray temporary_channel_id) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char temporary_channel_id_arr[32];
	CHECK((*env)->GetArrayLength(env, temporary_channel_id) == 32);
	(*env)->GetByteArrayRegion(env, temporary_channel_id, 0, 32, temporary_channel_id_arr);
	unsigned char (*temporary_channel_id_ref)[32] = &temporary_channel_id_arr;
	LDKCResult_NoneAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneAPIErrorZ), "LDKCResult_NoneAPIErrorZ");
	*ret_conv = ChannelManager_accept_inbound_channel(&this_arg_conv, temporary_channel_id_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1create_1inbound_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int64_t min_value_msat, int32_t invoice_expiry_delta_secs) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* min_value_msat_ptr = (void*)(((uintptr_t)min_value_msat) & ~1);
	CHECK_ACCESS(min_value_msat_ptr);
	LDKCOption_u64Z min_value_msat_conv = *(LDKCOption_u64Z*)(min_value_msat_ptr);
	min_value_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)min_value_msat) & ~1));
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ");
	*ret_conv = ChannelManager_create_inbound_payment(&this_arg_conv, min_value_msat_conv, invoice_expiry_delta_secs);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1create_1inbound_1payment_1legacy(JNIEnv *env, jclass clz, int64_t this_arg, int64_t min_value_msat, int32_t invoice_expiry_delta_secs) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* min_value_msat_ptr = (void*)(((uintptr_t)min_value_msat) & ~1);
	CHECK_ACCESS(min_value_msat_ptr);
	LDKCOption_u64Z min_value_msat_conv = *(LDKCOption_u64Z*)(min_value_msat_ptr);
	min_value_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)min_value_msat) & ~1));
	LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ), "LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ");
	*ret_conv = ChannelManager_create_inbound_payment_legacy(&this_arg_conv, min_value_msat_conv, invoice_expiry_delta_secs);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1create_1inbound_1payment_1for_1hash(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_hash, int64_t min_value_msat, int32_t invoice_expiry_delta_secs) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	void* min_value_msat_ptr = (void*)(((uintptr_t)min_value_msat) & ~1);
	CHECK_ACCESS(min_value_msat_ptr);
	LDKCOption_u64Z min_value_msat_conv = *(LDKCOption_u64Z*)(min_value_msat_ptr);
	min_value_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)min_value_msat) & ~1));
	LDKCResult_PaymentSecretNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretNoneZ), "LDKCResult_PaymentSecretNoneZ");
	*ret_conv = ChannelManager_create_inbound_payment_for_hash(&this_arg_conv, payment_hash_ref, min_value_msat_conv, invoice_expiry_delta_secs);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1create_1inbound_1payment_1for_1hash_1legacy(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_hash, int64_t min_value_msat, int32_t invoice_expiry_delta_secs) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	void* min_value_msat_ptr = (void*)(((uintptr_t)min_value_msat) & ~1);
	CHECK_ACCESS(min_value_msat_ptr);
	LDKCOption_u64Z min_value_msat_conv = *(LDKCOption_u64Z*)(min_value_msat_ptr);
	min_value_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)min_value_msat) & ~1));
	LDKCResult_PaymentSecretAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentSecretAPIErrorZ), "LDKCResult_PaymentSecretAPIErrorZ");
	*ret_conv = ChannelManager_create_inbound_payment_for_hash_legacy(&this_arg_conv, payment_hash_ref, min_value_msat_conv, invoice_expiry_delta_secs);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1get_1payment_1preimage(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_hash, int8_tArray payment_secret) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	LDKThirtyTwoBytes payment_secret_ref;
	CHECK((*env)->GetArrayLength(env, payment_secret) == 32);
	(*env)->GetByteArrayRegion(env, payment_secret, 0, 32, payment_secret_ref.data);
	LDKCResult_PaymentPreimageAPIErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentPreimageAPIErrorZ), "LDKCResult_PaymentPreimageAPIErrorZ");
	*ret_conv = ChannelManager_get_payment_preimage(&this_arg_conv, payment_hash_ref, payment_secret_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1get_1phantom_1scid(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = ChannelManager_get_phantom_scid(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1get_1phantom_1route_1hints(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPhantomRouteHints ret_var = ChannelManager_get_phantom_route_hints(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1as_1MessageSendEventsProvider(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKMessageSendEventsProvider* ret_ret = MALLOC(sizeof(LDKMessageSendEventsProvider), "LDKMessageSendEventsProvider");
	*ret_ret = ChannelManager_as_MessageSendEventsProvider(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1as_1EventsProvider(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKEventsProvider* ret_ret = MALLOC(sizeof(LDKEventsProvider), "LDKEventsProvider");
	*ret_ret = ChannelManager_as_EventsProvider(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1as_1Listen(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKListen* ret_ret = MALLOC(sizeof(LDKListen), "LDKListen");
	*ret_ret = ChannelManager_as_Listen(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1as_1Confirm(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKConfirm* ret_ret = MALLOC(sizeof(LDKConfirm), "LDKConfirm");
	*ret_ret = ChannelManager_as_Confirm(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelManager_1await_1persistable_1update_1timeout(JNIEnv *env, jclass clz, int64_t this_arg, int64_t max_wait) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = ChannelManager_await_persistable_update_timeout(&this_arg_conv, max_wait);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManager_1await_1persistable_1update(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	ChannelManager_await_persistable_update(&this_arg_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1current_1best_1block(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKBestBlock ret_var = ChannelManager_current_best_block(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1as_1ChannelMessageHandler(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelMessageHandler* ret_ret = MALLOC(sizeof(LDKChannelMessageHandler), "LDKChannelMessageHandler");
	*ret_ret = ChannelManager_as_ChannelMessageHandler(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKCounterpartyForwardingInfo obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = CounterpartyForwardingInfo_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyForwardingInfo_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_CounterpartyForwardingInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ), "LDKCResult_CounterpartyForwardingInfoDecodeErrorZ");
	*ret_conv = CounterpartyForwardingInfo_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelCounterparty obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelCounterparty_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelCounterparty_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelCounterpartyDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelCounterpartyDecodeErrorZ), "LDKCResult_ChannelCounterpartyDecodeErrorZ");
	*ret_conv = ChannelCounterparty_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelDetails obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelDetails_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelDetails_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelDetailsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelDetailsDecodeErrorZ), "LDKCResult_ChannelDetailsDecodeErrorZ");
	*ret_conv = ChannelDetails_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKPhantomRouteHints obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = PhantomRouteHints_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PhantomRouteHints_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_PhantomRouteHintsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PhantomRouteHintsDecodeErrorZ), "LDKCResult_PhantomRouteHintsDecodeErrorZ");
	*ret_conv = PhantomRouteHints_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelManager_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelManager obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelManager_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelManagerReadArgs this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelManagerReadArgs_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1get_1keys_1manager(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_ret = ((uintptr_t)ChannelManagerReadArgs_get_keys_manager(&this_ptr_conv)) | 1;
	return ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1set_1keys_1manager(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKKeysInterface val_conv = *(LDKKeysInterface*)(val_ptr);
	if (val_conv.free == LDKKeysInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKKeysInterface_JCalls_cloned(&val_conv);
	}
	ChannelManagerReadArgs_set_keys_manager(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1get_1fee_1estimator(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_ret = ((uintptr_t)ChannelManagerReadArgs_get_fee_estimator(&this_ptr_conv)) | 1;
	return ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1set_1fee_1estimator(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKFeeEstimator val_conv = *(LDKFeeEstimator*)(val_ptr);
	if (val_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&val_conv);
	}
	ChannelManagerReadArgs_set_fee_estimator(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1get_1chain_1monitor(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_ret = ((uintptr_t)ChannelManagerReadArgs_get_chain_monitor(&this_ptr_conv)) | 1;
	return ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1set_1chain_1monitor(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKWatch val_conv = *(LDKWatch*)(val_ptr);
	if (val_conv.free == LDKWatch_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKWatch_JCalls_cloned(&val_conv);
	}
	ChannelManagerReadArgs_set_chain_monitor(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1get_1tx_1broadcaster(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_ret = ((uintptr_t)ChannelManagerReadArgs_get_tx_broadcaster(&this_ptr_conv)) | 1;
	return ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1set_1tx_1broadcaster(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKBroadcasterInterface val_conv = *(LDKBroadcasterInterface*)(val_ptr);
	if (val_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&val_conv);
	}
	ChannelManagerReadArgs_set_tx_broadcaster(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1get_1logger(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_ret = ((uintptr_t)ChannelManagerReadArgs_get_logger(&this_ptr_conv)) | 1;
	return ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1set_1logger(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKLogger val_conv = *(LDKLogger*)(val_ptr);
	if (val_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&val_conv);
	}
	ChannelManagerReadArgs_set_logger(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1get_1default_1config(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUserConfig ret_var = ChannelManagerReadArgs_get_default_config(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1set_1default_1config(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelManagerReadArgs this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUserConfig val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = UserConfig_clone(&val_conv);
	ChannelManagerReadArgs_set_default_config(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManagerReadArgs_1new(JNIEnv *env, jclass clz, int64_t keys_manager, int64_t fee_estimator, int64_t chain_monitor, int64_t tx_broadcaster, int64_t logger, int64_t default_config, int64_tArray channel_monitors) {
	void* keys_manager_ptr = (void*)(((uintptr_t)keys_manager) & ~1);
	CHECK_ACCESS(keys_manager_ptr);
	LDKKeysInterface keys_manager_conv = *(LDKKeysInterface*)(keys_manager_ptr);
	if (keys_manager_conv.free == LDKKeysInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKKeysInterface_JCalls_cloned(&keys_manager_conv);
	}
	void* fee_estimator_ptr = (void*)(((uintptr_t)fee_estimator) & ~1);
	CHECK_ACCESS(fee_estimator_ptr);
	LDKFeeEstimator fee_estimator_conv = *(LDKFeeEstimator*)(fee_estimator_ptr);
	if (fee_estimator_conv.free == LDKFeeEstimator_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKFeeEstimator_JCalls_cloned(&fee_estimator_conv);
	}
	void* chain_monitor_ptr = (void*)(((uintptr_t)chain_monitor) & ~1);
	CHECK_ACCESS(chain_monitor_ptr);
	LDKWatch chain_monitor_conv = *(LDKWatch*)(chain_monitor_ptr);
	if (chain_monitor_conv.free == LDKWatch_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKWatch_JCalls_cloned(&chain_monitor_conv);
	}
	void* tx_broadcaster_ptr = (void*)(((uintptr_t)tx_broadcaster) & ~1);
	CHECK_ACCESS(tx_broadcaster_ptr);
	LDKBroadcasterInterface tx_broadcaster_conv = *(LDKBroadcasterInterface*)(tx_broadcaster_ptr);
	if (tx_broadcaster_conv.free == LDKBroadcasterInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKBroadcasterInterface_JCalls_cloned(&tx_broadcaster_conv);
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	LDKUserConfig default_config_conv;
	default_config_conv.inner = (void*)(default_config & (~1));
	default_config_conv.is_owned = (default_config & 1) || (default_config == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(default_config_conv);
	default_config_conv = UserConfig_clone(&default_config_conv);
	LDKCVec_ChannelMonitorZ channel_monitors_constr;
	channel_monitors_constr.datalen = (*env)->GetArrayLength(env, channel_monitors);
	if (channel_monitors_constr.datalen > 0)
		channel_monitors_constr.data = MALLOC(channel_monitors_constr.datalen * sizeof(LDKChannelMonitor), "LDKCVec_ChannelMonitorZ Elements");
	else
		channel_monitors_constr.data = NULL;
	int64_t* channel_monitors_vals = (*env)->GetLongArrayElements (env, channel_monitors, NULL);
	for (size_t q = 0; q < channel_monitors_constr.datalen; q++) {
		int64_t channel_monitors_conv_16 = channel_monitors_vals[q];
		LDKChannelMonitor channel_monitors_conv_16_conv;
		channel_monitors_conv_16_conv.inner = (void*)(channel_monitors_conv_16 & (~1));
		channel_monitors_conv_16_conv.is_owned = (channel_monitors_conv_16 & 1) || (channel_monitors_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_monitors_conv_16_conv);
		channel_monitors_constr.data[q] = channel_monitors_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, channel_monitors, channel_monitors_vals, 0);
	LDKChannelManagerReadArgs ret_var = ChannelManagerReadArgs_new(keys_manager_conv, fee_estimator_conv, chain_monitor_conv, tx_broadcaster_conv, logger_conv, default_config_conv, channel_monitors_constr);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_C2Tuple_1BlockHashChannelManagerZ_1read(JNIEnv *env, jclass clz, int8_tArray ser, int64_t arg) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKChannelManagerReadArgs arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = (arg & 1) || (arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	// WARNING: we need a move here but no clone is available for LDKChannelManagerReadArgs
	LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ), "LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ");
	*ret_conv = C2Tuple_BlockHashChannelManagerZ_read(ser_ref, arg_conv);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DecodeError_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKDecodeError this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	DecodeError_free(this_obj_conv);
}

static inline uintptr_t DecodeError_clone_ptr(LDKDecodeError *NONNULL_PTR arg) {
	LDKDecodeError ret_var = DecodeError_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DecodeError_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKDecodeError arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = DecodeError_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DecodeError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKDecodeError orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKDecodeError ret_var = DecodeError_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Init_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInit this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Init_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Init_1get_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInit this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKInitFeatures ret_var = Init_get_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Init_1set_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKInit this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKInitFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = InitFeatures_clone(&val_conv);
	Init_set_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Init_1new(JNIEnv *env, jclass clz, int64_t features_arg) {
	LDKInitFeatures features_arg_conv;
	features_arg_conv.inner = (void*)(features_arg & (~1));
	features_arg_conv.is_owned = (features_arg & 1) || (features_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(features_arg_conv);
	features_arg_conv = InitFeatures_clone(&features_arg_conv);
	LDKInit ret_var = Init_new(features_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t Init_clone_ptr(LDKInit *NONNULL_PTR arg) {
	LDKInit ret_var = Init_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Init_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKInit arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Init_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Init_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKInit orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKInit ret_var = Init_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKErrorMessage this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ErrorMessage_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKErrorMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *ErrorMessage_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKErrorMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	ErrorMessage_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1get_1data(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKErrorMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr ret_str = ErrorMessage_get_data(&this_ptr_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1set_1data(JNIEnv *env, jclass clz, int64_t this_ptr, jstring val) {
	LDKErrorMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr val_conv = java_to_owned_str(env, val);
	ErrorMessage_set_data(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, jstring data_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKStr data_arg_conv = java_to_owned_str(env, data_arg);
	LDKErrorMessage ret_var = ErrorMessage_new(channel_id_arg_ref, data_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ErrorMessage_clone_ptr(LDKErrorMessage *NONNULL_PTR arg) {
	LDKErrorMessage ret_var = ErrorMessage_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKErrorMessage arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ErrorMessage_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKErrorMessage orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKErrorMessage ret_var = ErrorMessage_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_WarningMessage_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKWarningMessage this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	WarningMessage_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_WarningMessage_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKWarningMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *WarningMessage_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_WarningMessage_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKWarningMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	WarningMessage_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_WarningMessage_1get_1data(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKWarningMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr ret_str = WarningMessage_get_data(&this_ptr_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_WarningMessage_1set_1data(JNIEnv *env, jclass clz, int64_t this_ptr, jstring val) {
	LDKWarningMessage this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr val_conv = java_to_owned_str(env, val);
	WarningMessage_set_data(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WarningMessage_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, jstring data_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKStr data_arg_conv = java_to_owned_str(env, data_arg);
	LDKWarningMessage ret_var = WarningMessage_new(channel_id_arg_ref, data_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t WarningMessage_clone_ptr(LDKWarningMessage *NONNULL_PTR arg) {
	LDKWarningMessage ret_var = WarningMessage_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WarningMessage_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKWarningMessage arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = WarningMessage_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WarningMessage_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKWarningMessage orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKWarningMessage ret_var = WarningMessage_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Ping_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPing this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Ping_free(this_obj_conv);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_Ping_1get_1ponglen(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPing this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = Ping_get_ponglen(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Ping_1set_1ponglen(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKPing this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	Ping_set_ponglen(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_Ping_1get_1byteslen(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPing this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = Ping_get_byteslen(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Ping_1set_1byteslen(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKPing this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	Ping_set_byteslen(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Ping_1new(JNIEnv *env, jclass clz, int16_t ponglen_arg, int16_t byteslen_arg) {
	LDKPing ret_var = Ping_new(ponglen_arg, byteslen_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t Ping_clone_ptr(LDKPing *NONNULL_PTR arg) {
	LDKPing ret_var = Ping_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Ping_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPing arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Ping_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Ping_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPing orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPing ret_var = Ping_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Pong_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPong this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Pong_free(this_obj_conv);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_Pong_1get_1byteslen(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPong this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = Pong_get_byteslen(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Pong_1set_1byteslen(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKPong this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	Pong_set_byteslen(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Pong_1new(JNIEnv *env, jclass clz, int16_t byteslen_arg) {
	LDKPong ret_var = Pong_new(byteslen_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t Pong_clone_ptr(LDKPong *NONNULL_PTR arg) {
	LDKPong ret_var = Pong_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Pong_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPong arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Pong_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Pong_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPong orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPong ret_var = Pong_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKOpenChannel this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	OpenChannel_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *OpenChannel_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	OpenChannel_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1temporary_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *OpenChannel_get_temporary_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1temporary_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	OpenChannel_set_temporary_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1funding_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = OpenChannel_get_funding_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1funding_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_funding_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1push_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = OpenChannel_get_push_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1push_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_push_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1dust_1limit_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = OpenChannel_get_dust_limit_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1dust_1limit_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_dust_limit_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1max_1htlc_1value_1in_1flight_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = OpenChannel_get_max_htlc_value_in_flight_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1max_1htlc_1value_1in_1flight_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_max_htlc_value_in_flight_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1channel_1reserve_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = OpenChannel_get_channel_reserve_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1channel_1reserve_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_channel_reserve_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = OpenChannel_get_htlc_minimum_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_htlc_minimum_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1feerate_1per_1kw(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = OpenChannel_get_feerate_per_kw(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1feerate_1per_1kw(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_feerate_per_kw(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = OpenChannel_get_to_self_delay(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_to_self_delay(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1max_1accepted_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = OpenChannel_get_max_accepted_htlcs(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1max_1accepted_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_max_accepted_htlcs(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1funding_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, OpenChannel_get_funding_pubkey(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1funding_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	OpenChannel_set_funding_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1revocation_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, OpenChannel_get_revocation_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1revocation_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	OpenChannel_set_revocation_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1payment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, OpenChannel_get_payment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1payment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	OpenChannel_set_payment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1delayed_1payment_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, OpenChannel_get_delayed_payment_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1delayed_1payment_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	OpenChannel_set_delayed_payment_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1htlc_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, OpenChannel_get_htlc_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1htlc_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	OpenChannel_set_htlc_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1first_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, OpenChannel_get_first_per_commitment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1first_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	OpenChannel_set_first_per_commitment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1channel_1flags(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_t ret_val = OpenChannel_get_channel_flags(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1channel_1flags(JNIEnv *env, jclass clz, int64_t this_ptr, int8_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	OpenChannel_set_channel_flags(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1get_1channel_1type(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelTypeFeatures ret_var = OpenChannel_get_channel_type(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_OpenChannel_1set_1channel_1type(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKOpenChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelTypeFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelTypeFeatures_clone(&val_conv);
	OpenChannel_set_channel_type(&this_ptr_conv, val_conv);
}

static inline uintptr_t OpenChannel_clone_ptr(LDKOpenChannel *NONNULL_PTR arg) {
	LDKOpenChannel ret_var = OpenChannel_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKOpenChannel arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = OpenChannel_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKOpenChannel orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKOpenChannel ret_var = OpenChannel_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKAcceptChannel this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	AcceptChannel_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1temporary_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *AcceptChannel_get_temporary_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1temporary_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	AcceptChannel_set_temporary_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1dust_1limit_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = AcceptChannel_get_dust_limit_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1dust_1limit_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AcceptChannel_set_dust_limit_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1max_1htlc_1value_1in_1flight_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = AcceptChannel_get_max_htlc_value_in_flight_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1max_1htlc_1value_1in_1flight_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AcceptChannel_set_max_htlc_value_in_flight_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1channel_1reserve_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = AcceptChannel_get_channel_reserve_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1channel_1reserve_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AcceptChannel_set_channel_reserve_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = AcceptChannel_get_htlc_minimum_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AcceptChannel_set_htlc_minimum_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1minimum_1depth(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = AcceptChannel_get_minimum_depth(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1minimum_1depth(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AcceptChannel_set_minimum_depth(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = AcceptChannel_get_to_self_delay(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1to_1self_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AcceptChannel_set_to_self_delay(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1max_1accepted_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = AcceptChannel_get_max_accepted_htlcs(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1max_1accepted_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AcceptChannel_set_max_accepted_htlcs(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1funding_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, AcceptChannel_get_funding_pubkey(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1funding_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	AcceptChannel_set_funding_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1revocation_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, AcceptChannel_get_revocation_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1revocation_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	AcceptChannel_set_revocation_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1payment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, AcceptChannel_get_payment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1payment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	AcceptChannel_set_payment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1delayed_1payment_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, AcceptChannel_get_delayed_payment_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1delayed_1payment_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	AcceptChannel_set_delayed_payment_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1htlc_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, AcceptChannel_get_htlc_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1htlc_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	AcceptChannel_set_htlc_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1first_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, AcceptChannel_get_first_per_commitment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1first_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	AcceptChannel_set_first_per_commitment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1get_1channel_1type(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelTypeFeatures ret_var = AcceptChannel_get_channel_type(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1set_1channel_1type(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKAcceptChannel this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelTypeFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelTypeFeatures_clone(&val_conv);
	AcceptChannel_set_channel_type(&this_ptr_conv, val_conv);
}

static inline uintptr_t AcceptChannel_clone_ptr(LDKAcceptChannel *NONNULL_PTR arg) {
	LDKAcceptChannel ret_var = AcceptChannel_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKAcceptChannel arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = AcceptChannel_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKAcceptChannel orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKAcceptChannel ret_var = AcceptChannel_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingCreated_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKFundingCreated this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	FundingCreated_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingCreated_1get_1temporary_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *FundingCreated_get_temporary_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingCreated_1set_1temporary_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	FundingCreated_set_temporary_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingCreated_1get_1funding_1txid(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *FundingCreated_get_funding_txid(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingCreated_1set_1funding_1txid(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	FundingCreated_set_funding_txid(&this_ptr_conv, val_ref);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_FundingCreated_1get_1funding_1output_1index(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = FundingCreated_get_funding_output_index(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingCreated_1set_1funding_1output_1index(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	FundingCreated_set_funding_output_index(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingCreated_1get_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, FundingCreated_get_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingCreated_1set_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKFundingCreated this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	FundingCreated_set_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingCreated_1new(JNIEnv *env, jclass clz, int8_tArray temporary_channel_id_arg, int8_tArray funding_txid_arg, int16_t funding_output_index_arg, int8_tArray signature_arg) {
	LDKThirtyTwoBytes temporary_channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, temporary_channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, temporary_channel_id_arg, 0, 32, temporary_channel_id_arg_ref.data);
	LDKThirtyTwoBytes funding_txid_arg_ref;
	CHECK((*env)->GetArrayLength(env, funding_txid_arg) == 32);
	(*env)->GetByteArrayRegion(env, funding_txid_arg, 0, 32, funding_txid_arg_ref.data);
	LDKSignature signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, signature_arg, 0, 64, signature_arg_ref.compact_form);
	LDKFundingCreated ret_var = FundingCreated_new(temporary_channel_id_arg_ref, funding_txid_arg_ref, funding_output_index_arg, signature_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t FundingCreated_clone_ptr(LDKFundingCreated *NONNULL_PTR arg) {
	LDKFundingCreated ret_var = FundingCreated_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingCreated_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKFundingCreated arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = FundingCreated_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingCreated_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKFundingCreated orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKFundingCreated ret_var = FundingCreated_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingSigned_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKFundingSigned this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	FundingSigned_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingSigned_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *FundingSigned_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingSigned_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKFundingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	FundingSigned_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingSigned_1get_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, FundingSigned_get_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingSigned_1set_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKFundingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	FundingSigned_set_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingSigned_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int8_tArray signature_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKSignature signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, signature_arg, 0, 64, signature_arg_ref.compact_form);
	LDKFundingSigned ret_var = FundingSigned_new(channel_id_arg_ref, signature_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t FundingSigned_clone_ptr(LDKFundingSigned *NONNULL_PTR arg) {
	LDKFundingSigned ret_var = FundingSigned_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingSigned_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKFundingSigned arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = FundingSigned_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingSigned_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKFundingSigned orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKFundingSigned ret_var = FundingSigned_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingLocked_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKFundingLocked this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	FundingLocked_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingLocked_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingLocked this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *FundingLocked_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingLocked_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKFundingLocked this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	FundingLocked_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingLocked_1get_1next_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKFundingLocked this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, FundingLocked_get_next_per_commitment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FundingLocked_1set_1next_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKFundingLocked this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	FundingLocked_set_next_per_commitment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingLocked_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int8_tArray next_per_commitment_point_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKPublicKey next_per_commitment_point_arg_ref;
	CHECK((*env)->GetArrayLength(env, next_per_commitment_point_arg) == 33);
	(*env)->GetByteArrayRegion(env, next_per_commitment_point_arg, 0, 33, next_per_commitment_point_arg_ref.compressed_form);
	LDKFundingLocked ret_var = FundingLocked_new(channel_id_arg_ref, next_per_commitment_point_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t FundingLocked_clone_ptr(LDKFundingLocked *NONNULL_PTR arg) {
	LDKFundingLocked ret_var = FundingLocked_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingLocked_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKFundingLocked arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = FundingLocked_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingLocked_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKFundingLocked orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKFundingLocked ret_var = FundingLocked_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Shutdown_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKShutdown this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Shutdown_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Shutdown_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKShutdown this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *Shutdown_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Shutdown_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKShutdown this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	Shutdown_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Shutdown_1get_1scriptpubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKShutdown this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKu8slice ret_var = Shutdown_get_scriptpubkey(&this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Shutdown_1set_1scriptpubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKShutdown this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_u8Z val_ref;
	val_ref.datalen = (*env)->GetArrayLength(env, val);
	val_ref.data = MALLOC(val_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, val, 0, val_ref.datalen, val_ref.data);
	Shutdown_set_scriptpubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Shutdown_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int8_tArray scriptpubkey_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKCVec_u8Z scriptpubkey_arg_ref;
	scriptpubkey_arg_ref.datalen = (*env)->GetArrayLength(env, scriptpubkey_arg);
	scriptpubkey_arg_ref.data = MALLOC(scriptpubkey_arg_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, scriptpubkey_arg, 0, scriptpubkey_arg_ref.datalen, scriptpubkey_arg_ref.data);
	LDKShutdown ret_var = Shutdown_new(channel_id_arg_ref, scriptpubkey_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t Shutdown_clone_ptr(LDKShutdown *NONNULL_PTR arg) {
	LDKShutdown ret_var = Shutdown_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Shutdown_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKShutdown arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Shutdown_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Shutdown_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKShutdown orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKShutdown ret_var = Shutdown_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKClosingSignedFeeRange this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ClosingSignedFeeRange_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1get_1min_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKClosingSignedFeeRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ClosingSignedFeeRange_get_min_fee_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1set_1min_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKClosingSignedFeeRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ClosingSignedFeeRange_set_min_fee_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1get_1max_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKClosingSignedFeeRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ClosingSignedFeeRange_get_max_fee_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1set_1max_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKClosingSignedFeeRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ClosingSignedFeeRange_set_max_fee_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1new(JNIEnv *env, jclass clz, int64_t min_fee_satoshis_arg, int64_t max_fee_satoshis_arg) {
	LDKClosingSignedFeeRange ret_var = ClosingSignedFeeRange_new(min_fee_satoshis_arg, max_fee_satoshis_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ClosingSignedFeeRange_clone_ptr(LDKClosingSignedFeeRange *NONNULL_PTR arg) {
	LDKClosingSignedFeeRange ret_var = ClosingSignedFeeRange_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKClosingSignedFeeRange arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ClosingSignedFeeRange_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKClosingSignedFeeRange orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKClosingSignedFeeRange ret_var = ClosingSignedFeeRange_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKClosingSigned this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ClosingSigned_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *ClosingSigned_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	ClosingSigned_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1get_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ClosingSigned_get_fee_satoshis(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1set_1fee_1satoshis(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ClosingSigned_set_fee_satoshis(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1get_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, ClosingSigned_get_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1set_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	ClosingSigned_set_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1get_1fee_1range(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKClosingSignedFeeRange ret_var = ClosingSigned_get_fee_range(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1set_1fee_1range(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKClosingSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKClosingSignedFeeRange val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ClosingSignedFeeRange_clone(&val_conv);
	ClosingSigned_set_fee_range(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int64_t fee_satoshis_arg, int8_tArray signature_arg, int64_t fee_range_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKSignature signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, signature_arg, 0, 64, signature_arg_ref.compact_form);
	LDKClosingSignedFeeRange fee_range_arg_conv;
	fee_range_arg_conv.inner = (void*)(fee_range_arg & (~1));
	fee_range_arg_conv.is_owned = (fee_range_arg & 1) || (fee_range_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(fee_range_arg_conv);
	fee_range_arg_conv = ClosingSignedFeeRange_clone(&fee_range_arg_conv);
	LDKClosingSigned ret_var = ClosingSigned_new(channel_id_arg_ref, fee_satoshis_arg, signature_arg_ref, fee_range_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ClosingSigned_clone_ptr(LDKClosingSigned *NONNULL_PTR arg) {
	LDKClosingSigned ret_var = ClosingSigned_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKClosingSigned arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ClosingSigned_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKClosingSigned orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKClosingSigned ret_var = ClosingSigned_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUpdateAddHTLC this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UpdateAddHTLC_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UpdateAddHTLC_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UpdateAddHTLC_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1get_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UpdateAddHTLC_get_htlc_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1set_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateAddHTLC_set_htlc_id(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1get_1amount_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UpdateAddHTLC_get_amount_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1set_1amount_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateAddHTLC_set_amount_msat(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1get_1payment_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UpdateAddHTLC_get_payment_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1set_1payment_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UpdateAddHTLC_set_payment_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1get_1cltv_1expiry(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = UpdateAddHTLC_get_cltv_expiry(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1set_1cltv_1expiry(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKUpdateAddHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateAddHTLC_set_cltv_expiry(&this_ptr_conv, val);
}

static inline uintptr_t UpdateAddHTLC_clone_ptr(LDKUpdateAddHTLC *NONNULL_PTR arg) {
	LDKUpdateAddHTLC ret_var = UpdateAddHTLC_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUpdateAddHTLC arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UpdateAddHTLC_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUpdateAddHTLC orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUpdateAddHTLC ret_var = UpdateAddHTLC_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUpdateFulfillHTLC this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UpdateFulfillHTLC_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFulfillHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UpdateFulfillHTLC_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUpdateFulfillHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UpdateFulfillHTLC_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1get_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFulfillHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UpdateFulfillHTLC_get_htlc_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1set_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUpdateFulfillHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateFulfillHTLC_set_htlc_id(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1get_1payment_1preimage(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFulfillHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UpdateFulfillHTLC_get_payment_preimage(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1set_1payment_1preimage(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUpdateFulfillHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UpdateFulfillHTLC_set_payment_preimage(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int64_t htlc_id_arg, int8_tArray payment_preimage_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKThirtyTwoBytes payment_preimage_arg_ref;
	CHECK((*env)->GetArrayLength(env, payment_preimage_arg) == 32);
	(*env)->GetByteArrayRegion(env, payment_preimage_arg, 0, 32, payment_preimage_arg_ref.data);
	LDKUpdateFulfillHTLC ret_var = UpdateFulfillHTLC_new(channel_id_arg_ref, htlc_id_arg, payment_preimage_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t UpdateFulfillHTLC_clone_ptr(LDKUpdateFulfillHTLC *NONNULL_PTR arg) {
	LDKUpdateFulfillHTLC ret_var = UpdateFulfillHTLC_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUpdateFulfillHTLC arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UpdateFulfillHTLC_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUpdateFulfillHTLC orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUpdateFulfillHTLC ret_var = UpdateFulfillHTLC_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUpdateFailHTLC this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UpdateFailHTLC_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFailHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UpdateFailHTLC_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUpdateFailHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UpdateFailHTLC_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1get_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFailHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UpdateFailHTLC_get_htlc_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1set_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUpdateFailHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateFailHTLC_set_htlc_id(&this_ptr_conv, val);
}

static inline uintptr_t UpdateFailHTLC_clone_ptr(LDKUpdateFailHTLC *NONNULL_PTR arg) {
	LDKUpdateFailHTLC ret_var = UpdateFailHTLC_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUpdateFailHTLC arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UpdateFailHTLC_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUpdateFailHTLC orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUpdateFailHTLC ret_var = UpdateFailHTLC_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUpdateFailMalformedHTLC this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UpdateFailMalformedHTLC_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFailMalformedHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UpdateFailMalformedHTLC_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUpdateFailMalformedHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UpdateFailMalformedHTLC_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1get_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFailMalformedHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UpdateFailMalformedHTLC_get_htlc_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1set_1htlc_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUpdateFailMalformedHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateFailMalformedHTLC_set_htlc_id(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1get_1failure_1code(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFailMalformedHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = UpdateFailMalformedHTLC_get_failure_code(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1set_1failure_1code(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKUpdateFailMalformedHTLC this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateFailMalformedHTLC_set_failure_code(&this_ptr_conv, val);
}

static inline uintptr_t UpdateFailMalformedHTLC_clone_ptr(LDKUpdateFailMalformedHTLC *NONNULL_PTR arg) {
	LDKUpdateFailMalformedHTLC ret_var = UpdateFailMalformedHTLC_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUpdateFailMalformedHTLC arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UpdateFailMalformedHTLC_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUpdateFailMalformedHTLC orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUpdateFailMalformedHTLC ret_var = UpdateFailMalformedHTLC_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKCommitmentSigned this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	CommitmentSigned_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *CommitmentSigned_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKCommitmentSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	CommitmentSigned_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1get_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, CommitmentSigned_get_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1set_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKCommitmentSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	CommitmentSigned_set_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1set_1htlc_1signatures(JNIEnv *env, jclass clz, int64_t this_ptr, jobjectArray val) {
	LDKCommitmentSigned this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_SignatureZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKSignature), "LDKCVec_SignatureZ Elements");
	else
		val_constr.data = NULL;
	for (size_t i = 0; i < val_constr.datalen; i++) {
		int8_tArray val_conv_8 = (*env)->GetObjectArrayElement(env, val, i);
		LDKSignature val_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, val_conv_8) == 64);
		(*env)->GetByteArrayRegion(env, val_conv_8, 0, 64, val_conv_8_ref.compact_form);
		val_constr.data[i] = val_conv_8_ref;
	}
	CommitmentSigned_set_htlc_signatures(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int8_tArray signature_arg, jobjectArray htlc_signatures_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKSignature signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, signature_arg, 0, 64, signature_arg_ref.compact_form);
	LDKCVec_SignatureZ htlc_signatures_arg_constr;
	htlc_signatures_arg_constr.datalen = (*env)->GetArrayLength(env, htlc_signatures_arg);
	if (htlc_signatures_arg_constr.datalen > 0)
		htlc_signatures_arg_constr.data = MALLOC(htlc_signatures_arg_constr.datalen * sizeof(LDKSignature), "LDKCVec_SignatureZ Elements");
	else
		htlc_signatures_arg_constr.data = NULL;
	for (size_t i = 0; i < htlc_signatures_arg_constr.datalen; i++) {
		int8_tArray htlc_signatures_arg_conv_8 = (*env)->GetObjectArrayElement(env, htlc_signatures_arg, i);
		LDKSignature htlc_signatures_arg_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, htlc_signatures_arg_conv_8) == 64);
		(*env)->GetByteArrayRegion(env, htlc_signatures_arg_conv_8, 0, 64, htlc_signatures_arg_conv_8_ref.compact_form);
		htlc_signatures_arg_constr.data[i] = htlc_signatures_arg_conv_8_ref;
	}
	LDKCommitmentSigned ret_var = CommitmentSigned_new(channel_id_arg_ref, signature_arg_ref, htlc_signatures_arg_constr);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t CommitmentSigned_clone_ptr(LDKCommitmentSigned *NONNULL_PTR arg) {
	LDKCommitmentSigned ret_var = CommitmentSigned_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCommitmentSigned arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = CommitmentSigned_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCommitmentSigned orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKCommitmentSigned ret_var = CommitmentSigned_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRevokeAndACK this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RevokeAndACK_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRevokeAndACK this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *RevokeAndACK_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKRevokeAndACK this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	RevokeAndACK_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1get_1per_1commitment_1secret(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRevokeAndACK this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *RevokeAndACK_get_per_commitment_secret(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1set_1per_1commitment_1secret(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKRevokeAndACK this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	RevokeAndACK_set_per_commitment_secret(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1get_1next_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRevokeAndACK this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, RevokeAndACK_get_next_per_commitment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1set_1next_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKRevokeAndACK this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	RevokeAndACK_set_next_per_commitment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int8_tArray per_commitment_secret_arg, int8_tArray next_per_commitment_point_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKThirtyTwoBytes per_commitment_secret_arg_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_secret_arg) == 32);
	(*env)->GetByteArrayRegion(env, per_commitment_secret_arg, 0, 32, per_commitment_secret_arg_ref.data);
	LDKPublicKey next_per_commitment_point_arg_ref;
	CHECK((*env)->GetArrayLength(env, next_per_commitment_point_arg) == 33);
	(*env)->GetByteArrayRegion(env, next_per_commitment_point_arg, 0, 33, next_per_commitment_point_arg_ref.compressed_form);
	LDKRevokeAndACK ret_var = RevokeAndACK_new(channel_id_arg_ref, per_commitment_secret_arg_ref, next_per_commitment_point_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t RevokeAndACK_clone_ptr(LDKRevokeAndACK *NONNULL_PTR arg) {
	LDKRevokeAndACK ret_var = RevokeAndACK_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRevokeAndACK arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RevokeAndACK_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRevokeAndACK orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRevokeAndACK ret_var = RevokeAndACK_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFee_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUpdateFee this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UpdateFee_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFee_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFee this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UpdateFee_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFee_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUpdateFee this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UpdateFee_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_UpdateFee_1get_1feerate_1per_1kw(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUpdateFee this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = UpdateFee_get_feerate_per_kw(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UpdateFee_1set_1feerate_1per_1kw(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKUpdateFee this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UpdateFee_set_feerate_per_kw(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFee_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int32_t feerate_per_kw_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKUpdateFee ret_var = UpdateFee_new(channel_id_arg_ref, feerate_per_kw_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t UpdateFee_clone_ptr(LDKUpdateFee *NONNULL_PTR arg) {
	LDKUpdateFee ret_var = UpdateFee_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFee_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUpdateFee arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UpdateFee_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFee_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUpdateFee orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUpdateFee ret_var = UpdateFee_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKDataLossProtect this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	DataLossProtect_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1get_1your_1last_1per_1commitment_1secret(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDataLossProtect this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *DataLossProtect_get_your_last_per_commitment_secret(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1set_1your_1last_1per_1commitment_1secret(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKDataLossProtect this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	DataLossProtect_set_your_last_per_commitment_secret(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1get_1my_1current_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKDataLossProtect this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, DataLossProtect_get_my_current_per_commitment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1set_1my_1current_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKDataLossProtect this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	DataLossProtect_set_my_current_per_commitment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1new(JNIEnv *env, jclass clz, int8_tArray your_last_per_commitment_secret_arg, int8_tArray my_current_per_commitment_point_arg) {
	LDKThirtyTwoBytes your_last_per_commitment_secret_arg_ref;
	CHECK((*env)->GetArrayLength(env, your_last_per_commitment_secret_arg) == 32);
	(*env)->GetByteArrayRegion(env, your_last_per_commitment_secret_arg, 0, 32, your_last_per_commitment_secret_arg_ref.data);
	LDKPublicKey my_current_per_commitment_point_arg_ref;
	CHECK((*env)->GetArrayLength(env, my_current_per_commitment_point_arg) == 33);
	(*env)->GetByteArrayRegion(env, my_current_per_commitment_point_arg, 0, 33, my_current_per_commitment_point_arg_ref.compressed_form);
	LDKDataLossProtect ret_var = DataLossProtect_new(your_last_per_commitment_secret_arg_ref, my_current_per_commitment_point_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t DataLossProtect_clone_ptr(LDKDataLossProtect *NONNULL_PTR arg) {
	LDKDataLossProtect ret_var = DataLossProtect_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKDataLossProtect arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = DataLossProtect_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DataLossProtect_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKDataLossProtect orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKDataLossProtect ret_var = DataLossProtect_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelReestablish this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelReestablish_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelReestablish this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *ChannelReestablish_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelReestablish this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	ChannelReestablish_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1get_1next_1local_1commitment_1number(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelReestablish this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelReestablish_get_next_local_commitment_number(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1set_1next_1local_1commitment_1number(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelReestablish this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelReestablish_set_next_local_commitment_number(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1get_1next_1remote_1commitment_1number(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelReestablish this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelReestablish_get_next_remote_commitment_number(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1set_1next_1remote_1commitment_1number(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelReestablish this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelReestablish_set_next_remote_commitment_number(&this_ptr_conv, val);
}

static inline uintptr_t ChannelReestablish_clone_ptr(LDKChannelReestablish *NONNULL_PTR arg) {
	LDKChannelReestablish ret_var = ChannelReestablish_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelReestablish arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelReestablish_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelReestablish orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelReestablish ret_var = ChannelReestablish_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKAnnouncementSignatures this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	AnnouncementSignatures_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1get_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *AnnouncementSignatures_get_channel_id(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1set_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	AnnouncementSignatures_set_channel_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1get_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = AnnouncementSignatures_get_short_channel_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1set_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	AnnouncementSignatures_set_short_channel_id(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1get_1node_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, AnnouncementSignatures_get_node_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1set_1node_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	AnnouncementSignatures_set_node_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1get_1bitcoin_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, AnnouncementSignatures_get_bitcoin_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1set_1bitcoin_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKAnnouncementSignatures this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	AnnouncementSignatures_set_bitcoin_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1new(JNIEnv *env, jclass clz, int8_tArray channel_id_arg, int64_t short_channel_id_arg, int8_tArray node_signature_arg, int8_tArray bitcoin_signature_arg) {
	LDKThirtyTwoBytes channel_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, channel_id_arg) == 32);
	(*env)->GetByteArrayRegion(env, channel_id_arg, 0, 32, channel_id_arg_ref.data);
	LDKSignature node_signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, node_signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, node_signature_arg, 0, 64, node_signature_arg_ref.compact_form);
	LDKSignature bitcoin_signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, bitcoin_signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, bitcoin_signature_arg, 0, 64, bitcoin_signature_arg_ref.compact_form);
	LDKAnnouncementSignatures ret_var = AnnouncementSignatures_new(channel_id_arg_ref, short_channel_id_arg, node_signature_arg_ref, bitcoin_signature_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t AnnouncementSignatures_clone_ptr(LDKAnnouncementSignatures *NONNULL_PTR arg) {
	LDKAnnouncementSignatures ret_var = AnnouncementSignatures_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKAnnouncementSignatures arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = AnnouncementSignatures_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKAnnouncementSignatures orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKAnnouncementSignatures ret_var = AnnouncementSignatures_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetAddress_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKNetAddress this_ptr_conv = *(LDKNetAddress*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	NetAddress_free(this_ptr_conv);
}

static inline uintptr_t NetAddress_clone_ptr(LDKNetAddress *NONNULL_PTR arg) {
	LDKNetAddress *ret_copy = MALLOC(sizeof(LDKNetAddress), "LDKNetAddress");
	*ret_copy = NetAddress_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetAddress_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNetAddress* arg_conv = (LDKNetAddress*)arg;
	int64_t ret_val = NetAddress_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetAddress_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNetAddress* orig_conv = (LDKNetAddress*)orig;
	LDKNetAddress *ret_copy = MALLOC(sizeof(LDKNetAddress), "LDKNetAddress");
	*ret_copy = NetAddress_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetAddress_1ipv4(JNIEnv *env, jclass clz, int8_tArray addr, int16_t port) {
	LDKFourBytes addr_ref;
	CHECK((*env)->GetArrayLength(env, addr) == 4);
	(*env)->GetByteArrayRegion(env, addr, 0, 4, addr_ref.data);
	LDKNetAddress *ret_copy = MALLOC(sizeof(LDKNetAddress), "LDKNetAddress");
	*ret_copy = NetAddress_ipv4(addr_ref, port);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetAddress_1ipv6(JNIEnv *env, jclass clz, int8_tArray addr, int16_t port) {
	LDKSixteenBytes addr_ref;
	CHECK((*env)->GetArrayLength(env, addr) == 16);
	(*env)->GetByteArrayRegion(env, addr, 0, 16, addr_ref.data);
	LDKNetAddress *ret_copy = MALLOC(sizeof(LDKNetAddress), "LDKNetAddress");
	*ret_copy = NetAddress_ipv6(addr_ref, port);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetAddress_1onion_1v2(JNIEnv *env, jclass clz, int8_tArray a) {
	LDKTwelveBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 12);
	(*env)->GetByteArrayRegion(env, a, 0, 12, a_ref.data);
	LDKNetAddress *ret_copy = MALLOC(sizeof(LDKNetAddress), "LDKNetAddress");
	*ret_copy = NetAddress_onion_v2(a_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetAddress_1onion_1v3(JNIEnv *env, jclass clz, int8_tArray ed25519_pubkey, int16_t checksum, int8_t version, int16_t port) {
	LDKThirtyTwoBytes ed25519_pubkey_ref;
	CHECK((*env)->GetArrayLength(env, ed25519_pubkey) == 32);
	(*env)->GetByteArrayRegion(env, ed25519_pubkey, 0, 32, ed25519_pubkey_ref.data);
	LDKNetAddress *ret_copy = MALLOC(sizeof(LDKNetAddress), "LDKNetAddress");
	*ret_copy = NetAddress_onion_v3(ed25519_pubkey_ref, checksum, version, port);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NetAddress_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNetAddress* obj_conv = (LDKNetAddress*)obj;
	LDKCVec_u8Z ret_var = NetAddress_write(obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetAddress_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_NetAddressDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetAddressDecodeErrorZ), "LDKCResult_NetAddressDecodeErrorZ");
	*ret_conv = NetAddress_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUnsignedNodeAnnouncement this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UnsignedNodeAnnouncement_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1get_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeFeatures ret_var = UnsignedNodeAnnouncement_get_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1set_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = NodeFeatures_clone(&val_conv);
	UnsignedNodeAnnouncement_set_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1get_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = UnsignedNodeAnnouncement_get_timestamp(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1set_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedNodeAnnouncement_set_timestamp(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1get_1node_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, UnsignedNodeAnnouncement_get_node_id(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1set_1node_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	UnsignedNodeAnnouncement_set_node_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1get_1rgb(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 3);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 3, *UnsignedNodeAnnouncement_get_rgb(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1set_1rgb(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThreeBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 3);
	(*env)->GetByteArrayRegion(env, val, 0, 3, val_ref.data);
	UnsignedNodeAnnouncement_set_rgb(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1get_1alias(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UnsignedNodeAnnouncement_get_alias(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1set_1alias(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UnsignedNodeAnnouncement_set_alias(&this_ptr_conv, val_ref);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1set_1addresses(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKUnsignedNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_NetAddressZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKNetAddress), "LDKCVec_NetAddressZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t m = 0; m < val_constr.datalen; m++) {
		int64_t val_conv_12 = val_vals[m];
		void* val_conv_12_ptr = (void*)(((uintptr_t)val_conv_12) & ~1);
		CHECK_ACCESS(val_conv_12_ptr);
		LDKNetAddress val_conv_12_conv = *(LDKNetAddress*)(val_conv_12_ptr);
		val_conv_12_conv = NetAddress_clone((LDKNetAddress*)(((uintptr_t)val_conv_12) & ~1));
		val_constr.data[m] = val_conv_12_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	UnsignedNodeAnnouncement_set_addresses(&this_ptr_conv, val_constr);
}

static inline uintptr_t UnsignedNodeAnnouncement_clone_ptr(LDKUnsignedNodeAnnouncement *NONNULL_PTR arg) {
	LDKUnsignedNodeAnnouncement ret_var = UnsignedNodeAnnouncement_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUnsignedNodeAnnouncement arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UnsignedNodeAnnouncement_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUnsignedNodeAnnouncement orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUnsignedNodeAnnouncement ret_var = UnsignedNodeAnnouncement_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKNodeAnnouncement this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	NodeAnnouncement_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1get_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, NodeAnnouncement_get_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1set_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	NodeAnnouncement_set_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1get_1contents(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUnsignedNodeAnnouncement ret_var = NodeAnnouncement_get_contents(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1set_1contents(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKNodeAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUnsignedNodeAnnouncement val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = UnsignedNodeAnnouncement_clone(&val_conv);
	NodeAnnouncement_set_contents(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1new(JNIEnv *env, jclass clz, int8_tArray signature_arg, int64_t contents_arg) {
	LDKSignature signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, signature_arg, 0, 64, signature_arg_ref.compact_form);
	LDKUnsignedNodeAnnouncement contents_arg_conv;
	contents_arg_conv.inner = (void*)(contents_arg & (~1));
	contents_arg_conv.is_owned = (contents_arg & 1) || (contents_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(contents_arg_conv);
	contents_arg_conv = UnsignedNodeAnnouncement_clone(&contents_arg_conv);
	LDKNodeAnnouncement ret_var = NodeAnnouncement_new(signature_arg_ref, contents_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t NodeAnnouncement_clone_ptr(LDKNodeAnnouncement *NONNULL_PTR arg) {
	LDKNodeAnnouncement ret_var = NodeAnnouncement_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNodeAnnouncement arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = NodeAnnouncement_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNodeAnnouncement orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKNodeAnnouncement ret_var = NodeAnnouncement_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUnsignedChannelAnnouncement this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UnsignedChannelAnnouncement_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1get_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelFeatures ret_var = UnsignedChannelAnnouncement_get_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1set_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelFeatures_clone(&val_conv);
	UnsignedChannelAnnouncement_set_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UnsignedChannelAnnouncement_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UnsignedChannelAnnouncement_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1get_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UnsignedChannelAnnouncement_get_short_channel_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1set_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelAnnouncement_set_short_channel_id(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1get_1node_1id_11(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, UnsignedChannelAnnouncement_get_node_id_1(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1set_1node_1id_11(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	UnsignedChannelAnnouncement_set_node_id_1(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1get_1node_1id_12(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, UnsignedChannelAnnouncement_get_node_id_2(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1set_1node_1id_12(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	UnsignedChannelAnnouncement_set_node_id_2(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1get_1bitcoin_1key_11(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, UnsignedChannelAnnouncement_get_bitcoin_key_1(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1set_1bitcoin_1key_11(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	UnsignedChannelAnnouncement_set_bitcoin_key_1(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1get_1bitcoin_1key_12(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, UnsignedChannelAnnouncement_get_bitcoin_key_2(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1set_1bitcoin_1key_12(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	UnsignedChannelAnnouncement_set_bitcoin_key_2(&this_ptr_conv, val_ref);
}

static inline uintptr_t UnsignedChannelAnnouncement_clone_ptr(LDKUnsignedChannelAnnouncement *NONNULL_PTR arg) {
	LDKUnsignedChannelAnnouncement ret_var = UnsignedChannelAnnouncement_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUnsignedChannelAnnouncement arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UnsignedChannelAnnouncement_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUnsignedChannelAnnouncement orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUnsignedChannelAnnouncement ret_var = UnsignedChannelAnnouncement_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelAnnouncement this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelAnnouncement_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1get_1node_1signature_11(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, ChannelAnnouncement_get_node_signature_1(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1set_1node_1signature_11(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	ChannelAnnouncement_set_node_signature_1(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1get_1node_1signature_12(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, ChannelAnnouncement_get_node_signature_2(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1set_1node_1signature_12(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	ChannelAnnouncement_set_node_signature_2(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1get_1bitcoin_1signature_11(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, ChannelAnnouncement_get_bitcoin_signature_1(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1set_1bitcoin_1signature_11(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	ChannelAnnouncement_set_bitcoin_signature_1(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1get_1bitcoin_1signature_12(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, ChannelAnnouncement_get_bitcoin_signature_2(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1set_1bitcoin_1signature_12(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	ChannelAnnouncement_set_bitcoin_signature_2(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1get_1contents(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUnsignedChannelAnnouncement ret_var = ChannelAnnouncement_get_contents(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1set_1contents(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelAnnouncement this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUnsignedChannelAnnouncement val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = UnsignedChannelAnnouncement_clone(&val_conv);
	ChannelAnnouncement_set_contents(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1new(JNIEnv *env, jclass clz, int8_tArray node_signature_1_arg, int8_tArray node_signature_2_arg, int8_tArray bitcoin_signature_1_arg, int8_tArray bitcoin_signature_2_arg, int64_t contents_arg) {
	LDKSignature node_signature_1_arg_ref;
	CHECK((*env)->GetArrayLength(env, node_signature_1_arg) == 64);
	(*env)->GetByteArrayRegion(env, node_signature_1_arg, 0, 64, node_signature_1_arg_ref.compact_form);
	LDKSignature node_signature_2_arg_ref;
	CHECK((*env)->GetArrayLength(env, node_signature_2_arg) == 64);
	(*env)->GetByteArrayRegion(env, node_signature_2_arg, 0, 64, node_signature_2_arg_ref.compact_form);
	LDKSignature bitcoin_signature_1_arg_ref;
	CHECK((*env)->GetArrayLength(env, bitcoin_signature_1_arg) == 64);
	(*env)->GetByteArrayRegion(env, bitcoin_signature_1_arg, 0, 64, bitcoin_signature_1_arg_ref.compact_form);
	LDKSignature bitcoin_signature_2_arg_ref;
	CHECK((*env)->GetArrayLength(env, bitcoin_signature_2_arg) == 64);
	(*env)->GetByteArrayRegion(env, bitcoin_signature_2_arg, 0, 64, bitcoin_signature_2_arg_ref.compact_form);
	LDKUnsignedChannelAnnouncement contents_arg_conv;
	contents_arg_conv.inner = (void*)(contents_arg & (~1));
	contents_arg_conv.is_owned = (contents_arg & 1) || (contents_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(contents_arg_conv);
	contents_arg_conv = UnsignedChannelAnnouncement_clone(&contents_arg_conv);
	LDKChannelAnnouncement ret_var = ChannelAnnouncement_new(node_signature_1_arg_ref, node_signature_2_arg_ref, bitcoin_signature_1_arg_ref, bitcoin_signature_2_arg_ref, contents_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelAnnouncement_clone_ptr(LDKChannelAnnouncement *NONNULL_PTR arg) {
	LDKChannelAnnouncement ret_var = ChannelAnnouncement_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelAnnouncement arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelAnnouncement_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelAnnouncement orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelAnnouncement ret_var = ChannelAnnouncement_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKUnsignedChannelUpdate this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	UnsignedChannelUpdate_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *UnsignedChannelUpdate_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	UnsignedChannelUpdate_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UnsignedChannelUpdate_get_short_channel_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelUpdate_set_short_channel_id(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = UnsignedChannelUpdate_get_timestamp(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelUpdate_set_timestamp(&this_ptr_conv, val);
}

JNIEXPORT int8_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1flags(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_t ret_val = UnsignedChannelUpdate_get_flags(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1flags(JNIEnv *env, jclass clz, int64_t this_ptr, int8_t val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelUpdate_set_flags(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = UnsignedChannelUpdate_get_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelUpdate_set_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = UnsignedChannelUpdate_get_htlc_minimum_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelUpdate_set_htlc_minimum_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1fee_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = UnsignedChannelUpdate_get_fee_base_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1fee_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelUpdate_set_fee_base_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1get_1fee_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = UnsignedChannelUpdate_get_fee_proportional_millionths(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1set_1fee_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKUnsignedChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	UnsignedChannelUpdate_set_fee_proportional_millionths(&this_ptr_conv, val);
}

static inline uintptr_t UnsignedChannelUpdate_clone_ptr(LDKUnsignedChannelUpdate *NONNULL_PTR arg) {
	LDKUnsignedChannelUpdate ret_var = UnsignedChannelUpdate_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKUnsignedChannelUpdate arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = UnsignedChannelUpdate_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKUnsignedChannelUpdate orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKUnsignedChannelUpdate ret_var = UnsignedChannelUpdate_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelUpdate this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelUpdate_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1get_1signature(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, ChannelUpdate_get_signature(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1set_1signature(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	ChannelUpdate_set_signature(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1get_1contents(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUnsignedChannelUpdate ret_var = ChannelUpdate_get_contents(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1set_1contents(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUnsignedChannelUpdate val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = UnsignedChannelUpdate_clone(&val_conv);
	ChannelUpdate_set_contents(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1new(JNIEnv *env, jclass clz, int8_tArray signature_arg, int64_t contents_arg) {
	LDKSignature signature_arg_ref;
	CHECK((*env)->GetArrayLength(env, signature_arg) == 64);
	(*env)->GetByteArrayRegion(env, signature_arg, 0, 64, signature_arg_ref.compact_form);
	LDKUnsignedChannelUpdate contents_arg_conv;
	contents_arg_conv.inner = (void*)(contents_arg & (~1));
	contents_arg_conv.is_owned = (contents_arg & 1) || (contents_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(contents_arg_conv);
	contents_arg_conv = UnsignedChannelUpdate_clone(&contents_arg_conv);
	LDKChannelUpdate ret_var = ChannelUpdate_new(signature_arg_ref, contents_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelUpdate_clone_ptr(LDKChannelUpdate *NONNULL_PTR arg) {
	LDKChannelUpdate ret_var = ChannelUpdate_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelUpdate arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelUpdate_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelUpdate orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelUpdate ret_var = ChannelUpdate_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKQueryChannelRange this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	QueryChannelRange_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKQueryChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *QueryChannelRange_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKQueryChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	QueryChannelRange_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1get_1first_1blocknum(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKQueryChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = QueryChannelRange_get_first_blocknum(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1set_1first_1blocknum(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKQueryChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	QueryChannelRange_set_first_blocknum(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1get_1number_1of_1blocks(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKQueryChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = QueryChannelRange_get_number_of_blocks(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1set_1number_1of_1blocks(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKQueryChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	QueryChannelRange_set_number_of_blocks(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1new(JNIEnv *env, jclass clz, int8_tArray chain_hash_arg, int32_t first_blocknum_arg, int32_t number_of_blocks_arg) {
	LDKThirtyTwoBytes chain_hash_arg_ref;
	CHECK((*env)->GetArrayLength(env, chain_hash_arg) == 32);
	(*env)->GetByteArrayRegion(env, chain_hash_arg, 0, 32, chain_hash_arg_ref.data);
	LDKQueryChannelRange ret_var = QueryChannelRange_new(chain_hash_arg_ref, first_blocknum_arg, number_of_blocks_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t QueryChannelRange_clone_ptr(LDKQueryChannelRange *NONNULL_PTR arg) {
	LDKQueryChannelRange ret_var = QueryChannelRange_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKQueryChannelRange arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = QueryChannelRange_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKQueryChannelRange orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKQueryChannelRange ret_var = QueryChannelRange_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKReplyChannelRange this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ReplyChannelRange_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *ReplyChannelRange_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	ReplyChannelRange_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1get_1first_1blocknum(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = ReplyChannelRange_get_first_blocknum(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1set_1first_1blocknum(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ReplyChannelRange_set_first_blocknum(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1get_1number_1of_1blocks(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = ReplyChannelRange_get_number_of_blocks(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1set_1number_1of_1blocks(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ReplyChannelRange_set_number_of_blocks(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1get_1sync_1complete(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ReplyChannelRange_get_sync_complete(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1set_1sync_1complete(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ReplyChannelRange_set_sync_complete(&this_ptr_conv, val);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1set_1short_1channel_1ids(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKReplyChannelRange this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_u64Z val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(int64_t), "LDKCVec_u64Z Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t g = 0; g < val_constr.datalen; g++) {
		int64_t val_conv_6 = val_vals[g];
		val_constr.data[g] = val_conv_6;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	ReplyChannelRange_set_short_channel_ids(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1new(JNIEnv *env, jclass clz, int8_tArray chain_hash_arg, int32_t first_blocknum_arg, int32_t number_of_blocks_arg, jboolean sync_complete_arg, int64_tArray short_channel_ids_arg) {
	LDKThirtyTwoBytes chain_hash_arg_ref;
	CHECK((*env)->GetArrayLength(env, chain_hash_arg) == 32);
	(*env)->GetByteArrayRegion(env, chain_hash_arg, 0, 32, chain_hash_arg_ref.data);
	LDKCVec_u64Z short_channel_ids_arg_constr;
	short_channel_ids_arg_constr.datalen = (*env)->GetArrayLength(env, short_channel_ids_arg);
	if (short_channel_ids_arg_constr.datalen > 0)
		short_channel_ids_arg_constr.data = MALLOC(short_channel_ids_arg_constr.datalen * sizeof(int64_t), "LDKCVec_u64Z Elements");
	else
		short_channel_ids_arg_constr.data = NULL;
	int64_t* short_channel_ids_arg_vals = (*env)->GetLongArrayElements (env, short_channel_ids_arg, NULL);
	for (size_t g = 0; g < short_channel_ids_arg_constr.datalen; g++) {
		int64_t short_channel_ids_arg_conv_6 = short_channel_ids_arg_vals[g];
		short_channel_ids_arg_constr.data[g] = short_channel_ids_arg_conv_6;
	}
	(*env)->ReleaseLongArrayElements(env, short_channel_ids_arg, short_channel_ids_arg_vals, 0);
	LDKReplyChannelRange ret_var = ReplyChannelRange_new(chain_hash_arg_ref, first_blocknum_arg, number_of_blocks_arg, sync_complete_arg, short_channel_ids_arg_constr);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ReplyChannelRange_clone_ptr(LDKReplyChannelRange *NONNULL_PTR arg) {
	LDKReplyChannelRange ret_var = ReplyChannelRange_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKReplyChannelRange arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ReplyChannelRange_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKReplyChannelRange orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKReplyChannelRange ret_var = ReplyChannelRange_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKQueryShortChannelIds this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	QueryShortChannelIds_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKQueryShortChannelIds this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *QueryShortChannelIds_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKQueryShortChannelIds this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	QueryShortChannelIds_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1set_1short_1channel_1ids(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKQueryShortChannelIds this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_u64Z val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(int64_t), "LDKCVec_u64Z Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t g = 0; g < val_constr.datalen; g++) {
		int64_t val_conv_6 = val_vals[g];
		val_constr.data[g] = val_conv_6;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	QueryShortChannelIds_set_short_channel_ids(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1new(JNIEnv *env, jclass clz, int8_tArray chain_hash_arg, int64_tArray short_channel_ids_arg) {
	LDKThirtyTwoBytes chain_hash_arg_ref;
	CHECK((*env)->GetArrayLength(env, chain_hash_arg) == 32);
	(*env)->GetByteArrayRegion(env, chain_hash_arg, 0, 32, chain_hash_arg_ref.data);
	LDKCVec_u64Z short_channel_ids_arg_constr;
	short_channel_ids_arg_constr.datalen = (*env)->GetArrayLength(env, short_channel_ids_arg);
	if (short_channel_ids_arg_constr.datalen > 0)
		short_channel_ids_arg_constr.data = MALLOC(short_channel_ids_arg_constr.datalen * sizeof(int64_t), "LDKCVec_u64Z Elements");
	else
		short_channel_ids_arg_constr.data = NULL;
	int64_t* short_channel_ids_arg_vals = (*env)->GetLongArrayElements (env, short_channel_ids_arg, NULL);
	for (size_t g = 0; g < short_channel_ids_arg_constr.datalen; g++) {
		int64_t short_channel_ids_arg_conv_6 = short_channel_ids_arg_vals[g];
		short_channel_ids_arg_constr.data[g] = short_channel_ids_arg_conv_6;
	}
	(*env)->ReleaseLongArrayElements(env, short_channel_ids_arg, short_channel_ids_arg_vals, 0);
	LDKQueryShortChannelIds ret_var = QueryShortChannelIds_new(chain_hash_arg_ref, short_channel_ids_arg_constr);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t QueryShortChannelIds_clone_ptr(LDKQueryShortChannelIds *NONNULL_PTR arg) {
	LDKQueryShortChannelIds ret_var = QueryShortChannelIds_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKQueryShortChannelIds arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = QueryShortChannelIds_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKQueryShortChannelIds orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKQueryShortChannelIds ret_var = QueryShortChannelIds_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKReplyShortChannelIdsEnd this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ReplyShortChannelIdsEnd_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKReplyShortChannelIdsEnd this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *ReplyShortChannelIdsEnd_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKReplyShortChannelIdsEnd this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	ReplyShortChannelIdsEnd_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1get_1full_1information(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKReplyShortChannelIdsEnd this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ReplyShortChannelIdsEnd_get_full_information(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1set_1full_1information(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKReplyShortChannelIdsEnd this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ReplyShortChannelIdsEnd_set_full_information(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1new(JNIEnv *env, jclass clz, int8_tArray chain_hash_arg, jboolean full_information_arg) {
	LDKThirtyTwoBytes chain_hash_arg_ref;
	CHECK((*env)->GetArrayLength(env, chain_hash_arg) == 32);
	(*env)->GetByteArrayRegion(env, chain_hash_arg, 0, 32, chain_hash_arg_ref.data);
	LDKReplyShortChannelIdsEnd ret_var = ReplyShortChannelIdsEnd_new(chain_hash_arg_ref, full_information_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ReplyShortChannelIdsEnd_clone_ptr(LDKReplyShortChannelIdsEnd *NONNULL_PTR arg) {
	LDKReplyShortChannelIdsEnd ret_var = ReplyShortChannelIdsEnd_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKReplyShortChannelIdsEnd arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ReplyShortChannelIdsEnd_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKReplyShortChannelIdsEnd orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKReplyShortChannelIdsEnd ret_var = ReplyShortChannelIdsEnd_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKGossipTimestampFilter this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	GossipTimestampFilter_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1get_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKGossipTimestampFilter this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *GossipTimestampFilter_get_chain_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1set_1chain_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKGossipTimestampFilter this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	GossipTimestampFilter_set_chain_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1get_1first_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKGossipTimestampFilter this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = GossipTimestampFilter_get_first_timestamp(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1set_1first_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKGossipTimestampFilter this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	GossipTimestampFilter_set_first_timestamp(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1get_1timestamp_1range(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKGossipTimestampFilter this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = GossipTimestampFilter_get_timestamp_range(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1set_1timestamp_1range(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKGossipTimestampFilter this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	GossipTimestampFilter_set_timestamp_range(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1new(JNIEnv *env, jclass clz, int8_tArray chain_hash_arg, int32_t first_timestamp_arg, int32_t timestamp_range_arg) {
	LDKThirtyTwoBytes chain_hash_arg_ref;
	CHECK((*env)->GetArrayLength(env, chain_hash_arg) == 32);
	(*env)->GetByteArrayRegion(env, chain_hash_arg, 0, 32, chain_hash_arg_ref.data);
	LDKGossipTimestampFilter ret_var = GossipTimestampFilter_new(chain_hash_arg_ref, first_timestamp_arg, timestamp_range_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t GossipTimestampFilter_clone_ptr(LDKGossipTimestampFilter *NONNULL_PTR arg) {
	LDKGossipTimestampFilter ret_var = GossipTimestampFilter_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKGossipTimestampFilter arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = GossipTimestampFilter_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKGossipTimestampFilter orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKGossipTimestampFilter ret_var = GossipTimestampFilter_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ErrorAction_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKErrorAction this_ptr_conv = *(LDKErrorAction*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	ErrorAction_free(this_ptr_conv);
}

static inline uintptr_t ErrorAction_clone_ptr(LDKErrorAction *NONNULL_PTR arg) {
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKErrorAction* arg_conv = (LDKErrorAction*)arg;
	int64_t ret_val = ErrorAction_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKErrorAction* orig_conv = (LDKErrorAction*)orig;
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1disconnect_1peer(JNIEnv *env, jclass clz, int64_t msg) {
	LDKErrorMessage msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ErrorMessage_clone(&msg_conv);
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_disconnect_peer(msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1ignore_1error(JNIEnv *env, jclass clz) {
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_ignore_error();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1ignore_1and_1log(JNIEnv *env, jclass clz, jclass a) {
	LDKLevel a_conv = LDKLevel_from_java(env, a);
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_ignore_and_log(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1ignore_1duplicate_1gossip(JNIEnv *env, jclass clz) {
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_ignore_duplicate_gossip();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1send_1error_1message(JNIEnv *env, jclass clz, int64_t msg) {
	LDKErrorMessage msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ErrorMessage_clone(&msg_conv);
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_send_error_message(msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorAction_1send_1warning_1message(JNIEnv *env, jclass clz, int64_t msg, jclass log_level) {
	LDKWarningMessage msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = WarningMessage_clone(&msg_conv);
	LDKLevel log_level_conv = LDKLevel_from_java(env, log_level);
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = ErrorAction_send_warning_message(msg_conv, log_level_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_LightningError_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKLightningError this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	LightningError_free(this_obj_conv);
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_LightningError_1get_1err(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKLightningError this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr ret_str = LightningError_get_err(&this_ptr_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_LightningError_1set_1err(JNIEnv *env, jclass clz, int64_t this_ptr, jstring val) {
	LDKLightningError this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKStr val_conv = java_to_owned_str(env, val);
	LightningError_set_err(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LightningError_1get_1action(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKLightningError this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKErrorAction *ret_copy = MALLOC(sizeof(LDKErrorAction), "LDKErrorAction");
	*ret_copy = LightningError_get_action(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_LightningError_1set_1action(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKLightningError this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKErrorAction val_conv = *(LDKErrorAction*)(val_ptr);
	val_conv = ErrorAction_clone((LDKErrorAction*)(((uintptr_t)val) & ~1));
	LightningError_set_action(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LightningError_1new(JNIEnv *env, jclass clz, jstring err_arg, int64_t action_arg) {
	LDKStr err_arg_conv = java_to_owned_str(env, err_arg);
	void* action_arg_ptr = (void*)(((uintptr_t)action_arg) & ~1);
	CHECK_ACCESS(action_arg_ptr);
	LDKErrorAction action_arg_conv = *(LDKErrorAction*)(action_arg_ptr);
	action_arg_conv = ErrorAction_clone((LDKErrorAction*)(((uintptr_t)action_arg) & ~1));
	LDKLightningError ret_var = LightningError_new(err_arg_conv, action_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t LightningError_clone_ptr(LDKLightningError *NONNULL_PTR arg) {
	LDKLightningError ret_var = LightningError_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LightningError_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKLightningError arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = LightningError_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_LightningError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKLightningError orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKLightningError ret_var = LightningError_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKCommitmentUpdate this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	CommitmentUpdate_free(this_obj_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1get_1update_1add_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateAddHTLCZ ret_var = CommitmentUpdate_get_update_add_htlcs(&this_ptr_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t p = 0; p < ret_var.datalen; p++) {
		LDKUpdateAddHTLC ret_conv_15_var = ret_var.data[p];
		uintptr_t ret_conv_15_ref = 0;
		CHECK((((uintptr_t)ret_conv_15_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_15_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_15_var);
		ret_conv_15_ref = (uintptr_t)ret_conv_15_var.inner;
		if (ret_conv_15_var.is_owned) {
			ret_conv_15_ref |= 1;
		}
		ret_arr_ptr[p] = ret_conv_15_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1set_1update_1add_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateAddHTLCZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKUpdateAddHTLC), "LDKCVec_UpdateAddHTLCZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t p = 0; p < val_constr.datalen; p++) {
		int64_t val_conv_15 = val_vals[p];
		LDKUpdateAddHTLC val_conv_15_conv;
		val_conv_15_conv.inner = (void*)(val_conv_15 & (~1));
		val_conv_15_conv.is_owned = (val_conv_15 & 1) || (val_conv_15 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_15_conv);
		val_conv_15_conv = UpdateAddHTLC_clone(&val_conv_15_conv);
		val_constr.data[p] = val_conv_15_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	CommitmentUpdate_set_update_add_htlcs(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1get_1update_1fulfill_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateFulfillHTLCZ ret_var = CommitmentUpdate_get_update_fulfill_htlcs(&this_ptr_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t t = 0; t < ret_var.datalen; t++) {
		LDKUpdateFulfillHTLC ret_conv_19_var = ret_var.data[t];
		uintptr_t ret_conv_19_ref = 0;
		CHECK((((uintptr_t)ret_conv_19_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_19_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_19_var);
		ret_conv_19_ref = (uintptr_t)ret_conv_19_var.inner;
		if (ret_conv_19_var.is_owned) {
			ret_conv_19_ref |= 1;
		}
		ret_arr_ptr[t] = ret_conv_19_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1set_1update_1fulfill_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateFulfillHTLCZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKUpdateFulfillHTLC), "LDKCVec_UpdateFulfillHTLCZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t t = 0; t < val_constr.datalen; t++) {
		int64_t val_conv_19 = val_vals[t];
		LDKUpdateFulfillHTLC val_conv_19_conv;
		val_conv_19_conv.inner = (void*)(val_conv_19 & (~1));
		val_conv_19_conv.is_owned = (val_conv_19 & 1) || (val_conv_19 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_19_conv);
		val_conv_19_conv = UpdateFulfillHTLC_clone(&val_conv_19_conv);
		val_constr.data[t] = val_conv_19_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	CommitmentUpdate_set_update_fulfill_htlcs(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1get_1update_1fail_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateFailHTLCZ ret_var = CommitmentUpdate_get_update_fail_htlcs(&this_ptr_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t q = 0; q < ret_var.datalen; q++) {
		LDKUpdateFailHTLC ret_conv_16_var = ret_var.data[q];
		uintptr_t ret_conv_16_ref = 0;
		CHECK((((uintptr_t)ret_conv_16_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_16_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_16_var);
		ret_conv_16_ref = (uintptr_t)ret_conv_16_var.inner;
		if (ret_conv_16_var.is_owned) {
			ret_conv_16_ref |= 1;
		}
		ret_arr_ptr[q] = ret_conv_16_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1set_1update_1fail_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateFailHTLCZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKUpdateFailHTLC), "LDKCVec_UpdateFailHTLCZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t q = 0; q < val_constr.datalen; q++) {
		int64_t val_conv_16 = val_vals[q];
		LDKUpdateFailHTLC val_conv_16_conv;
		val_conv_16_conv.inner = (void*)(val_conv_16 & (~1));
		val_conv_16_conv.is_owned = (val_conv_16 & 1) || (val_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_16_conv);
		val_conv_16_conv = UpdateFailHTLC_clone(&val_conv_16_conv);
		val_constr.data[q] = val_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	CommitmentUpdate_set_update_fail_htlcs(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1get_1update_1fail_1malformed_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateFailMalformedHTLCZ ret_var = CommitmentUpdate_get_update_fail_malformed_htlcs(&this_ptr_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t z = 0; z < ret_var.datalen; z++) {
		LDKUpdateFailMalformedHTLC ret_conv_25_var = ret_var.data[z];
		uintptr_t ret_conv_25_ref = 0;
		CHECK((((uintptr_t)ret_conv_25_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_25_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_25_var);
		ret_conv_25_ref = (uintptr_t)ret_conv_25_var.inner;
		if (ret_conv_25_var.is_owned) {
			ret_conv_25_ref |= 1;
		}
		ret_arr_ptr[z] = ret_conv_25_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1set_1update_1fail_1malformed_1htlcs(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_UpdateFailMalformedHTLCZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKUpdateFailMalformedHTLC), "LDKCVec_UpdateFailMalformedHTLCZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t z = 0; z < val_constr.datalen; z++) {
		int64_t val_conv_25 = val_vals[z];
		LDKUpdateFailMalformedHTLC val_conv_25_conv;
		val_conv_25_conv.inner = (void*)(val_conv_25 & (~1));
		val_conv_25_conv.is_owned = (val_conv_25 & 1) || (val_conv_25 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_25_conv);
		val_conv_25_conv = UpdateFailMalformedHTLC_clone(&val_conv_25_conv);
		val_constr.data[z] = val_conv_25_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	CommitmentUpdate_set_update_fail_malformed_htlcs(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1get_1update_1fee(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUpdateFee ret_var = CommitmentUpdate_get_update_fee(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1set_1update_1fee(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKUpdateFee val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = UpdateFee_clone(&val_conv);
	CommitmentUpdate_set_update_fee(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1get_1commitment_1signed(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCommitmentSigned ret_var = CommitmentUpdate_get_commitment_signed(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1set_1commitment_1signed(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKCommitmentUpdate this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCommitmentSigned val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = CommitmentSigned_clone(&val_conv);
	CommitmentUpdate_set_commitment_signed(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1new(JNIEnv *env, jclass clz, int64_tArray update_add_htlcs_arg, int64_tArray update_fulfill_htlcs_arg, int64_tArray update_fail_htlcs_arg, int64_tArray update_fail_malformed_htlcs_arg, int64_t update_fee_arg, int64_t commitment_signed_arg) {
	LDKCVec_UpdateAddHTLCZ update_add_htlcs_arg_constr;
	update_add_htlcs_arg_constr.datalen = (*env)->GetArrayLength(env, update_add_htlcs_arg);
	if (update_add_htlcs_arg_constr.datalen > 0)
		update_add_htlcs_arg_constr.data = MALLOC(update_add_htlcs_arg_constr.datalen * sizeof(LDKUpdateAddHTLC), "LDKCVec_UpdateAddHTLCZ Elements");
	else
		update_add_htlcs_arg_constr.data = NULL;
	int64_t* update_add_htlcs_arg_vals = (*env)->GetLongArrayElements (env, update_add_htlcs_arg, NULL);
	for (size_t p = 0; p < update_add_htlcs_arg_constr.datalen; p++) {
		int64_t update_add_htlcs_arg_conv_15 = update_add_htlcs_arg_vals[p];
		LDKUpdateAddHTLC update_add_htlcs_arg_conv_15_conv;
		update_add_htlcs_arg_conv_15_conv.inner = (void*)(update_add_htlcs_arg_conv_15 & (~1));
		update_add_htlcs_arg_conv_15_conv.is_owned = (update_add_htlcs_arg_conv_15 & 1) || (update_add_htlcs_arg_conv_15 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(update_add_htlcs_arg_conv_15_conv);
		update_add_htlcs_arg_conv_15_conv = UpdateAddHTLC_clone(&update_add_htlcs_arg_conv_15_conv);
		update_add_htlcs_arg_constr.data[p] = update_add_htlcs_arg_conv_15_conv;
	}
	(*env)->ReleaseLongArrayElements(env, update_add_htlcs_arg, update_add_htlcs_arg_vals, 0);
	LDKCVec_UpdateFulfillHTLCZ update_fulfill_htlcs_arg_constr;
	update_fulfill_htlcs_arg_constr.datalen = (*env)->GetArrayLength(env, update_fulfill_htlcs_arg);
	if (update_fulfill_htlcs_arg_constr.datalen > 0)
		update_fulfill_htlcs_arg_constr.data = MALLOC(update_fulfill_htlcs_arg_constr.datalen * sizeof(LDKUpdateFulfillHTLC), "LDKCVec_UpdateFulfillHTLCZ Elements");
	else
		update_fulfill_htlcs_arg_constr.data = NULL;
	int64_t* update_fulfill_htlcs_arg_vals = (*env)->GetLongArrayElements (env, update_fulfill_htlcs_arg, NULL);
	for (size_t t = 0; t < update_fulfill_htlcs_arg_constr.datalen; t++) {
		int64_t update_fulfill_htlcs_arg_conv_19 = update_fulfill_htlcs_arg_vals[t];
		LDKUpdateFulfillHTLC update_fulfill_htlcs_arg_conv_19_conv;
		update_fulfill_htlcs_arg_conv_19_conv.inner = (void*)(update_fulfill_htlcs_arg_conv_19 & (~1));
		update_fulfill_htlcs_arg_conv_19_conv.is_owned = (update_fulfill_htlcs_arg_conv_19 & 1) || (update_fulfill_htlcs_arg_conv_19 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(update_fulfill_htlcs_arg_conv_19_conv);
		update_fulfill_htlcs_arg_conv_19_conv = UpdateFulfillHTLC_clone(&update_fulfill_htlcs_arg_conv_19_conv);
		update_fulfill_htlcs_arg_constr.data[t] = update_fulfill_htlcs_arg_conv_19_conv;
	}
	(*env)->ReleaseLongArrayElements(env, update_fulfill_htlcs_arg, update_fulfill_htlcs_arg_vals, 0);
	LDKCVec_UpdateFailHTLCZ update_fail_htlcs_arg_constr;
	update_fail_htlcs_arg_constr.datalen = (*env)->GetArrayLength(env, update_fail_htlcs_arg);
	if (update_fail_htlcs_arg_constr.datalen > 0)
		update_fail_htlcs_arg_constr.data = MALLOC(update_fail_htlcs_arg_constr.datalen * sizeof(LDKUpdateFailHTLC), "LDKCVec_UpdateFailHTLCZ Elements");
	else
		update_fail_htlcs_arg_constr.data = NULL;
	int64_t* update_fail_htlcs_arg_vals = (*env)->GetLongArrayElements (env, update_fail_htlcs_arg, NULL);
	for (size_t q = 0; q < update_fail_htlcs_arg_constr.datalen; q++) {
		int64_t update_fail_htlcs_arg_conv_16 = update_fail_htlcs_arg_vals[q];
		LDKUpdateFailHTLC update_fail_htlcs_arg_conv_16_conv;
		update_fail_htlcs_arg_conv_16_conv.inner = (void*)(update_fail_htlcs_arg_conv_16 & (~1));
		update_fail_htlcs_arg_conv_16_conv.is_owned = (update_fail_htlcs_arg_conv_16 & 1) || (update_fail_htlcs_arg_conv_16 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(update_fail_htlcs_arg_conv_16_conv);
		update_fail_htlcs_arg_conv_16_conv = UpdateFailHTLC_clone(&update_fail_htlcs_arg_conv_16_conv);
		update_fail_htlcs_arg_constr.data[q] = update_fail_htlcs_arg_conv_16_conv;
	}
	(*env)->ReleaseLongArrayElements(env, update_fail_htlcs_arg, update_fail_htlcs_arg_vals, 0);
	LDKCVec_UpdateFailMalformedHTLCZ update_fail_malformed_htlcs_arg_constr;
	update_fail_malformed_htlcs_arg_constr.datalen = (*env)->GetArrayLength(env, update_fail_malformed_htlcs_arg);
	if (update_fail_malformed_htlcs_arg_constr.datalen > 0)
		update_fail_malformed_htlcs_arg_constr.data = MALLOC(update_fail_malformed_htlcs_arg_constr.datalen * sizeof(LDKUpdateFailMalformedHTLC), "LDKCVec_UpdateFailMalformedHTLCZ Elements");
	else
		update_fail_malformed_htlcs_arg_constr.data = NULL;
	int64_t* update_fail_malformed_htlcs_arg_vals = (*env)->GetLongArrayElements (env, update_fail_malformed_htlcs_arg, NULL);
	for (size_t z = 0; z < update_fail_malformed_htlcs_arg_constr.datalen; z++) {
		int64_t update_fail_malformed_htlcs_arg_conv_25 = update_fail_malformed_htlcs_arg_vals[z];
		LDKUpdateFailMalformedHTLC update_fail_malformed_htlcs_arg_conv_25_conv;
		update_fail_malformed_htlcs_arg_conv_25_conv.inner = (void*)(update_fail_malformed_htlcs_arg_conv_25 & (~1));
		update_fail_malformed_htlcs_arg_conv_25_conv.is_owned = (update_fail_malformed_htlcs_arg_conv_25 & 1) || (update_fail_malformed_htlcs_arg_conv_25 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(update_fail_malformed_htlcs_arg_conv_25_conv);
		update_fail_malformed_htlcs_arg_conv_25_conv = UpdateFailMalformedHTLC_clone(&update_fail_malformed_htlcs_arg_conv_25_conv);
		update_fail_malformed_htlcs_arg_constr.data[z] = update_fail_malformed_htlcs_arg_conv_25_conv;
	}
	(*env)->ReleaseLongArrayElements(env, update_fail_malformed_htlcs_arg, update_fail_malformed_htlcs_arg_vals, 0);
	LDKUpdateFee update_fee_arg_conv;
	update_fee_arg_conv.inner = (void*)(update_fee_arg & (~1));
	update_fee_arg_conv.is_owned = (update_fee_arg & 1) || (update_fee_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(update_fee_arg_conv);
	update_fee_arg_conv = UpdateFee_clone(&update_fee_arg_conv);
	LDKCommitmentSigned commitment_signed_arg_conv;
	commitment_signed_arg_conv.inner = (void*)(commitment_signed_arg & (~1));
	commitment_signed_arg_conv.is_owned = (commitment_signed_arg & 1) || (commitment_signed_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(commitment_signed_arg_conv);
	commitment_signed_arg_conv = CommitmentSigned_clone(&commitment_signed_arg_conv);
	LDKCommitmentUpdate ret_var = CommitmentUpdate_new(update_add_htlcs_arg_constr, update_fulfill_htlcs_arg_constr, update_fail_htlcs_arg_constr, update_fail_malformed_htlcs_arg_constr, update_fee_arg_conv, commitment_signed_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t CommitmentUpdate_clone_ptr(LDKCommitmentUpdate *NONNULL_PTR arg) {
	LDKCommitmentUpdate ret_var = CommitmentUpdate_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCommitmentUpdate arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = CommitmentUpdate_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentUpdate_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCommitmentUpdate orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKCommitmentUpdate ret_var = CommitmentUpdate_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelMessageHandler_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKChannelMessageHandler this_ptr_conv = *(LDKChannelMessageHandler*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	ChannelMessageHandler_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RoutingMessageHandler_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKRoutingMessageHandler this_ptr_conv = *(LDKRoutingMessageHandler*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	RoutingMessageHandler_free(this_ptr_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKAcceptChannel obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = AcceptChannel_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AcceptChannel_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_AcceptChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AcceptChannelDecodeErrorZ), "LDKCResult_AcceptChannelDecodeErrorZ");
	*ret_conv = AcceptChannel_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKAnnouncementSignatures obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = AnnouncementSignatures_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_AnnouncementSignatures_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_AnnouncementSignaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_AnnouncementSignaturesDecodeErrorZ), "LDKCResult_AnnouncementSignaturesDecodeErrorZ");
	*ret_conv = AnnouncementSignatures_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelReestablish obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelReestablish_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelReestablish_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelReestablishDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelReestablishDecodeErrorZ), "LDKCResult_ChannelReestablishDecodeErrorZ");
	*ret_conv = ChannelReestablish_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKClosingSigned obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ClosingSigned_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSigned_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ClosingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedDecodeErrorZ), "LDKCResult_ClosingSignedDecodeErrorZ");
	*ret_conv = ClosingSigned_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKClosingSignedFeeRange obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ClosingSignedFeeRange_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingSignedFeeRange_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ClosingSignedFeeRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ), "LDKCResult_ClosingSignedFeeRangeDecodeErrorZ");
	*ret_conv = ClosingSignedFeeRange_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKCommitmentSigned obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = CommitmentSigned_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentSigned_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_CommitmentSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentSignedDecodeErrorZ), "LDKCResult_CommitmentSignedDecodeErrorZ");
	*ret_conv = CommitmentSigned_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingCreated_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKFundingCreated obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = FundingCreated_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingCreated_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_FundingCreatedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingCreatedDecodeErrorZ), "LDKCResult_FundingCreatedDecodeErrorZ");
	*ret_conv = FundingCreated_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingSigned_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKFundingSigned obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = FundingSigned_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingSigned_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_FundingSignedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingSignedDecodeErrorZ), "LDKCResult_FundingSignedDecodeErrorZ");
	*ret_conv = FundingSigned_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FundingLocked_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKFundingLocked obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = FundingLocked_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FundingLocked_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_FundingLockedDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FundingLockedDecodeErrorZ), "LDKCResult_FundingLockedDecodeErrorZ");
	*ret_conv = FundingLocked_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Init_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKInit obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = Init_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Init_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_InitDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitDecodeErrorZ), "LDKCResult_InitDecodeErrorZ");
	*ret_conv = Init_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_OpenChannel_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKOpenChannel obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = OpenChannel_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_OpenChannel_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_OpenChannelDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_OpenChannelDecodeErrorZ), "LDKCResult_OpenChannelDecodeErrorZ");
	*ret_conv = OpenChannel_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKRevokeAndACK obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = RevokeAndACK_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RevokeAndACK_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_RevokeAndACKDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RevokeAndACKDecodeErrorZ), "LDKCResult_RevokeAndACKDecodeErrorZ");
	*ret_conv = RevokeAndACK_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Shutdown_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKShutdown obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = Shutdown_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Shutdown_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ShutdownDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownDecodeErrorZ), "LDKCResult_ShutdownDecodeErrorZ");
	*ret_conv = Shutdown_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUpdateFailHTLC obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UpdateFailHTLC_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailHTLC_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UpdateFailHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailHTLCDecodeErrorZ), "LDKCResult_UpdateFailHTLCDecodeErrorZ");
	*ret_conv = UpdateFailHTLC_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUpdateFailMalformedHTLC obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UpdateFailMalformedHTLC_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFailMalformedHTLC_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ), "LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ");
	*ret_conv = UpdateFailMalformedHTLC_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFee_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUpdateFee obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UpdateFee_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFee_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UpdateFeeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFeeDecodeErrorZ), "LDKCResult_UpdateFeeDecodeErrorZ");
	*ret_conv = UpdateFee_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUpdateFulfillHTLC obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UpdateFulfillHTLC_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateFulfillHTLC_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UpdateFulfillHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateFulfillHTLCDecodeErrorZ), "LDKCResult_UpdateFulfillHTLCDecodeErrorZ");
	*ret_conv = UpdateFulfillHTLC_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUpdateAddHTLC obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UpdateAddHTLC_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UpdateAddHTLC_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UpdateAddHTLCDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UpdateAddHTLCDecodeErrorZ), "LDKCResult_UpdateAddHTLCDecodeErrorZ");
	*ret_conv = UpdateAddHTLC_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Ping_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKPing obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = Ping_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Ping_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_PingDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PingDecodeErrorZ), "LDKCResult_PingDecodeErrorZ");
	*ret_conv = Ping_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Pong_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKPong obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = Pong_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Pong_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_PongDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PongDecodeErrorZ), "LDKCResult_PongDecodeErrorZ");
	*ret_conv = Pong_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUnsignedChannelAnnouncement obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UnsignedChannelAnnouncement_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelAnnouncement_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ), "LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ");
	*ret_conv = UnsignedChannelAnnouncement_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelAnnouncement obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelAnnouncement_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelAnnouncement_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelAnnouncementDecodeErrorZ), "LDKCResult_ChannelAnnouncementDecodeErrorZ");
	*ret_conv = ChannelAnnouncement_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUnsignedChannelUpdate obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UnsignedChannelUpdate_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedChannelUpdate_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UnsignedChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedChannelUpdateDecodeErrorZ), "LDKCResult_UnsignedChannelUpdateDecodeErrorZ");
	*ret_conv = UnsignedChannelUpdate_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelUpdate obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelUpdate_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdate_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelUpdateDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateDecodeErrorZ), "LDKCResult_ChannelUpdateDecodeErrorZ");
	*ret_conv = ChannelUpdate_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKErrorMessage obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ErrorMessage_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErrorMessage_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ErrorMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ErrorMessageDecodeErrorZ), "LDKCResult_ErrorMessageDecodeErrorZ");
	*ret_conv = ErrorMessage_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_WarningMessage_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKWarningMessage obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = WarningMessage_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_WarningMessage_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_WarningMessageDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_WarningMessageDecodeErrorZ), "LDKCResult_WarningMessageDecodeErrorZ");
	*ret_conv = WarningMessage_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKUnsignedNodeAnnouncement obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = UnsignedNodeAnnouncement_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_UnsignedNodeAnnouncement_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ), "LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ");
	*ret_conv = UnsignedNodeAnnouncement_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNodeAnnouncement obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = NodeAnnouncement_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncement_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_NodeAnnouncementDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementDecodeErrorZ), "LDKCResult_NodeAnnouncementDecodeErrorZ");
	*ret_conv = NodeAnnouncement_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_QueryShortChannelIdsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryShortChannelIdsDecodeErrorZ), "LDKCResult_QueryShortChannelIdsDecodeErrorZ");
	*ret_conv = QueryShortChannelIds_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_QueryShortChannelIds_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKQueryShortChannelIds obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = QueryShortChannelIds_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKReplyShortChannelIdsEnd obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ReplyShortChannelIdsEnd_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyShortChannelIdsEnd_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ), "LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ");
	*ret_conv = ReplyShortChannelIdsEnd_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1end_1blocknum(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKQueryChannelRange this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int32_t ret_val = QueryChannelRange_end_blocknum(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKQueryChannelRange obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = QueryChannelRange_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_QueryChannelRange_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_QueryChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_QueryChannelRangeDecodeErrorZ), "LDKCResult_QueryChannelRangeDecodeErrorZ");
	*ret_conv = QueryChannelRange_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ReplyChannelRangeDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ReplyChannelRangeDecodeErrorZ), "LDKCResult_ReplyChannelRangeDecodeErrorZ");
	*ret_conv = ReplyChannelRange_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ReplyChannelRange_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKReplyChannelRange obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ReplyChannelRange_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKGossipTimestampFilter obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = GossipTimestampFilter_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_GossipTimestampFilter_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_GossipTimestampFilterDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_GossipTimestampFilterDecodeErrorZ), "LDKCResult_GossipTimestampFilterDecodeErrorZ");
	*ret_conv = GossipTimestampFilter_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CustomMessageHandler_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKCustomMessageHandler this_ptr_conv = *(LDKCustomMessageHandler*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	CustomMessageHandler_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_IgnoringMessageHandler_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKIgnoringMessageHandler this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	IgnoringMessageHandler_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_IgnoringMessageHandler_1new(JNIEnv *env, jclass clz) {
	LDKIgnoringMessageHandler ret_var = IgnoringMessageHandler_new();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_IgnoringMessageHandler_1as_1MessageSendEventsProvider(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKIgnoringMessageHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKMessageSendEventsProvider* ret_ret = MALLOC(sizeof(LDKMessageSendEventsProvider), "LDKMessageSendEventsProvider");
	*ret_ret = IgnoringMessageHandler_as_MessageSendEventsProvider(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_IgnoringMessageHandler_1as_1RoutingMessageHandler(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKIgnoringMessageHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKRoutingMessageHandler* ret_ret = MALLOC(sizeof(LDKRoutingMessageHandler), "LDKRoutingMessageHandler");
	*ret_ret = IgnoringMessageHandler_as_RoutingMessageHandler(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_IgnoringMessageHandler_1as_1CustomMessageReader(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKIgnoringMessageHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCustomMessageReader* ret_ret = MALLOC(sizeof(LDKCustomMessageReader), "LDKCustomMessageReader");
	*ret_ret = IgnoringMessageHandler_as_CustomMessageReader(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_IgnoringMessageHandler_1as_1CustomMessageHandler(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKIgnoringMessageHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCustomMessageHandler* ret_ret = MALLOC(sizeof(LDKCustomMessageHandler), "LDKCustomMessageHandler");
	*ret_ret = IgnoringMessageHandler_as_CustomMessageHandler(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ErroringMessageHandler_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKErroringMessageHandler this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ErroringMessageHandler_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErroringMessageHandler_1new(JNIEnv *env, jclass clz) {
	LDKErroringMessageHandler ret_var = ErroringMessageHandler_new();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErroringMessageHandler_1as_1MessageSendEventsProvider(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKErroringMessageHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKMessageSendEventsProvider* ret_ret = MALLOC(sizeof(LDKMessageSendEventsProvider), "LDKMessageSendEventsProvider");
	*ret_ret = ErroringMessageHandler_as_MessageSendEventsProvider(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ErroringMessageHandler_1as_1ChannelMessageHandler(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKErroringMessageHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelMessageHandler* ret_ret = MALLOC(sizeof(LDKChannelMessageHandler), "LDKChannelMessageHandler");
	*ret_ret = ErroringMessageHandler_as_ChannelMessageHandler(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MessageHandler_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKMessageHandler this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	MessageHandler_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageHandler_1get_1chan_1handler(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKMessageHandler this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_ret = ((uintptr_t)MessageHandler_get_chan_handler(&this_ptr_conv)) | 1;
	return ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MessageHandler_1set_1chan_1handler(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKMessageHandler this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKChannelMessageHandler val_conv = *(LDKChannelMessageHandler*)(val_ptr);
	if (val_conv.free == LDKChannelMessageHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKChannelMessageHandler_JCalls_cloned(&val_conv);
	}
	MessageHandler_set_chan_handler(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageHandler_1get_1route_1handler(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKMessageHandler this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	// WARNING: This object doesn't live past this scope, needs clone!
	uintptr_t ret_ret = ((uintptr_t)MessageHandler_get_route_handler(&this_ptr_conv)) | 1;
	return ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MessageHandler_1set_1route_1handler(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKMessageHandler this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKRoutingMessageHandler val_conv = *(LDKRoutingMessageHandler*)(val_ptr);
	if (val_conv.free == LDKRoutingMessageHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKRoutingMessageHandler_JCalls_cloned(&val_conv);
	}
	MessageHandler_set_route_handler(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MessageHandler_1new(JNIEnv *env, jclass clz, int64_t chan_handler_arg, int64_t route_handler_arg) {
	void* chan_handler_arg_ptr = (void*)(((uintptr_t)chan_handler_arg) & ~1);
	CHECK_ACCESS(chan_handler_arg_ptr);
	LDKChannelMessageHandler chan_handler_arg_conv = *(LDKChannelMessageHandler*)(chan_handler_arg_ptr);
	if (chan_handler_arg_conv.free == LDKChannelMessageHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKChannelMessageHandler_JCalls_cloned(&chan_handler_arg_conv);
	}
	void* route_handler_arg_ptr = (void*)(((uintptr_t)route_handler_arg) & ~1);
	CHECK_ACCESS(route_handler_arg_ptr);
	LDKRoutingMessageHandler route_handler_arg_conv = *(LDKRoutingMessageHandler*)(route_handler_arg_ptr);
	if (route_handler_arg_conv.free == LDKRoutingMessageHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKRoutingMessageHandler_JCalls_cloned(&route_handler_arg_conv);
	}
	LDKMessageHandler ret_var = MessageHandler_new(chan_handler_arg_conv, route_handler_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t SocketDescriptor_clone_ptr(LDKSocketDescriptor *NONNULL_PTR arg) {
	LDKSocketDescriptor* ret_ret = MALLOC(sizeof(LDKSocketDescriptor), "LDKSocketDescriptor");
	*ret_ret = SocketDescriptor_clone(arg);
	return (uintptr_t)ret_ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SocketDescriptor_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	void* arg_ptr = (void*)(((uintptr_t)arg) & ~1);
	if (!(arg & 1)) { CHECK_ACCESS(arg_ptr); }
	LDKSocketDescriptor* arg_conv = (LDKSocketDescriptor*)arg_ptr;
	int64_t ret_val = SocketDescriptor_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SocketDescriptor_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	void* orig_ptr = (void*)(((uintptr_t)orig) & ~1);
	if (!(orig & 1)) { CHECK_ACCESS(orig_ptr); }
	LDKSocketDescriptor* orig_conv = (LDKSocketDescriptor*)orig_ptr;
	LDKSocketDescriptor* ret_ret = MALLOC(sizeof(LDKSocketDescriptor), "LDKSocketDescriptor");
	*ret_ret = SocketDescriptor_clone(orig_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_SocketDescriptor_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKSocketDescriptor this_ptr_conv = *(LDKSocketDescriptor*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	SocketDescriptor_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerHandleError_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPeerHandleError this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PeerHandleError_free(this_obj_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_PeerHandleError_1get_1no_1connection_1possible(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPeerHandleError this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = PeerHandleError_get_no_connection_possible(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerHandleError_1set_1no_1connection_1possible(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKPeerHandleError this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	PeerHandleError_set_no_connection_possible(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerHandleError_1new(JNIEnv *env, jclass clz, jboolean no_connection_possible_arg) {
	LDKPeerHandleError ret_var = PeerHandleError_new(no_connection_possible_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t PeerHandleError_clone_ptr(LDKPeerHandleError *NONNULL_PTR arg) {
	LDKPeerHandleError ret_var = PeerHandleError_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerHandleError_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPeerHandleError arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = PeerHandleError_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerHandleError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPeerHandleError orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPeerHandleError ret_var = PeerHandleError_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerManager_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPeerManager this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PeerManager_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerManager_1new(JNIEnv *env, jclass clz, int64_t message_handler, int8_tArray our_node_secret, int8_tArray ephemeral_random_data, int64_t logger, int64_t custom_message_handler) {
	LDKMessageHandler message_handler_conv;
	message_handler_conv.inner = (void*)(message_handler & (~1));
	message_handler_conv.is_owned = (message_handler & 1) || (message_handler == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(message_handler_conv);
	// WARNING: we need a move here but no clone is available for LDKMessageHandler
	LDKSecretKey our_node_secret_ref;
	CHECK((*env)->GetArrayLength(env, our_node_secret) == 32);
	(*env)->GetByteArrayRegion(env, our_node_secret, 0, 32, our_node_secret_ref.bytes);
	unsigned char ephemeral_random_data_arr[32];
	CHECK((*env)->GetArrayLength(env, ephemeral_random_data) == 32);
	(*env)->GetByteArrayRegion(env, ephemeral_random_data, 0, 32, ephemeral_random_data_arr);
	unsigned char (*ephemeral_random_data_ref)[32] = &ephemeral_random_data_arr;
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	void* custom_message_handler_ptr = (void*)(((uintptr_t)custom_message_handler) & ~1);
	CHECK_ACCESS(custom_message_handler_ptr);
	LDKCustomMessageHandler custom_message_handler_conv = *(LDKCustomMessageHandler*)(custom_message_handler_ptr);
	if (custom_message_handler_conv.free == LDKCustomMessageHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKCustomMessageHandler_JCalls_cloned(&custom_message_handler_conv);
	}
	LDKPeerManager ret_var = PeerManager_new(message_handler_conv, our_node_secret_ref, ephemeral_random_data_ref, logger_conv, custom_message_handler_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_PeerManager_1get_1peer_1node_1ids(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_PublicKeyZ ret_var = PeerManager_get_peer_node_ids(&this_arg_conv);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_B_clz, NULL);
	;
	for (size_t i = 0; i < ret_var.datalen; i++) {
		int8_tArray ret_conv_8_arr = (*env)->NewByteArray(env, 33);
		(*env)->SetByteArrayRegion(env, ret_conv_8_arr, 0, 33, ret_var.data[i].compressed_form);
		(*env)->SetObjectArrayElement(env, ret_arr, i, ret_conv_8_arr);
	}
	
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerManager_1new_1outbound_1connection(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray their_node_id, int64_t descriptor) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPublicKey their_node_id_ref;
	CHECK((*env)->GetArrayLength(env, their_node_id) == 33);
	(*env)->GetByteArrayRegion(env, their_node_id, 0, 33, their_node_id_ref.compressed_form);
	void* descriptor_ptr = (void*)(((uintptr_t)descriptor) & ~1);
	CHECK_ACCESS(descriptor_ptr);
	LDKSocketDescriptor descriptor_conv = *(LDKSocketDescriptor*)(descriptor_ptr);
	if (descriptor_conv.free == LDKSocketDescriptor_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKSocketDescriptor_JCalls_cloned(&descriptor_conv);
	}
	LDKCResult_CVec_u8ZPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_u8ZPeerHandleErrorZ), "LDKCResult_CVec_u8ZPeerHandleErrorZ");
	*ret_conv = PeerManager_new_outbound_connection(&this_arg_conv, their_node_id_ref, descriptor_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerManager_1new_1inbound_1connection(JNIEnv *env, jclass clz, int64_t this_arg, int64_t descriptor) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* descriptor_ptr = (void*)(((uintptr_t)descriptor) & ~1);
	CHECK_ACCESS(descriptor_ptr);
	LDKSocketDescriptor descriptor_conv = *(LDKSocketDescriptor*)(descriptor_ptr);
	if (descriptor_conv.free == LDKSocketDescriptor_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKSocketDescriptor_JCalls_cloned(&descriptor_conv);
	}
	LDKCResult_NonePeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePeerHandleErrorZ), "LDKCResult_NonePeerHandleErrorZ");
	*ret_conv = PeerManager_new_inbound_connection(&this_arg_conv, descriptor_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerManager_1write_1buffer_1space_1avail(JNIEnv *env, jclass clz, int64_t this_arg, int64_t descriptor) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* descriptor_ptr = (void*)(((uintptr_t)descriptor) & ~1);
	if (!(descriptor & 1)) { CHECK_ACCESS(descriptor_ptr); }
	LDKSocketDescriptor* descriptor_conv = (LDKSocketDescriptor*)descriptor_ptr;
	LDKCResult_NonePeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NonePeerHandleErrorZ), "LDKCResult_NonePeerHandleErrorZ");
	*ret_conv = PeerManager_write_buffer_space_avail(&this_arg_conv, descriptor_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PeerManager_1read_1event(JNIEnv *env, jclass clz, int64_t this_arg, int64_t peer_descriptor, int8_tArray data) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* peer_descriptor_ptr = (void*)(((uintptr_t)peer_descriptor) & ~1);
	if (!(peer_descriptor & 1)) { CHECK_ACCESS(peer_descriptor_ptr); }
	LDKSocketDescriptor* peer_descriptor_conv = (LDKSocketDescriptor*)peer_descriptor_ptr;
	LDKu8slice data_ref;
	data_ref.datalen = (*env)->GetArrayLength(env, data);
	data_ref.data = (*env)->GetByteArrayElements (env, data, NULL);
	LDKCResult_boolPeerHandleErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_boolPeerHandleErrorZ), "LDKCResult_boolPeerHandleErrorZ");
	*ret_conv = PeerManager_read_event(&this_arg_conv, peer_descriptor_conv, data_ref);
	(*env)->ReleaseByteArrayElements(env, data, (int8_t*)data_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerManager_1process_1events(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	PeerManager_process_events(&this_arg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerManager_1socket_1disconnected(JNIEnv *env, jclass clz, int64_t this_arg, int64_t descriptor) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* descriptor_ptr = (void*)(((uintptr_t)descriptor) & ~1);
	if (!(descriptor & 1)) { CHECK_ACCESS(descriptor_ptr); }
	LDKSocketDescriptor* descriptor_conv = (LDKSocketDescriptor*)descriptor_ptr;
	PeerManager_socket_disconnected(&this_arg_conv, descriptor_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerManager_1disconnect_1by_1node_1id(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray node_id, jboolean no_connection_possible) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	PeerManager_disconnect_by_node_id(&this_arg_conv, node_id_ref, no_connection_possible);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerManager_1disconnect_1all_1peers(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	PeerManager_disconnect_all_peers(&this_arg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PeerManager_1timer_1tick_1occurred(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPeerManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	PeerManager_timer_tick_occurred(&this_arg_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_htlc_1success_1tx_1weight(JNIEnv *env, jclass clz, jboolean opt_anchors) {
	int64_t ret_val = htlc_success_tx_weight(opt_anchors);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_htlc_1timeout_1tx_1weight(JNIEnv *env, jclass clz, jboolean opt_anchors) {
	int64_t ret_val = htlc_timeout_tx_weight(opt_anchors);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_build_1commitment_1secret(JNIEnv *env, jclass clz, int8_tArray commitment_seed, int64_t idx) {
	unsigned char commitment_seed_arr[32];
	CHECK((*env)->GetArrayLength(env, commitment_seed) == 32);
	(*env)->GetByteArrayRegion(env, commitment_seed, 0, 32, commitment_seed_arr);
	unsigned char (*commitment_seed_ref)[32] = &commitment_seed_arr;
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, build_commitment_secret(commitment_seed_ref, idx).data);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_build_1closing_1transaction(JNIEnv *env, jclass clz, int64_t to_holder_value_sat, int64_t to_counterparty_value_sat, int8_tArray to_holder_script, int8_tArray to_counterparty_script, int64_t funding_outpoint) {
	LDKCVec_u8Z to_holder_script_ref;
	to_holder_script_ref.datalen = (*env)->GetArrayLength(env, to_holder_script);
	to_holder_script_ref.data = MALLOC(to_holder_script_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, to_holder_script, 0, to_holder_script_ref.datalen, to_holder_script_ref.data);
	LDKCVec_u8Z to_counterparty_script_ref;
	to_counterparty_script_ref.datalen = (*env)->GetArrayLength(env, to_counterparty_script);
	to_counterparty_script_ref.data = MALLOC(to_counterparty_script_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, to_counterparty_script, 0, to_counterparty_script_ref.datalen, to_counterparty_script_ref.data);
	LDKOutPoint funding_outpoint_conv;
	funding_outpoint_conv.inner = (void*)(funding_outpoint & (~1));
	funding_outpoint_conv.is_owned = (funding_outpoint & 1) || (funding_outpoint == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_outpoint_conv);
	funding_outpoint_conv = OutPoint_clone(&funding_outpoint_conv);
	LDKTransaction ret_var = build_closing_transaction(to_holder_value_sat, to_counterparty_value_sat, to_holder_script_ref, to_counterparty_script_ref, funding_outpoint_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	Transaction_free(ret_var);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKCounterpartyCommitmentSecrets this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	CounterpartyCommitmentSecrets_free(this_obj_conv);
}

static inline uintptr_t CounterpartyCommitmentSecrets_clone_ptr(LDKCounterpartyCommitmentSecrets *NONNULL_PTR arg) {
	LDKCounterpartyCommitmentSecrets ret_var = CounterpartyCommitmentSecrets_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCounterpartyCommitmentSecrets arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = CounterpartyCommitmentSecrets_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCounterpartyCommitmentSecrets orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKCounterpartyCommitmentSecrets ret_var = CounterpartyCommitmentSecrets_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1new(JNIEnv *env, jclass clz) {
	LDKCounterpartyCommitmentSecrets ret_var = CounterpartyCommitmentSecrets_new();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1get_1min_1seen_1secret(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKCounterpartyCommitmentSecrets this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = CounterpartyCommitmentSecrets_get_min_seen_secret(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1provide_1secret(JNIEnv *env, jclass clz, int64_t this_arg, int64_t idx, int8_tArray secret) {
	LDKCounterpartyCommitmentSecrets this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKThirtyTwoBytes secret_ref;
	CHECK((*env)->GetArrayLength(env, secret) == 32);
	(*env)->GetByteArrayRegion(env, secret, 0, 32, secret_ref.data);
	LDKCResult_NoneNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneNoneZ), "LDKCResult_NoneNoneZ");
	*ret_conv = CounterpartyCommitmentSecrets_provide_secret(&this_arg_conv, idx, secret_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1get_1secret(JNIEnv *env, jclass clz, int64_t this_arg, int64_t idx) {
	LDKCounterpartyCommitmentSecrets this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, CounterpartyCommitmentSecrets_get_secret(&this_arg_conv, idx).data);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKCounterpartyCommitmentSecrets obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = CounterpartyCommitmentSecrets_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyCommitmentSecrets_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ), "LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ");
	*ret_conv = CounterpartyCommitmentSecrets_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_derive_1private_1key(JNIEnv *env, jclass clz, int8_tArray per_commitment_point, int8_tArray base_secret) {
	LDKPublicKey per_commitment_point_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point, 0, 33, per_commitment_point_ref.compressed_form);
	unsigned char base_secret_arr[32];
	CHECK((*env)->GetArrayLength(env, base_secret) == 32);
	(*env)->GetByteArrayRegion(env, base_secret, 0, 32, base_secret_arr);
	unsigned char (*base_secret_ref)[32] = &base_secret_arr;
	LDKCResult_SecretKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyErrorZ), "LDKCResult_SecretKeyErrorZ");
	*ret_conv = derive_private_key(per_commitment_point_ref, base_secret_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_derive_1public_1key(JNIEnv *env, jclass clz, int8_tArray per_commitment_point, int8_tArray base_point) {
	LDKPublicKey per_commitment_point_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point, 0, 33, per_commitment_point_ref.compressed_form);
	LDKPublicKey base_point_ref;
	CHECK((*env)->GetArrayLength(env, base_point) == 33);
	(*env)->GetByteArrayRegion(env, base_point, 0, 33, base_point_ref.compressed_form);
	LDKCResult_PublicKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PublicKeyErrorZ), "LDKCResult_PublicKeyErrorZ");
	*ret_conv = derive_public_key(per_commitment_point_ref, base_point_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_derive_1private_1revocation_1key(JNIEnv *env, jclass clz, int8_tArray per_commitment_secret, int8_tArray countersignatory_revocation_base_secret) {
	unsigned char per_commitment_secret_arr[32];
	CHECK((*env)->GetArrayLength(env, per_commitment_secret) == 32);
	(*env)->GetByteArrayRegion(env, per_commitment_secret, 0, 32, per_commitment_secret_arr);
	unsigned char (*per_commitment_secret_ref)[32] = &per_commitment_secret_arr;
	unsigned char countersignatory_revocation_base_secret_arr[32];
	CHECK((*env)->GetArrayLength(env, countersignatory_revocation_base_secret) == 32);
	(*env)->GetByteArrayRegion(env, countersignatory_revocation_base_secret, 0, 32, countersignatory_revocation_base_secret_arr);
	unsigned char (*countersignatory_revocation_base_secret_ref)[32] = &countersignatory_revocation_base_secret_arr;
	LDKCResult_SecretKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_SecretKeyErrorZ), "LDKCResult_SecretKeyErrorZ");
	*ret_conv = derive_private_revocation_key(per_commitment_secret_ref, countersignatory_revocation_base_secret_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_derive_1public_1revocation_1key(JNIEnv *env, jclass clz, int8_tArray per_commitment_point, int8_tArray countersignatory_revocation_base_point) {
	LDKPublicKey per_commitment_point_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point, 0, 33, per_commitment_point_ref.compressed_form);
	LDKPublicKey countersignatory_revocation_base_point_ref;
	CHECK((*env)->GetArrayLength(env, countersignatory_revocation_base_point) == 33);
	(*env)->GetByteArrayRegion(env, countersignatory_revocation_base_point, 0, 33, countersignatory_revocation_base_point_ref.compressed_form);
	LDKCResult_PublicKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PublicKeyErrorZ), "LDKCResult_PublicKeyErrorZ");
	*ret_conv = derive_public_revocation_key(per_commitment_point_ref, countersignatory_revocation_base_point_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKTxCreationKeys this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	TxCreationKeys_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1get_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, TxCreationKeys_get_per_commitment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1set_1per_1commitment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	TxCreationKeys_set_per_commitment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1get_1revocation_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, TxCreationKeys_get_revocation_key(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1set_1revocation_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	TxCreationKeys_set_revocation_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1get_1broadcaster_1htlc_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, TxCreationKeys_get_broadcaster_htlc_key(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1set_1broadcaster_1htlc_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	TxCreationKeys_set_broadcaster_htlc_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1get_1countersignatory_1htlc_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, TxCreationKeys_get_countersignatory_htlc_key(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1set_1countersignatory_1htlc_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	TxCreationKeys_set_countersignatory_htlc_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1get_1broadcaster_1delayed_1payment_1key(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, TxCreationKeys_get_broadcaster_delayed_payment_key(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1set_1broadcaster_1delayed_1payment_1key(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKTxCreationKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	TxCreationKeys_set_broadcaster_delayed_payment_key(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1new(JNIEnv *env, jclass clz, int8_tArray per_commitment_point_arg, int8_tArray revocation_key_arg, int8_tArray broadcaster_htlc_key_arg, int8_tArray countersignatory_htlc_key_arg, int8_tArray broadcaster_delayed_payment_key_arg) {
	LDKPublicKey per_commitment_point_arg_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point_arg) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point_arg, 0, 33, per_commitment_point_arg_ref.compressed_form);
	LDKPublicKey revocation_key_arg_ref;
	CHECK((*env)->GetArrayLength(env, revocation_key_arg) == 33);
	(*env)->GetByteArrayRegion(env, revocation_key_arg, 0, 33, revocation_key_arg_ref.compressed_form);
	LDKPublicKey broadcaster_htlc_key_arg_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster_htlc_key_arg) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster_htlc_key_arg, 0, 33, broadcaster_htlc_key_arg_ref.compressed_form);
	LDKPublicKey countersignatory_htlc_key_arg_ref;
	CHECK((*env)->GetArrayLength(env, countersignatory_htlc_key_arg) == 33);
	(*env)->GetByteArrayRegion(env, countersignatory_htlc_key_arg, 0, 33, countersignatory_htlc_key_arg_ref.compressed_form);
	LDKPublicKey broadcaster_delayed_payment_key_arg_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster_delayed_payment_key_arg) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster_delayed_payment_key_arg, 0, 33, broadcaster_delayed_payment_key_arg_ref.compressed_form);
	LDKTxCreationKeys ret_var = TxCreationKeys_new(per_commitment_point_arg_ref, revocation_key_arg_ref, broadcaster_htlc_key_arg_ref, countersignatory_htlc_key_arg_ref, broadcaster_delayed_payment_key_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t TxCreationKeys_clone_ptr(LDKTxCreationKeys *NONNULL_PTR arg) {
	LDKTxCreationKeys ret_var = TxCreationKeys_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKTxCreationKeys arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = TxCreationKeys_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKTxCreationKeys orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKTxCreationKeys ret_var = TxCreationKeys_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKTxCreationKeys obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = TxCreationKeys_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_TxCreationKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysDecodeErrorZ), "LDKCResult_TxCreationKeysDecodeErrorZ");
	*ret_conv = TxCreationKeys_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelPublicKeys this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelPublicKeys_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1get_1funding_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ChannelPublicKeys_get_funding_pubkey(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1set_1funding_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	ChannelPublicKeys_set_funding_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1get_1revocation_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ChannelPublicKeys_get_revocation_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1set_1revocation_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	ChannelPublicKeys_set_revocation_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1get_1payment_1point(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ChannelPublicKeys_get_payment_point(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1set_1payment_1point(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	ChannelPublicKeys_set_payment_point(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1get_1delayed_1payment_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ChannelPublicKeys_get_delayed_payment_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1set_1delayed_1payment_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	ChannelPublicKeys_set_delayed_payment_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1get_1htlc_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ChannelPublicKeys_get_htlc_basepoint(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1set_1htlc_1basepoint(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKChannelPublicKeys this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	ChannelPublicKeys_set_htlc_basepoint(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1new(JNIEnv *env, jclass clz, int8_tArray funding_pubkey_arg, int8_tArray revocation_basepoint_arg, int8_tArray payment_point_arg, int8_tArray delayed_payment_basepoint_arg, int8_tArray htlc_basepoint_arg) {
	LDKPublicKey funding_pubkey_arg_ref;
	CHECK((*env)->GetArrayLength(env, funding_pubkey_arg) == 33);
	(*env)->GetByteArrayRegion(env, funding_pubkey_arg, 0, 33, funding_pubkey_arg_ref.compressed_form);
	LDKPublicKey revocation_basepoint_arg_ref;
	CHECK((*env)->GetArrayLength(env, revocation_basepoint_arg) == 33);
	(*env)->GetByteArrayRegion(env, revocation_basepoint_arg, 0, 33, revocation_basepoint_arg_ref.compressed_form);
	LDKPublicKey payment_point_arg_ref;
	CHECK((*env)->GetArrayLength(env, payment_point_arg) == 33);
	(*env)->GetByteArrayRegion(env, payment_point_arg, 0, 33, payment_point_arg_ref.compressed_form);
	LDKPublicKey delayed_payment_basepoint_arg_ref;
	CHECK((*env)->GetArrayLength(env, delayed_payment_basepoint_arg) == 33);
	(*env)->GetByteArrayRegion(env, delayed_payment_basepoint_arg, 0, 33, delayed_payment_basepoint_arg_ref.compressed_form);
	LDKPublicKey htlc_basepoint_arg_ref;
	CHECK((*env)->GetArrayLength(env, htlc_basepoint_arg) == 33);
	(*env)->GetByteArrayRegion(env, htlc_basepoint_arg, 0, 33, htlc_basepoint_arg_ref.compressed_form);
	LDKChannelPublicKeys ret_var = ChannelPublicKeys_new(funding_pubkey_arg_ref, revocation_basepoint_arg_ref, payment_point_arg_ref, delayed_payment_basepoint_arg_ref, htlc_basepoint_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelPublicKeys_clone_ptr(LDKChannelPublicKeys *NONNULL_PTR arg) {
	LDKChannelPublicKeys ret_var = ChannelPublicKeys_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelPublicKeys arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelPublicKeys_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelPublicKeys orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelPublicKeys ret_var = ChannelPublicKeys_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelPublicKeys obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelPublicKeys_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelPublicKeys_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelPublicKeysDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelPublicKeysDecodeErrorZ), "LDKCResult_ChannelPublicKeysDecodeErrorZ");
	*ret_conv = ChannelPublicKeys_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1derive_1new(JNIEnv *env, jclass clz, int8_tArray per_commitment_point, int8_tArray broadcaster_delayed_payment_base, int8_tArray broadcaster_htlc_base, int8_tArray countersignatory_revocation_base, int8_tArray countersignatory_htlc_base) {
	LDKPublicKey per_commitment_point_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point, 0, 33, per_commitment_point_ref.compressed_form);
	LDKPublicKey broadcaster_delayed_payment_base_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster_delayed_payment_base) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster_delayed_payment_base, 0, 33, broadcaster_delayed_payment_base_ref.compressed_form);
	LDKPublicKey broadcaster_htlc_base_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster_htlc_base) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster_htlc_base, 0, 33, broadcaster_htlc_base_ref.compressed_form);
	LDKPublicKey countersignatory_revocation_base_ref;
	CHECK((*env)->GetArrayLength(env, countersignatory_revocation_base) == 33);
	(*env)->GetByteArrayRegion(env, countersignatory_revocation_base, 0, 33, countersignatory_revocation_base_ref.compressed_form);
	LDKPublicKey countersignatory_htlc_base_ref;
	CHECK((*env)->GetArrayLength(env, countersignatory_htlc_base) == 33);
	(*env)->GetByteArrayRegion(env, countersignatory_htlc_base, 0, 33, countersignatory_htlc_base_ref.compressed_form);
	LDKCResult_TxCreationKeysErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysErrorZ), "LDKCResult_TxCreationKeysErrorZ");
	*ret_conv = TxCreationKeys_derive_new(per_commitment_point_ref, broadcaster_delayed_payment_base_ref, broadcaster_htlc_base_ref, countersignatory_revocation_base_ref, countersignatory_htlc_base_ref);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TxCreationKeys_1from_1channel_1static_1keys(JNIEnv *env, jclass clz, int8_tArray per_commitment_point, int64_t broadcaster_keys, int64_t countersignatory_keys) {
	LDKPublicKey per_commitment_point_ref;
	CHECK((*env)->GetArrayLength(env, per_commitment_point) == 33);
	(*env)->GetByteArrayRegion(env, per_commitment_point, 0, 33, per_commitment_point_ref.compressed_form);
	LDKChannelPublicKeys broadcaster_keys_conv;
	broadcaster_keys_conv.inner = (void*)(broadcaster_keys & (~1));
	broadcaster_keys_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(broadcaster_keys_conv);
	LDKChannelPublicKeys countersignatory_keys_conv;
	countersignatory_keys_conv.inner = (void*)(countersignatory_keys & (~1));
	countersignatory_keys_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(countersignatory_keys_conv);
	LDKCResult_TxCreationKeysErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_TxCreationKeysErrorZ), "LDKCResult_TxCreationKeysErrorZ");
	*ret_conv = TxCreationKeys_from_channel_static_keys(per_commitment_point_ref, &broadcaster_keys_conv, &countersignatory_keys_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_get_1revokeable_1redeemscript(JNIEnv *env, jclass clz, int8_tArray revocation_key, int16_t contest_delay, int8_tArray broadcaster_delayed_payment_key) {
	LDKPublicKey revocation_key_ref;
	CHECK((*env)->GetArrayLength(env, revocation_key) == 33);
	(*env)->GetByteArrayRegion(env, revocation_key, 0, 33, revocation_key_ref.compressed_form);
	LDKPublicKey broadcaster_delayed_payment_key_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster_delayed_payment_key) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster_delayed_payment_key, 0, 33, broadcaster_delayed_payment_key_ref.compressed_form);
	LDKCVec_u8Z ret_var = get_revokeable_redeemscript(revocation_key_ref, contest_delay, broadcaster_delayed_payment_key_ref);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKHTLCOutputInCommitment this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	HTLCOutputInCommitment_free(this_obj_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1get_1offered(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = HTLCOutputInCommitment_get_offered(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1set_1offered(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	HTLCOutputInCommitment_set_offered(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1get_1amount_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = HTLCOutputInCommitment_get_amount_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1set_1amount_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	HTLCOutputInCommitment_set_amount_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1get_1cltv_1expiry(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = HTLCOutputInCommitment_get_cltv_expiry(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1set_1cltv_1expiry(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	HTLCOutputInCommitment_set_cltv_expiry(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1get_1payment_1hash(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *HTLCOutputInCommitment_get_payment_hash(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1set_1payment_1hash(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	HTLCOutputInCommitment_set_payment_hash(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1get_1transaction_1output_1index(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u32Z *ret_copy = MALLOC(sizeof(LDKCOption_u32Z), "LDKCOption_u32Z");
	*ret_copy = HTLCOutputInCommitment_get_transaction_output_index(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1set_1transaction_1output_1index(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKHTLCOutputInCommitment this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u32Z val_conv = *(LDKCOption_u32Z*)(val_ptr);
	val_conv = COption_u32Z_clone((LDKCOption_u32Z*)(((uintptr_t)val) & ~1));
	HTLCOutputInCommitment_set_transaction_output_index(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1new(JNIEnv *env, jclass clz, jboolean offered_arg, int64_t amount_msat_arg, int32_t cltv_expiry_arg, int8_tArray payment_hash_arg, int64_t transaction_output_index_arg) {
	LDKThirtyTwoBytes payment_hash_arg_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash_arg) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash_arg, 0, 32, payment_hash_arg_ref.data);
	void* transaction_output_index_arg_ptr = (void*)(((uintptr_t)transaction_output_index_arg) & ~1);
	CHECK_ACCESS(transaction_output_index_arg_ptr);
	LDKCOption_u32Z transaction_output_index_arg_conv = *(LDKCOption_u32Z*)(transaction_output_index_arg_ptr);
	transaction_output_index_arg_conv = COption_u32Z_clone((LDKCOption_u32Z*)(((uintptr_t)transaction_output_index_arg) & ~1));
	LDKHTLCOutputInCommitment ret_var = HTLCOutputInCommitment_new(offered_arg, amount_msat_arg, cltv_expiry_arg, payment_hash_arg_ref, transaction_output_index_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t HTLCOutputInCommitment_clone_ptr(LDKHTLCOutputInCommitment *NONNULL_PTR arg) {
	LDKHTLCOutputInCommitment ret_var = HTLCOutputInCommitment_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKHTLCOutputInCommitment arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = HTLCOutputInCommitment_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKHTLCOutputInCommitment orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKHTLCOutputInCommitment ret_var = HTLCOutputInCommitment_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKHTLCOutputInCommitment obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = HTLCOutputInCommitment_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HTLCOutputInCommitment_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_HTLCOutputInCommitmentDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ), "LDKCResult_HTLCOutputInCommitmentDecodeErrorZ");
	*ret_conv = HTLCOutputInCommitment_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_get_1htlc_1redeemscript(JNIEnv *env, jclass clz, int64_t htlc, jboolean opt_anchors, int64_t keys) {
	LDKHTLCOutputInCommitment htlc_conv;
	htlc_conv.inner = (void*)(htlc & (~1));
	htlc_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(htlc_conv);
	LDKTxCreationKeys keys_conv;
	keys_conv.inner = (void*)(keys & (~1));
	keys_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(keys_conv);
	LDKCVec_u8Z ret_var = get_htlc_redeemscript(&htlc_conv, opt_anchors, &keys_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_make_1funding_1redeemscript(JNIEnv *env, jclass clz, int8_tArray broadcaster, int8_tArray countersignatory) {
	LDKPublicKey broadcaster_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster, 0, 33, broadcaster_ref.compressed_form);
	LDKPublicKey countersignatory_ref;
	CHECK((*env)->GetArrayLength(env, countersignatory) == 33);
	(*env)->GetByteArrayRegion(env, countersignatory, 0, 33, countersignatory_ref.compressed_form);
	LDKCVec_u8Z ret_var = make_funding_redeemscript(broadcaster_ref, countersignatory_ref);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_build_1htlc_1transaction(JNIEnv *env, jclass clz, int8_tArray commitment_txid, int32_t feerate_per_kw, int16_t contest_delay, int64_t htlc, jboolean opt_anchors, int8_tArray broadcaster_delayed_payment_key, int8_tArray revocation_key) {
	unsigned char commitment_txid_arr[32];
	CHECK((*env)->GetArrayLength(env, commitment_txid) == 32);
	(*env)->GetByteArrayRegion(env, commitment_txid, 0, 32, commitment_txid_arr);
	unsigned char (*commitment_txid_ref)[32] = &commitment_txid_arr;
	LDKHTLCOutputInCommitment htlc_conv;
	htlc_conv.inner = (void*)(htlc & (~1));
	htlc_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(htlc_conv);
	LDKPublicKey broadcaster_delayed_payment_key_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster_delayed_payment_key) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster_delayed_payment_key, 0, 33, broadcaster_delayed_payment_key_ref.compressed_form);
	LDKPublicKey revocation_key_ref;
	CHECK((*env)->GetArrayLength(env, revocation_key) == 33);
	(*env)->GetByteArrayRegion(env, revocation_key, 0, 33, revocation_key_ref.compressed_form);
	LDKTransaction ret_var = build_htlc_transaction(commitment_txid_ref, feerate_per_kw, contest_delay, &htlc_conv, opt_anchors, broadcaster_delayed_payment_key_ref, revocation_key_ref);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	Transaction_free(ret_var);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_get_1anchor_1redeemscript(JNIEnv *env, jclass clz, int8_tArray funding_pubkey) {
	LDKPublicKey funding_pubkey_ref;
	CHECK((*env)->GetArrayLength(env, funding_pubkey) == 33);
	(*env)->GetByteArrayRegion(env, funding_pubkey, 0, 33, funding_pubkey_ref.compressed_form);
	LDKCVec_u8Z ret_var = get_anchor_redeemscript(funding_pubkey_ref);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelTransactionParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelTransactionParameters_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1get_1holder_1pubkeys(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelPublicKeys ret_var = ChannelTransactionParameters_get_holder_pubkeys(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1set_1holder_1pubkeys(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelPublicKeys val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelPublicKeys_clone(&val_conv);
	ChannelTransactionParameters_set_holder_pubkeys(&this_ptr_conv, val_conv);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1get_1holder_1selected_1contest_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = ChannelTransactionParameters_get_holder_selected_contest_delay(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1set_1holder_1selected_1contest_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelTransactionParameters_set_holder_selected_contest_delay(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1get_1is_1outbound_1from_1holder(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelTransactionParameters_get_is_outbound_from_holder(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1set_1is_1outbound_1from_1holder(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelTransactionParameters_set_is_outbound_from_holder(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1get_1counterparty_1parameters(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCounterpartyChannelTransactionParameters ret_var = ChannelTransactionParameters_get_counterparty_parameters(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1set_1counterparty_1parameters(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCounterpartyChannelTransactionParameters val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = CounterpartyChannelTransactionParameters_clone(&val_conv);
	ChannelTransactionParameters_set_counterparty_parameters(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1get_1funding_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint ret_var = ChannelTransactionParameters_get_funding_outpoint(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1set_1funding_1outpoint(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKOutPoint val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = OutPoint_clone(&val_conv);
	ChannelTransactionParameters_set_funding_outpoint(&this_ptr_conv, val_conv);
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1get_1opt_1anchors(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jclass ret_conv = LDKCOption_NoneZ_to_java(env, ChannelTransactionParameters_get_opt_anchors(&this_ptr_conv));
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1set_1opt_1anchors(JNIEnv *env, jclass clz, int64_t this_ptr, jclass val) {
	LDKChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_NoneZ val_conv = LDKCOption_NoneZ_from_java(env, val);
	ChannelTransactionParameters_set_opt_anchors(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1new(JNIEnv *env, jclass clz, int64_t holder_pubkeys_arg, int16_t holder_selected_contest_delay_arg, jboolean is_outbound_from_holder_arg, int64_t counterparty_parameters_arg, int64_t funding_outpoint_arg, jclass opt_anchors_arg) {
	LDKChannelPublicKeys holder_pubkeys_arg_conv;
	holder_pubkeys_arg_conv.inner = (void*)(holder_pubkeys_arg & (~1));
	holder_pubkeys_arg_conv.is_owned = (holder_pubkeys_arg & 1) || (holder_pubkeys_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(holder_pubkeys_arg_conv);
	holder_pubkeys_arg_conv = ChannelPublicKeys_clone(&holder_pubkeys_arg_conv);
	LDKCounterpartyChannelTransactionParameters counterparty_parameters_arg_conv;
	counterparty_parameters_arg_conv.inner = (void*)(counterparty_parameters_arg & (~1));
	counterparty_parameters_arg_conv.is_owned = (counterparty_parameters_arg & 1) || (counterparty_parameters_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(counterparty_parameters_arg_conv);
	counterparty_parameters_arg_conv = CounterpartyChannelTransactionParameters_clone(&counterparty_parameters_arg_conv);
	LDKOutPoint funding_outpoint_arg_conv;
	funding_outpoint_arg_conv.inner = (void*)(funding_outpoint_arg & (~1));
	funding_outpoint_arg_conv.is_owned = (funding_outpoint_arg & 1) || (funding_outpoint_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_outpoint_arg_conv);
	funding_outpoint_arg_conv = OutPoint_clone(&funding_outpoint_arg_conv);
	LDKCOption_NoneZ opt_anchors_arg_conv = LDKCOption_NoneZ_from_java(env, opt_anchors_arg);
	LDKChannelTransactionParameters ret_var = ChannelTransactionParameters_new(holder_pubkeys_arg_conv, holder_selected_contest_delay_arg, is_outbound_from_holder_arg, counterparty_parameters_arg_conv, funding_outpoint_arg_conv, opt_anchors_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelTransactionParameters_clone_ptr(LDKChannelTransactionParameters *NONNULL_PTR arg) {
	LDKChannelTransactionParameters ret_var = ChannelTransactionParameters_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelTransactionParameters arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelTransactionParameters_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelTransactionParameters orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelTransactionParameters ret_var = ChannelTransactionParameters_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKCounterpartyChannelTransactionParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	CounterpartyChannelTransactionParameters_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1get_1pubkeys(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCounterpartyChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelPublicKeys ret_var = CounterpartyChannelTransactionParameters_get_pubkeys(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1set_1pubkeys(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKCounterpartyChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelPublicKeys val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelPublicKeys_clone(&val_conv);
	CounterpartyChannelTransactionParameters_set_pubkeys(&this_ptr_conv, val_conv);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1get_1selected_1contest_1delay(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKCounterpartyChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = CounterpartyChannelTransactionParameters_get_selected_contest_delay(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1set_1selected_1contest_1delay(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKCounterpartyChannelTransactionParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	CounterpartyChannelTransactionParameters_set_selected_contest_delay(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1new(JNIEnv *env, jclass clz, int64_t pubkeys_arg, int16_t selected_contest_delay_arg) {
	LDKChannelPublicKeys pubkeys_arg_conv;
	pubkeys_arg_conv.inner = (void*)(pubkeys_arg & (~1));
	pubkeys_arg_conv.is_owned = (pubkeys_arg & 1) || (pubkeys_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(pubkeys_arg_conv);
	pubkeys_arg_conv = ChannelPublicKeys_clone(&pubkeys_arg_conv);
	LDKCounterpartyChannelTransactionParameters ret_var = CounterpartyChannelTransactionParameters_new(pubkeys_arg_conv, selected_contest_delay_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t CounterpartyChannelTransactionParameters_clone_ptr(LDKCounterpartyChannelTransactionParameters *NONNULL_PTR arg) {
	LDKCounterpartyChannelTransactionParameters ret_var = CounterpartyChannelTransactionParameters_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCounterpartyChannelTransactionParameters arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = CounterpartyChannelTransactionParameters_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCounterpartyChannelTransactionParameters orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKCounterpartyChannelTransactionParameters ret_var = CounterpartyChannelTransactionParameters_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1is_1populated(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = ChannelTransactionParameters_is_populated(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1as_1holder_1broadcastable(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKDirectedChannelTransactionParameters ret_var = ChannelTransactionParameters_as_holder_broadcastable(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1as_1counterparty_1broadcastable(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKDirectedChannelTransactionParameters ret_var = ChannelTransactionParameters_as_counterparty_broadcastable(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKCounterpartyChannelTransactionParameters obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = CounterpartyChannelTransactionParameters_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CounterpartyChannelTransactionParameters_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ), "LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ");
	*ret_conv = CounterpartyChannelTransactionParameters_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelTransactionParameters obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelTransactionParameters_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTransactionParameters_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelTransactionParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTransactionParametersDecodeErrorZ), "LDKCResult_ChannelTransactionParametersDecodeErrorZ");
	*ret_conv = ChannelTransactionParameters_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DirectedChannelTransactionParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKDirectedChannelTransactionParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	DirectedChannelTransactionParameters_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelTransactionParameters_1broadcaster_1pubkeys(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelPublicKeys ret_var = DirectedChannelTransactionParameters_broadcaster_pubkeys(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelTransactionParameters_1countersignatory_1pubkeys(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelPublicKeys ret_var = DirectedChannelTransactionParameters_countersignatory_pubkeys(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelTransactionParameters_1contest_1delay(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int16_t ret_val = DirectedChannelTransactionParameters_contest_delay(&this_arg_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_DirectedChannelTransactionParameters_1is_1outbound(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = DirectedChannelTransactionParameters_is_outbound(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelTransactionParameters_1funding_1outpoint(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKOutPoint ret_var = DirectedChannelTransactionParameters_funding_outpoint(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_DirectedChannelTransactionParameters_1opt_1anchors(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelTransactionParameters this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = DirectedChannelTransactionParameters_opt_anchors(&this_arg_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKHolderCommitmentTransaction this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	HolderCommitmentTransaction_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1get_1counterparty_1sig(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKHolderCommitmentTransaction this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, HolderCommitmentTransaction_get_counterparty_sig(&this_ptr_conv).compact_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1set_1counterparty_1sig(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKHolderCommitmentTransaction this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKSignature val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 64);
	(*env)->GetByteArrayRegion(env, val, 0, 64, val_ref.compact_form);
	HolderCommitmentTransaction_set_counterparty_sig(&this_ptr_conv, val_ref);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1set_1counterparty_1htlc_1sigs(JNIEnv *env, jclass clz, int64_t this_ptr, jobjectArray val) {
	LDKHolderCommitmentTransaction this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_SignatureZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKSignature), "LDKCVec_SignatureZ Elements");
	else
		val_constr.data = NULL;
	for (size_t i = 0; i < val_constr.datalen; i++) {
		int8_tArray val_conv_8 = (*env)->GetObjectArrayElement(env, val, i);
		LDKSignature val_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, val_conv_8) == 64);
		(*env)->GetByteArrayRegion(env, val_conv_8, 0, 64, val_conv_8_ref.compact_form);
		val_constr.data[i] = val_conv_8_ref;
	}
	HolderCommitmentTransaction_set_counterparty_htlc_sigs(&this_ptr_conv, val_constr);
}

static inline uintptr_t HolderCommitmentTransaction_clone_ptr(LDKHolderCommitmentTransaction *NONNULL_PTR arg) {
	LDKHolderCommitmentTransaction ret_var = HolderCommitmentTransaction_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKHolderCommitmentTransaction arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = HolderCommitmentTransaction_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKHolderCommitmentTransaction orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKHolderCommitmentTransaction ret_var = HolderCommitmentTransaction_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKHolderCommitmentTransaction obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = HolderCommitmentTransaction_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_HolderCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_HolderCommitmentTransactionDecodeErrorZ), "LDKCResult_HolderCommitmentTransactionDecodeErrorZ");
	*ret_conv = HolderCommitmentTransaction_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_HolderCommitmentTransaction_1new(JNIEnv *env, jclass clz, int64_t commitment_tx, int8_tArray counterparty_sig, jobjectArray counterparty_htlc_sigs, int8_tArray holder_funding_key, int8_tArray counterparty_funding_key) {
	LDKCommitmentTransaction commitment_tx_conv;
	commitment_tx_conv.inner = (void*)(commitment_tx & (~1));
	commitment_tx_conv.is_owned = (commitment_tx & 1) || (commitment_tx == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(commitment_tx_conv);
	commitment_tx_conv = CommitmentTransaction_clone(&commitment_tx_conv);
	LDKSignature counterparty_sig_ref;
	CHECK((*env)->GetArrayLength(env, counterparty_sig) == 64);
	(*env)->GetByteArrayRegion(env, counterparty_sig, 0, 64, counterparty_sig_ref.compact_form);
	LDKCVec_SignatureZ counterparty_htlc_sigs_constr;
	counterparty_htlc_sigs_constr.datalen = (*env)->GetArrayLength(env, counterparty_htlc_sigs);
	if (counterparty_htlc_sigs_constr.datalen > 0)
		counterparty_htlc_sigs_constr.data = MALLOC(counterparty_htlc_sigs_constr.datalen * sizeof(LDKSignature), "LDKCVec_SignatureZ Elements");
	else
		counterparty_htlc_sigs_constr.data = NULL;
	for (size_t i = 0; i < counterparty_htlc_sigs_constr.datalen; i++) {
		int8_tArray counterparty_htlc_sigs_conv_8 = (*env)->GetObjectArrayElement(env, counterparty_htlc_sigs, i);
		LDKSignature counterparty_htlc_sigs_conv_8_ref;
		CHECK((*env)->GetArrayLength(env, counterparty_htlc_sigs_conv_8) == 64);
		(*env)->GetByteArrayRegion(env, counterparty_htlc_sigs_conv_8, 0, 64, counterparty_htlc_sigs_conv_8_ref.compact_form);
		counterparty_htlc_sigs_constr.data[i] = counterparty_htlc_sigs_conv_8_ref;
	}
	LDKPublicKey holder_funding_key_ref;
	CHECK((*env)->GetArrayLength(env, holder_funding_key) == 33);
	(*env)->GetByteArrayRegion(env, holder_funding_key, 0, 33, holder_funding_key_ref.compressed_form);
	LDKPublicKey counterparty_funding_key_ref;
	CHECK((*env)->GetArrayLength(env, counterparty_funding_key) == 33);
	(*env)->GetByteArrayRegion(env, counterparty_funding_key, 0, 33, counterparty_funding_key_ref.compressed_form);
	LDKHolderCommitmentTransaction ret_var = HolderCommitmentTransaction_new(commitment_tx_conv, counterparty_sig_ref, counterparty_htlc_sigs_constr, holder_funding_key_ref, counterparty_funding_key_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKBuiltCommitmentTransaction this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	BuiltCommitmentTransaction_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1get_1transaction(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKBuiltCommitmentTransaction this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKTransaction ret_var = BuiltCommitmentTransaction_get_transaction(&this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	Transaction_free(ret_var);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1set_1transaction(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKBuiltCommitmentTransaction this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKTransaction val_ref;
	val_ref.datalen = (*env)->GetArrayLength(env, val);
	val_ref.data = MALLOC(val_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, val, 0, val_ref.datalen, val_ref.data);
	val_ref.data_is_owned = true;
	BuiltCommitmentTransaction_set_transaction(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1get_1txid(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKBuiltCommitmentTransaction this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *BuiltCommitmentTransaction_get_txid(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1set_1txid(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKBuiltCommitmentTransaction this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	BuiltCommitmentTransaction_set_txid(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1new(JNIEnv *env, jclass clz, int8_tArray transaction_arg, int8_tArray txid_arg) {
	LDKTransaction transaction_arg_ref;
	transaction_arg_ref.datalen = (*env)->GetArrayLength(env, transaction_arg);
	transaction_arg_ref.data = MALLOC(transaction_arg_ref.datalen, "LDKTransaction Bytes");
	(*env)->GetByteArrayRegion(env, transaction_arg, 0, transaction_arg_ref.datalen, transaction_arg_ref.data);
	transaction_arg_ref.data_is_owned = true;
	LDKThirtyTwoBytes txid_arg_ref;
	CHECK((*env)->GetArrayLength(env, txid_arg) == 32);
	(*env)->GetByteArrayRegion(env, txid_arg, 0, 32, txid_arg_ref.data);
	LDKBuiltCommitmentTransaction ret_var = BuiltCommitmentTransaction_new(transaction_arg_ref, txid_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t BuiltCommitmentTransaction_clone_ptr(LDKBuiltCommitmentTransaction *NONNULL_PTR arg) {
	LDKBuiltCommitmentTransaction ret_var = BuiltCommitmentTransaction_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKBuiltCommitmentTransaction arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = BuiltCommitmentTransaction_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKBuiltCommitmentTransaction orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKBuiltCommitmentTransaction ret_var = BuiltCommitmentTransaction_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKBuiltCommitmentTransaction obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = BuiltCommitmentTransaction_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_BuiltCommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ), "LDKCResult_BuiltCommitmentTransactionDecodeErrorZ");
	*ret_conv = BuiltCommitmentTransaction_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1get_1sighash_1all(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray funding_redeemscript, int64_t channel_value_satoshis) {
	LDKBuiltCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKu8slice funding_redeemscript_ref;
	funding_redeemscript_ref.datalen = (*env)->GetArrayLength(env, funding_redeemscript);
	funding_redeemscript_ref.data = (*env)->GetByteArrayElements (env, funding_redeemscript, NULL);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, BuiltCommitmentTransaction_get_sighash_all(&this_arg_conv, funding_redeemscript_ref, channel_value_satoshis).data);
	(*env)->ReleaseByteArrayElements(env, funding_redeemscript, (int8_t*)funding_redeemscript_ref.data, 0);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_BuiltCommitmentTransaction_1sign(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray funding_key, int8_tArray funding_redeemscript, int64_t channel_value_satoshis) {
	LDKBuiltCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char funding_key_arr[32];
	CHECK((*env)->GetArrayLength(env, funding_key) == 32);
	(*env)->GetByteArrayRegion(env, funding_key, 0, 32, funding_key_arr);
	unsigned char (*funding_key_ref)[32] = &funding_key_arr;
	LDKu8slice funding_redeemscript_ref;
	funding_redeemscript_ref.datalen = (*env)->GetArrayLength(env, funding_redeemscript);
	funding_redeemscript_ref.data = (*env)->GetByteArrayElements (env, funding_redeemscript, NULL);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, BuiltCommitmentTransaction_sign(&this_arg_conv, funding_key_ref, funding_redeemscript_ref, channel_value_satoshis).compact_form);
	(*env)->ReleaseByteArrayElements(env, funding_redeemscript, (int8_t*)funding_redeemscript_ref.data, 0);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKClosingTransaction this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ClosingTransaction_free(this_obj_conv);
}

static inline uintptr_t ClosingTransaction_clone_ptr(LDKClosingTransaction *NONNULL_PTR arg) {
	LDKClosingTransaction ret_var = ClosingTransaction_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKClosingTransaction arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ClosingTransaction_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKClosingTransaction orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKClosingTransaction ret_var = ClosingTransaction_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKClosingTransaction o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = ClosingTransaction_hash(&o_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1new(JNIEnv *env, jclass clz, int64_t to_holder_value_sat, int64_t to_counterparty_value_sat, int8_tArray to_holder_script, int8_tArray to_counterparty_script, int64_t funding_outpoint) {
	LDKCVec_u8Z to_holder_script_ref;
	to_holder_script_ref.datalen = (*env)->GetArrayLength(env, to_holder_script);
	to_holder_script_ref.data = MALLOC(to_holder_script_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, to_holder_script, 0, to_holder_script_ref.datalen, to_holder_script_ref.data);
	LDKCVec_u8Z to_counterparty_script_ref;
	to_counterparty_script_ref.datalen = (*env)->GetArrayLength(env, to_counterparty_script);
	to_counterparty_script_ref.data = MALLOC(to_counterparty_script_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, to_counterparty_script, 0, to_counterparty_script_ref.datalen, to_counterparty_script_ref.data);
	LDKOutPoint funding_outpoint_conv;
	funding_outpoint_conv.inner = (void*)(funding_outpoint & (~1));
	funding_outpoint_conv.is_owned = (funding_outpoint & 1) || (funding_outpoint == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_outpoint_conv);
	funding_outpoint_conv = OutPoint_clone(&funding_outpoint_conv);
	LDKClosingTransaction ret_var = ClosingTransaction_new(to_holder_value_sat, to_counterparty_value_sat, to_holder_script_ref, to_counterparty_script_ref, funding_outpoint_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1trust(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKTrustedClosingTransaction ret_var = ClosingTransaction_trust(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1verify(JNIEnv *env, jclass clz, int64_t this_arg, int64_t funding_outpoint) {
	LDKClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKOutPoint funding_outpoint_conv;
	funding_outpoint_conv.inner = (void*)(funding_outpoint & (~1));
	funding_outpoint_conv.is_owned = (funding_outpoint & 1) || (funding_outpoint == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(funding_outpoint_conv);
	funding_outpoint_conv = OutPoint_clone(&funding_outpoint_conv);
	LDKCResult_TrustedClosingTransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TrustedClosingTransactionNoneZ), "LDKCResult_TrustedClosingTransactionNoneZ");
	*ret_conv = ClosingTransaction_verify(&this_arg_conv, funding_outpoint_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1to_1holder_1value_1sat(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = ClosingTransaction_to_holder_value_sat(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1to_1counterparty_1value_1sat(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = ClosingTransaction_to_counterparty_value_sat(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1to_1holder_1script(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKu8slice ret_var = ClosingTransaction_to_holder_script(&this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ClosingTransaction_1to_1counterparty_1script(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKu8slice ret_var = ClosingTransaction_to_counterparty_script(&this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TrustedClosingTransaction_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKTrustedClosingTransaction this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	TrustedClosingTransaction_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TrustedClosingTransaction_1built_1transaction(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKTrustedClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKTransaction ret_var = TrustedClosingTransaction_built_transaction(&this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	Transaction_free(ret_var);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TrustedClosingTransaction_1get_1sighash_1all(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray funding_redeemscript, int64_t channel_value_satoshis) {
	LDKTrustedClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKu8slice funding_redeemscript_ref;
	funding_redeemscript_ref.datalen = (*env)->GetArrayLength(env, funding_redeemscript);
	funding_redeemscript_ref.data = (*env)->GetByteArrayElements (env, funding_redeemscript, NULL);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, TrustedClosingTransaction_get_sighash_all(&this_arg_conv, funding_redeemscript_ref, channel_value_satoshis).data);
	(*env)->ReleaseByteArrayElements(env, funding_redeemscript, (int8_t*)funding_redeemscript_ref.data, 0);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TrustedClosingTransaction_1sign(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray funding_key, int8_tArray funding_redeemscript, int64_t channel_value_satoshis) {
	LDKTrustedClosingTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char funding_key_arr[32];
	CHECK((*env)->GetArrayLength(env, funding_key) == 32);
	(*env)->GetByteArrayRegion(env, funding_key, 0, 32, funding_key_arr);
	unsigned char (*funding_key_ref)[32] = &funding_key_arr;
	LDKu8slice funding_redeemscript_ref;
	funding_redeemscript_ref.datalen = (*env)->GetArrayLength(env, funding_redeemscript);
	funding_redeemscript_ref.data = (*env)->GetByteArrayElements (env, funding_redeemscript, NULL);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 64);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 64, TrustedClosingTransaction_sign(&this_arg_conv, funding_key_ref, funding_redeemscript_ref, channel_value_satoshis).compact_form);
	(*env)->ReleaseByteArrayElements(env, funding_redeemscript, (int8_t*)funding_redeemscript_ref.data, 0);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKCommitmentTransaction this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	CommitmentTransaction_free(this_obj_conv);
}

static inline uintptr_t CommitmentTransaction_clone_ptr(LDKCommitmentTransaction *NONNULL_PTR arg) {
	LDKCommitmentTransaction ret_var = CommitmentTransaction_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKCommitmentTransaction arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = CommitmentTransaction_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCommitmentTransaction orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKCommitmentTransaction ret_var = CommitmentTransaction_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKCommitmentTransaction obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = CommitmentTransaction_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_CommitmentTransactionDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CommitmentTransactionDecodeErrorZ), "LDKCResult_CommitmentTransactionDecodeErrorZ");
	*ret_conv = CommitmentTransaction_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1commitment_1number(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = CommitmentTransaction_commitment_number(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1to_1broadcaster_1value_1sat(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = CommitmentTransaction_to_broadcaster_value_sat(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1to_1countersignatory_1value_1sat(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = CommitmentTransaction_to_countersignatory_value_sat(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1feerate_1per_1kw(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int32_t ret_val = CommitmentTransaction_feerate_per_kw(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1trust(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKTrustedCommitmentTransaction ret_var = CommitmentTransaction_trust(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_CommitmentTransaction_1verify(JNIEnv *env, jclass clz, int64_t this_arg, int64_t channel_parameters, int64_t broadcaster_keys, int64_t countersignatory_keys) {
	LDKCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKDirectedChannelTransactionParameters channel_parameters_conv;
	channel_parameters_conv.inner = (void*)(channel_parameters & (~1));
	channel_parameters_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_parameters_conv);
	LDKChannelPublicKeys broadcaster_keys_conv;
	broadcaster_keys_conv.inner = (void*)(broadcaster_keys & (~1));
	broadcaster_keys_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(broadcaster_keys_conv);
	LDKChannelPublicKeys countersignatory_keys_conv;
	countersignatory_keys_conv.inner = (void*)(countersignatory_keys & (~1));
	countersignatory_keys_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(countersignatory_keys_conv);
	LDKCResult_TrustedCommitmentTransactionNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_TrustedCommitmentTransactionNoneZ), "LDKCResult_TrustedCommitmentTransactionNoneZ");
	*ret_conv = CommitmentTransaction_verify(&this_arg_conv, &channel_parameters_conv, &broadcaster_keys_conv, &countersignatory_keys_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_TrustedCommitmentTransaction_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKTrustedCommitmentTransaction this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	TrustedCommitmentTransaction_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_TrustedCommitmentTransaction_1txid(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKTrustedCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, TrustedCommitmentTransaction_txid(&this_arg_conv).data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TrustedCommitmentTransaction_1built_1transaction(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKTrustedCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKBuiltCommitmentTransaction ret_var = TrustedCommitmentTransaction_built_transaction(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TrustedCommitmentTransaction_1keys(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKTrustedCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKTxCreationKeys ret_var = TrustedCommitmentTransaction_keys(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_TrustedCommitmentTransaction_1opt_1anchors(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKTrustedCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = TrustedCommitmentTransaction_opt_anchors(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_TrustedCommitmentTransaction_1get_1htlc_1sigs(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray htlc_base_key, int64_t channel_parameters) {
	LDKTrustedCommitmentTransaction this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char htlc_base_key_arr[32];
	CHECK((*env)->GetArrayLength(env, htlc_base_key) == 32);
	(*env)->GetByteArrayRegion(env, htlc_base_key, 0, 32, htlc_base_key_arr);
	unsigned char (*htlc_base_key_ref)[32] = &htlc_base_key_arr;
	LDKDirectedChannelTransactionParameters channel_parameters_conv;
	channel_parameters_conv.inner = (void*)(channel_parameters & (~1));
	channel_parameters_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_parameters_conv);
	LDKCResult_CVec_SignatureZNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_SignatureZNoneZ), "LDKCResult_CVec_SignatureZNoneZ");
	*ret_conv = TrustedCommitmentTransaction_get_htlc_sigs(&this_arg_conv, htlc_base_key_ref, &channel_parameters_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_get_1commitment_1transaction_1number_1obscure_1factor(JNIEnv *env, jclass clz, int8_tArray broadcaster_payment_basepoint, int8_tArray countersignatory_payment_basepoint, jboolean outbound_from_broadcaster) {
	LDKPublicKey broadcaster_payment_basepoint_ref;
	CHECK((*env)->GetArrayLength(env, broadcaster_payment_basepoint) == 33);
	(*env)->GetByteArrayRegion(env, broadcaster_payment_basepoint, 0, 33, broadcaster_payment_basepoint_ref.compressed_form);
	LDKPublicKey countersignatory_payment_basepoint_ref;
	CHECK((*env)->GetArrayLength(env, countersignatory_payment_basepoint) == 33);
	(*env)->GetByteArrayRegion(env, countersignatory_payment_basepoint, 0, 33, countersignatory_payment_basepoint_ref.compressed_form);
	int64_t ret_val = get_commitment_transaction_number_obscure_factor(broadcaster_payment_basepoint_ref, countersignatory_payment_basepoint_ref, outbound_from_broadcaster);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_InitFeatures_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKInitFeatures a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKInitFeatures b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = InitFeatures_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKNodeFeatures a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKNodeFeatures b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = NodeFeatures_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKChannelFeatures a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKChannelFeatures b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = ChannelFeatures_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKInvoiceFeatures a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKInvoiceFeatures b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = InvoiceFeatures_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKChannelTypeFeatures a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKChannelTypeFeatures b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = ChannelTypeFeatures_eq(&a_conv, &b_conv);
	return ret_val;
}

static inline uintptr_t InitFeatures_clone_ptr(LDKInitFeatures *NONNULL_PTR arg) {
	LDKInitFeatures ret_var = InitFeatures_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InitFeatures_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKInitFeatures arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = InitFeatures_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InitFeatures_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKInitFeatures orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKInitFeatures ret_var = InitFeatures_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t NodeFeatures_clone_ptr(LDKNodeFeatures *NONNULL_PTR arg) {
	LDKNodeFeatures ret_var = NodeFeatures_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNodeFeatures arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = NodeFeatures_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNodeFeatures orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKNodeFeatures ret_var = NodeFeatures_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelFeatures_clone_ptr(LDKChannelFeatures *NONNULL_PTR arg) {
	LDKChannelFeatures ret_var = ChannelFeatures_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelFeatures arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelFeatures_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelFeatures orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelFeatures ret_var = ChannelFeatures_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t InvoiceFeatures_clone_ptr(LDKInvoiceFeatures *NONNULL_PTR arg) {
	LDKInvoiceFeatures ret_var = InvoiceFeatures_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKInvoiceFeatures arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = InvoiceFeatures_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKInvoiceFeatures orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKInvoiceFeatures ret_var = InvoiceFeatures_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelTypeFeatures_clone_ptr(LDKChannelTypeFeatures *NONNULL_PTR arg) {
	LDKChannelTypeFeatures ret_var = ChannelTypeFeatures_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelTypeFeatures arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelTypeFeatures_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelTypeFeatures orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelTypeFeatures ret_var = ChannelTypeFeatures_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InitFeatures_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInitFeatures this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	InitFeatures_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKNodeFeatures this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	NodeFeatures_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelFeatures this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelFeatures_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInvoiceFeatures this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	InvoiceFeatures_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelTypeFeatures this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelTypeFeatures_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InitFeatures_1empty(JNIEnv *env, jclass clz) {
	LDKInitFeatures ret_var = InitFeatures_empty();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InitFeatures_1known(JNIEnv *env, jclass clz) {
	LDKInitFeatures ret_var = InitFeatures_known();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_InitFeatures_1requires_1unknown_1bits(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInitFeatures this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = InitFeatures_requires_unknown_bits(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1empty(JNIEnv *env, jclass clz) {
	LDKNodeFeatures ret_var = NodeFeatures_empty();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1known(JNIEnv *env, jclass clz) {
	LDKNodeFeatures ret_var = NodeFeatures_known();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1requires_1unknown_1bits(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKNodeFeatures this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = NodeFeatures_requires_unknown_bits(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1empty(JNIEnv *env, jclass clz) {
	LDKChannelFeatures ret_var = ChannelFeatures_empty();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1known(JNIEnv *env, jclass clz) {
	LDKChannelFeatures ret_var = ChannelFeatures_known();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1requires_1unknown_1bits(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelFeatures this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = ChannelFeatures_requires_unknown_bits(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1empty(JNIEnv *env, jclass clz) {
	LDKInvoiceFeatures ret_var = InvoiceFeatures_empty();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1known(JNIEnv *env, jclass clz) {
	LDKInvoiceFeatures ret_var = InvoiceFeatures_known();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1requires_1unknown_1bits(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoiceFeatures this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = InvoiceFeatures_requires_unknown_bits(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1empty(JNIEnv *env, jclass clz) {
	LDKChannelTypeFeatures ret_var = ChannelTypeFeatures_empty();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1known(JNIEnv *env, jclass clz) {
	LDKChannelTypeFeatures ret_var = ChannelTypeFeatures_known();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1requires_1unknown_1bits(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelTypeFeatures this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = ChannelTypeFeatures_requires_unknown_bits(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InitFeatures_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKInitFeatures obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = InitFeatures_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InitFeatures_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_InitFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InitFeaturesDecodeErrorZ), "LDKCResult_InitFeaturesDecodeErrorZ");
	*ret_conv = InitFeatures_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelFeatures obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelFeatures_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelFeatures_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelFeaturesDecodeErrorZ), "LDKCResult_ChannelFeaturesDecodeErrorZ");
	*ret_conv = ChannelFeatures_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNodeFeatures obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = NodeFeatures_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeFeatures_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_NodeFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeFeaturesDecodeErrorZ), "LDKCResult_NodeFeaturesDecodeErrorZ");
	*ret_conv = NodeFeatures_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKInvoiceFeatures obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = InvoiceFeatures_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoiceFeatures_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_InvoiceFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceFeaturesDecodeErrorZ), "LDKCResult_InvoiceFeaturesDecodeErrorZ");
	*ret_conv = InvoiceFeatures_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelTypeFeatures obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelTypeFeatures_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelTypeFeatures_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelTypeFeaturesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelTypeFeaturesDecodeErrorZ), "LDKCResult_ChannelTypeFeaturesDecodeErrorZ");
	*ret_conv = ChannelTypeFeatures_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKShutdownScript this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ShutdownScript_free(this_obj_conv);
}

static inline uintptr_t ShutdownScript_clone_ptr(LDKShutdownScript *NONNULL_PTR arg) {
	LDKShutdownScript ret_var = ShutdownScript_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKShutdownScript arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ShutdownScript_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKShutdownScript orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKShutdownScript ret_var = ShutdownScript_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InvalidShutdownScript_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInvalidShutdownScript this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	InvalidShutdownScript_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_InvalidShutdownScript_1get_1script(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKInvalidShutdownScript this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKu8slice ret_var = InvalidShutdownScript_get_script(&this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InvalidShutdownScript_1set_1script(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKInvalidShutdownScript this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_u8Z val_ref;
	val_ref.datalen = (*env)->GetArrayLength(env, val);
	val_ref.data = MALLOC(val_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, val, 0, val_ref.datalen, val_ref.data);
	InvalidShutdownScript_set_script(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvalidShutdownScript_1new(JNIEnv *env, jclass clz, int8_tArray script_arg) {
	LDKCVec_u8Z script_arg_ref;
	script_arg_ref.datalen = (*env)->GetArrayLength(env, script_arg);
	script_arg_ref.data = MALLOC(script_arg_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, script_arg, 0, script_arg_ref.datalen, script_arg_ref.data);
	LDKInvalidShutdownScript ret_var = InvalidShutdownScript_new(script_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t InvalidShutdownScript_clone_ptr(LDKInvalidShutdownScript *NONNULL_PTR arg) {
	LDKInvalidShutdownScript ret_var = InvalidShutdownScript_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvalidShutdownScript_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKInvalidShutdownScript arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = InvalidShutdownScript_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvalidShutdownScript_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKInvalidShutdownScript orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKInvalidShutdownScript ret_var = InvalidShutdownScript_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKShutdownScript obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ShutdownScript_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ShutdownScriptDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptDecodeErrorZ), "LDKCResult_ShutdownScriptDecodeErrorZ");
	*ret_conv = ShutdownScript_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1new_1p2wpkh(JNIEnv *env, jclass clz, int8_tArray pubkey_hash) {
	unsigned char pubkey_hash_arr[20];
	CHECK((*env)->GetArrayLength(env, pubkey_hash) == 20);
	(*env)->GetByteArrayRegion(env, pubkey_hash, 0, 20, pubkey_hash_arr);
	unsigned char (*pubkey_hash_ref)[20] = &pubkey_hash_arr;
	LDKShutdownScript ret_var = ShutdownScript_new_p2wpkh(pubkey_hash_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1new_1p2wsh(JNIEnv *env, jclass clz, int8_tArray script_hash) {
	unsigned char script_hash_arr[32];
	CHECK((*env)->GetArrayLength(env, script_hash) == 32);
	(*env)->GetByteArrayRegion(env, script_hash, 0, 32, script_hash_arr);
	unsigned char (*script_hash_ref)[32] = &script_hash_arr;
	LDKShutdownScript ret_var = ShutdownScript_new_p2wsh(script_hash_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1new_1witness_1program(JNIEnv *env, jclass clz, int8_t version, int8_tArray program) {
	LDKu8slice program_ref;
	program_ref.datalen = (*env)->GetArrayLength(env, program);
	program_ref.data = (*env)->GetByteArrayElements (env, program, NULL);
	LDKCResult_ShutdownScriptInvalidShutdownScriptZ* ret_conv = MALLOC(sizeof(LDKCResult_ShutdownScriptInvalidShutdownScriptZ), "LDKCResult_ShutdownScriptInvalidShutdownScriptZ");
	*ret_conv = ShutdownScript_new_witness_program(version, program_ref);
	(*env)->ReleaseByteArrayElements(env, program, (int8_t*)program_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1into_1inner(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKShutdownScript this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = (this_arg & 1) || (this_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	this_arg_conv = ShutdownScript_clone(&this_arg_conv);
	LDKCVec_u8Z ret_var = ShutdownScript_into_inner(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1as_1legacy_1pubkey(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKShutdownScript this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, ShutdownScript_as_legacy_pubkey(&this_arg_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ShutdownScript_1is_1compatible(JNIEnv *env, jclass clz, int64_t this_arg, int64_t features) {
	LDKShutdownScript this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKInitFeatures features_conv;
	features_conv.inner = (void*)(features & (~1));
	features_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(features_conv);
	jboolean ret_val = ShutdownScript_is_compatible(&this_arg_conv, &features_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_CustomMessageReader_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKCustomMessageReader this_ptr_conv = *(LDKCustomMessageReader*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	CustomMessageReader_free(this_ptr_conv);
}

static inline uintptr_t Type_clone_ptr(LDKType *NONNULL_PTR arg) {
	LDKType* ret_ret = MALLOC(sizeof(LDKType), "LDKType");
	*ret_ret = Type_clone(arg);
	return (uintptr_t)ret_ret;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Type_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	void* arg_ptr = (void*)(((uintptr_t)arg) & ~1);
	if (!(arg & 1)) { CHECK_ACCESS(arg_ptr); }
	LDKType* arg_conv = (LDKType*)arg_ptr;
	int64_t ret_val = Type_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Type_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	void* orig_ptr = (void*)(((uintptr_t)orig) & ~1);
	if (!(orig & 1)) { CHECK_ACCESS(orig_ptr); }
	LDKType* orig_conv = (LDKType*)orig_ptr;
	LDKType* ret_ret = MALLOC(sizeof(LDKType), "LDKType");
	*ret_ret = Type_clone(orig_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Type_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKType this_ptr_conv = *(LDKType*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Type_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeId_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKNodeId this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	NodeId_free(this_obj_conv);
}

static inline uintptr_t NodeId_clone_ptr(LDKNodeId *NONNULL_PTR arg) {
	LDKNodeId ret_var = NodeId_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeId_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNodeId arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = NodeId_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeId_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNodeId orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKNodeId ret_var = NodeId_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeId_1from_1pubkey(JNIEnv *env, jclass clz, int8_tArray pubkey) {
	LDKPublicKey pubkey_ref;
	CHECK((*env)->GetArrayLength(env, pubkey) == 33);
	(*env)->GetByteArrayRegion(env, pubkey, 0, 33, pubkey_ref.compressed_form);
	LDKNodeId ret_var = NodeId_from_pubkey(pubkey_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeId_1as_1slice(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKNodeId this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKu8slice ret_var = NodeId_as_slice(&this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeId_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKNodeId o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = NodeId_hash(&o_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeId_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNodeId obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = NodeId_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeId_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_NodeIdDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeIdDecodeErrorZ), "LDKCResult_NodeIdDecodeErrorZ");
	*ret_conv = NodeId_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKNetworkGraph this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	NetworkGraph_free(this_obj_conv);
}

static inline uintptr_t NetworkGraph_clone_ptr(LDKNetworkGraph *NONNULL_PTR arg) {
	LDKNetworkGraph ret_var = NetworkGraph_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNetworkGraph arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = NetworkGraph_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNetworkGraph orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKNetworkGraph ret_var = NetworkGraph_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ReadOnlyNetworkGraph_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKReadOnlyNetworkGraph this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ReadOnlyNetworkGraph_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKNetworkUpdate this_ptr_conv = *(LDKNetworkUpdate*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	NetworkUpdate_free(this_ptr_conv);
}

static inline uintptr_t NetworkUpdate_clone_ptr(LDKNetworkUpdate *NONNULL_PTR arg) {
	LDKNetworkUpdate *ret_copy = MALLOC(sizeof(LDKNetworkUpdate), "LDKNetworkUpdate");
	*ret_copy = NetworkUpdate_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNetworkUpdate* arg_conv = (LDKNetworkUpdate*)arg;
	int64_t ret_val = NetworkUpdate_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNetworkUpdate* orig_conv = (LDKNetworkUpdate*)orig;
	LDKNetworkUpdate *ret_copy = MALLOC(sizeof(LDKNetworkUpdate), "LDKNetworkUpdate");
	*ret_copy = NetworkUpdate_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1channel_1update_1message(JNIEnv *env, jclass clz, int64_t msg) {
	LDKChannelUpdate msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = (msg & 1) || (msg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	msg_conv = ChannelUpdate_clone(&msg_conv);
	LDKNetworkUpdate *ret_copy = MALLOC(sizeof(LDKNetworkUpdate), "LDKNetworkUpdate");
	*ret_copy = NetworkUpdate_channel_update_message(msg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1channel_1closed(JNIEnv *env, jclass clz, int64_t short_channel_id, jboolean is_permanent) {
	LDKNetworkUpdate *ret_copy = MALLOC(sizeof(LDKNetworkUpdate), "LDKNetworkUpdate");
	*ret_copy = NetworkUpdate_channel_closed(short_channel_id, is_permanent);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1node_1failure(JNIEnv *env, jclass clz, int8_tArray node_id, jboolean is_permanent) {
	LDKPublicKey node_id_ref;
	CHECK((*env)->GetArrayLength(env, node_id) == 33);
	(*env)->GetByteArrayRegion(env, node_id, 0, 33, node_id_ref.compressed_form);
	LDKNetworkUpdate *ret_copy = MALLOC(sizeof(LDKNetworkUpdate), "LDKNetworkUpdate");
	*ret_copy = NetworkUpdate_node_failure(node_id_ref, is_permanent);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNetworkUpdate* obj_conv = (LDKNetworkUpdate*)obj;
	LDKCVec_u8Z ret_var = NetworkUpdate_write(obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkUpdate_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_COption_NetworkUpdateZDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_COption_NetworkUpdateZDecodeErrorZ), "LDKCResult_COption_NetworkUpdateZDecodeErrorZ");
	*ret_conv = NetworkUpdate_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetGraphMsgHandler_1as_1EventHandler(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKNetGraphMsgHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKEventHandler* ret_ret = MALLOC(sizeof(LDKEventHandler), "LDKEventHandler");
	*ret_ret = NetGraphMsgHandler_as_EventHandler(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetGraphMsgHandler_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKNetGraphMsgHandler this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	NetGraphMsgHandler_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetGraphMsgHandler_1new(JNIEnv *env, jclass clz, int64_t network_graph, int64_t chain_access, int64_t logger) {
	LDKNetworkGraph network_graph_conv;
	network_graph_conv.inner = (void*)(network_graph & (~1));
	network_graph_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(network_graph_conv);
	void* chain_access_ptr = (void*)(((uintptr_t)chain_access) & ~1);
	CHECK_ACCESS(chain_access_ptr);
	LDKCOption_AccessZ chain_access_conv = *(LDKCOption_AccessZ*)(chain_access_ptr);
	// WARNING: we may need a move here but no clone is available for LDKCOption_AccessZ
	if (chain_access_conv.tag == LDKCOption_AccessZ_Some) {
		// Manually implement clone for Java trait instances
		if (chain_access_conv.some.free == LDKAccess_JCalls_free) {
			// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
			LDKAccess_JCalls_cloned(&chain_access_conv.some);
		}
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	LDKNetGraphMsgHandler ret_var = NetGraphMsgHandler_new(&network_graph_conv, chain_access_conv, logger_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetGraphMsgHandler_1add_1chain_1access(JNIEnv *env, jclass clz, int64_t this_arg, int64_t chain_access) {
	LDKNetGraphMsgHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* chain_access_ptr = (void*)(((uintptr_t)chain_access) & ~1);
	CHECK_ACCESS(chain_access_ptr);
	LDKCOption_AccessZ chain_access_conv = *(LDKCOption_AccessZ*)(chain_access_ptr);
	// WARNING: we may need a move here but no clone is available for LDKCOption_AccessZ
	if (chain_access_conv.tag == LDKCOption_AccessZ_Some) {
		// Manually implement clone for Java trait instances
		if (chain_access_conv.some.free == LDKAccess_JCalls_free) {
			// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
			LDKAccess_JCalls_cloned(&chain_access_conv.some);
		}
	}
	NetGraphMsgHandler_add_chain_access(&this_arg_conv, chain_access_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetGraphMsgHandler_1as_1RoutingMessageHandler(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKNetGraphMsgHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKRoutingMessageHandler* ret_ret = MALLOC(sizeof(LDKRoutingMessageHandler), "LDKRoutingMessageHandler");
	*ret_ret = NetGraphMsgHandler_as_RoutingMessageHandler(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetGraphMsgHandler_1as_1MessageSendEventsProvider(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKNetGraphMsgHandler this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKMessageSendEventsProvider* ret_ret = MALLOC(sizeof(LDKMessageSendEventsProvider), "LDKMessageSendEventsProvider");
	*ret_ret = NetGraphMsgHandler_as_MessageSendEventsProvider(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelUpdateInfo this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelUpdateInfo_free(this_obj_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1get_1last_1update(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = ChannelUpdateInfo_get_last_update(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1set_1last_1update(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelUpdateInfo_set_last_update(&this_ptr_conv, val);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1get_1enabled(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	jboolean ret_val = ChannelUpdateInfo_get_enabled(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1set_1enabled(JNIEnv *env, jclass clz, int64_t this_ptr, jboolean val) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelUpdateInfo_set_enabled(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1get_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = ChannelUpdateInfo_get_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1set_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelUpdateInfo_set_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1get_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ChannelUpdateInfo_get_htlc_minimum_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1set_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ChannelUpdateInfo_set_htlc_minimum_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1get_1htlc_1maximum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = ChannelUpdateInfo_get_htlc_maximum_msat(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1set_1htlc_1maximum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u64Z val_conv = *(LDKCOption_u64Z*)(val_ptr);
	val_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)val) & ~1));
	ChannelUpdateInfo_set_htlc_maximum_msat(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1get_1fees(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRoutingFees ret_var = ChannelUpdateInfo_get_fees(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1set_1fees(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRoutingFees val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = RoutingFees_clone(&val_conv);
	ChannelUpdateInfo_set_fees(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1get_1last_1update_1message(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelUpdate ret_var = ChannelUpdateInfo_get_last_update_message(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1set_1last_1update_1message(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelUpdateInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelUpdate val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelUpdate_clone(&val_conv);
	ChannelUpdateInfo_set_last_update_message(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1new(JNIEnv *env, jclass clz, int32_t last_update_arg, jboolean enabled_arg, int16_t cltv_expiry_delta_arg, int64_t htlc_minimum_msat_arg, int64_t htlc_maximum_msat_arg, int64_t fees_arg, int64_t last_update_message_arg) {
	void* htlc_maximum_msat_arg_ptr = (void*)(((uintptr_t)htlc_maximum_msat_arg) & ~1);
	CHECK_ACCESS(htlc_maximum_msat_arg_ptr);
	LDKCOption_u64Z htlc_maximum_msat_arg_conv = *(LDKCOption_u64Z*)(htlc_maximum_msat_arg_ptr);
	htlc_maximum_msat_arg_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)htlc_maximum_msat_arg) & ~1));
	LDKRoutingFees fees_arg_conv;
	fees_arg_conv.inner = (void*)(fees_arg & (~1));
	fees_arg_conv.is_owned = (fees_arg & 1) || (fees_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(fees_arg_conv);
	fees_arg_conv = RoutingFees_clone(&fees_arg_conv);
	LDKChannelUpdate last_update_message_arg_conv;
	last_update_message_arg_conv.inner = (void*)(last_update_message_arg & (~1));
	last_update_message_arg_conv.is_owned = (last_update_message_arg & 1) || (last_update_message_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(last_update_message_arg_conv);
	last_update_message_arg_conv = ChannelUpdate_clone(&last_update_message_arg_conv);
	LDKChannelUpdateInfo ret_var = ChannelUpdateInfo_new(last_update_arg, enabled_arg, cltv_expiry_delta_arg, htlc_minimum_msat_arg, htlc_maximum_msat_arg_conv, fees_arg_conv, last_update_message_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ChannelUpdateInfo_clone_ptr(LDKChannelUpdateInfo *NONNULL_PTR arg) {
	LDKChannelUpdateInfo ret_var = ChannelUpdateInfo_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelUpdateInfo arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelUpdateInfo_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelUpdateInfo orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelUpdateInfo ret_var = ChannelUpdateInfo_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelUpdateInfo obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelUpdateInfo_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelUpdateInfo_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelUpdateInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelUpdateInfoDecodeErrorZ), "LDKCResult_ChannelUpdateInfoDecodeErrorZ");
	*ret_conv = ChannelUpdateInfo_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKChannelInfo this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ChannelInfo_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1get_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelFeatures ret_var = ChannelInfo_get_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1set_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelFeatures_clone(&val_conv);
	ChannelInfo_set_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1get_1node_1one(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeId ret_var = ChannelInfo_get_node_one(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1set_1node_1one(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeId val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = NodeId_clone(&val_conv);
	ChannelInfo_set_node_one(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1get_1one_1to_1two(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelUpdateInfo ret_var = ChannelInfo_get_one_to_two(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1set_1one_1to_1two(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelUpdateInfo val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelUpdateInfo_clone(&val_conv);
	ChannelInfo_set_one_to_two(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1get_1node_1two(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeId ret_var = ChannelInfo_get_node_two(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1set_1node_1two(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeId val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = NodeId_clone(&val_conv);
	ChannelInfo_set_node_two(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1get_1two_1to_1one(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelUpdateInfo ret_var = ChannelInfo_get_two_to_one(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1set_1two_1to_1one(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelUpdateInfo val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelUpdateInfo_clone(&val_conv);
	ChannelInfo_set_two_to_one(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1get_1capacity_1sats(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = ChannelInfo_get_capacity_sats(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1set_1capacity_1sats(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u64Z val_conv = *(LDKCOption_u64Z*)(val_ptr);
	val_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)val) & ~1));
	ChannelInfo_set_capacity_sats(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1get_1announcement_1message(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelAnnouncement ret_var = ChannelInfo_get_announcement_message(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1set_1announcement_1message(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKChannelInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelAnnouncement val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelAnnouncement_clone(&val_conv);
	ChannelInfo_set_announcement_message(&this_ptr_conv, val_conv);
}

static inline uintptr_t ChannelInfo_clone_ptr(LDKChannelInfo *NONNULL_PTR arg) {
	LDKChannelInfo ret_var = ChannelInfo_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKChannelInfo arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ChannelInfo_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKChannelInfo orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKChannelInfo ret_var = ChannelInfo_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKChannelInfo obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ChannelInfo_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelInfo_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ChannelInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ChannelInfoDecodeErrorZ), "LDKCResult_ChannelInfoDecodeErrorZ");
	*ret_conv = ChannelInfo_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DirectedChannelInfo_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKDirectedChannelInfo this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	DirectedChannelInfo_free(this_obj_conv);
}

static inline uintptr_t DirectedChannelInfo_clone_ptr(LDKDirectedChannelInfo *NONNULL_PTR arg) {
	LDKDirectedChannelInfo ret_var = DirectedChannelInfo_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelInfo_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKDirectedChannelInfo arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = DirectedChannelInfo_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelInfo_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKDirectedChannelInfo orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKDirectedChannelInfo ret_var = DirectedChannelInfo_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelInfo_1channel(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelInfo this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelInfo ret_var = DirectedChannelInfo_channel(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelInfo_1direction(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelInfo this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelUpdateInfo ret_var = DirectedChannelInfo_direction(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DirectedChannelInfo_1effective_1capacity(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDirectedChannelInfo this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = DirectedChannelInfo_effective_capacity(&this_arg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKEffectiveCapacity this_ptr_conv = *(LDKEffectiveCapacity*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	EffectiveCapacity_free(this_ptr_conv);
}

static inline uintptr_t EffectiveCapacity_clone_ptr(LDKEffectiveCapacity *NONNULL_PTR arg) {
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = EffectiveCapacity_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKEffectiveCapacity* arg_conv = (LDKEffectiveCapacity*)arg;
	int64_t ret_val = EffectiveCapacity_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKEffectiveCapacity* orig_conv = (LDKEffectiveCapacity*)orig;
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = EffectiveCapacity_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1exact_1liquidity(JNIEnv *env, jclass clz, int64_t liquidity_msat) {
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = EffectiveCapacity_exact_liquidity(liquidity_msat);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1maximum_1htlc(JNIEnv *env, jclass clz, int64_t amount_msat) {
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = EffectiveCapacity_maximum_htlc(amount_msat);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1total(JNIEnv *env, jclass clz, int64_t capacity_msat) {
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = EffectiveCapacity_total(capacity_msat);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1infinite(JNIEnv *env, jclass clz) {
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = EffectiveCapacity_infinite();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1unknown(JNIEnv *env, jclass clz) {
	LDKEffectiveCapacity *ret_copy = MALLOC(sizeof(LDKEffectiveCapacity), "LDKEffectiveCapacity");
	*ret_copy = EffectiveCapacity_unknown();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_EffectiveCapacity_1as_1msat(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKEffectiveCapacity* this_arg_conv = (LDKEffectiveCapacity*)this_arg;
	int64_t ret_val = EffectiveCapacity_as_msat(this_arg_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RoutingFees_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRoutingFees this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RoutingFees_free(this_obj_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_RoutingFees_1get_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRoutingFees this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = RoutingFees_get_base_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RoutingFees_1set_1base_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKRoutingFees this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RoutingFees_set_base_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_RoutingFees_1get_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRoutingFees this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = RoutingFees_get_proportional_millionths(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RoutingFees_1set_1proportional_1millionths(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKRoutingFees this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RoutingFees_set_proportional_millionths(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingFees_1new(JNIEnv *env, jclass clz, int32_t base_msat_arg, int32_t proportional_millionths_arg) {
	LDKRoutingFees ret_var = RoutingFees_new(base_msat_arg, proportional_millionths_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_RoutingFees_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRoutingFees a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRoutingFees b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = RoutingFees_eq(&a_conv, &b_conv);
	return ret_val;
}

static inline uintptr_t RoutingFees_clone_ptr(LDKRoutingFees *NONNULL_PTR arg) {
	LDKRoutingFees ret_var = RoutingFees_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingFees_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRoutingFees arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RoutingFees_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingFees_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRoutingFees orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRoutingFees ret_var = RoutingFees_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingFees_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKRoutingFees o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = RoutingFees_hash(&o_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RoutingFees_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKRoutingFees obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = RoutingFees_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RoutingFees_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_RoutingFeesDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RoutingFeesDecodeErrorZ), "LDKCResult_RoutingFeesDecodeErrorZ");
	*ret_conv = RoutingFees_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKNodeAnnouncementInfo this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	NodeAnnouncementInfo_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1get_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeFeatures ret_var = NodeAnnouncementInfo_get_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1set_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = NodeFeatures_clone(&val_conv);
	NodeAnnouncementInfo_set_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1get_1last_1update(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = NodeAnnouncementInfo_get_last_update(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1set_1last_1update(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	NodeAnnouncementInfo_set_last_update(&this_ptr_conv, val);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1get_1rgb(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 3);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 3, *NodeAnnouncementInfo_get_rgb(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1set_1rgb(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThreeBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 3);
	(*env)->GetByteArrayRegion(env, val, 0, 3, val_ref.data);
	NodeAnnouncementInfo_set_rgb(&this_ptr_conv, val_ref);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1get_1alias(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *NodeAnnouncementInfo_get_alias(&this_ptr_conv));
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1set_1alias(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKThirtyTwoBytes val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 32);
	(*env)->GetByteArrayRegion(env, val, 0, 32, val_ref.data);
	NodeAnnouncementInfo_set_alias(&this_ptr_conv, val_ref);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1set_1addresses(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_NetAddressZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKNetAddress), "LDKCVec_NetAddressZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t m = 0; m < val_constr.datalen; m++) {
		int64_t val_conv_12 = val_vals[m];
		void* val_conv_12_ptr = (void*)(((uintptr_t)val_conv_12) & ~1);
		CHECK_ACCESS(val_conv_12_ptr);
		LDKNetAddress val_conv_12_conv = *(LDKNetAddress*)(val_conv_12_ptr);
		val_conv_12_conv = NetAddress_clone((LDKNetAddress*)(((uintptr_t)val_conv_12) & ~1));
		val_constr.data[m] = val_conv_12_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	NodeAnnouncementInfo_set_addresses(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1get_1announcement_1message(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeAnnouncement ret_var = NodeAnnouncementInfo_get_announcement_message(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1set_1announcement_1message(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKNodeAnnouncementInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeAnnouncement val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = NodeAnnouncement_clone(&val_conv);
	NodeAnnouncementInfo_set_announcement_message(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1new(JNIEnv *env, jclass clz, int64_t features_arg, int32_t last_update_arg, int8_tArray rgb_arg, int8_tArray alias_arg, int64_tArray addresses_arg, int64_t announcement_message_arg) {
	LDKNodeFeatures features_arg_conv;
	features_arg_conv.inner = (void*)(features_arg & (~1));
	features_arg_conv.is_owned = (features_arg & 1) || (features_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(features_arg_conv);
	features_arg_conv = NodeFeatures_clone(&features_arg_conv);
	LDKThreeBytes rgb_arg_ref;
	CHECK((*env)->GetArrayLength(env, rgb_arg) == 3);
	(*env)->GetByteArrayRegion(env, rgb_arg, 0, 3, rgb_arg_ref.data);
	LDKThirtyTwoBytes alias_arg_ref;
	CHECK((*env)->GetArrayLength(env, alias_arg) == 32);
	(*env)->GetByteArrayRegion(env, alias_arg, 0, 32, alias_arg_ref.data);
	LDKCVec_NetAddressZ addresses_arg_constr;
	addresses_arg_constr.datalen = (*env)->GetArrayLength(env, addresses_arg);
	if (addresses_arg_constr.datalen > 0)
		addresses_arg_constr.data = MALLOC(addresses_arg_constr.datalen * sizeof(LDKNetAddress), "LDKCVec_NetAddressZ Elements");
	else
		addresses_arg_constr.data = NULL;
	int64_t* addresses_arg_vals = (*env)->GetLongArrayElements (env, addresses_arg, NULL);
	for (size_t m = 0; m < addresses_arg_constr.datalen; m++) {
		int64_t addresses_arg_conv_12 = addresses_arg_vals[m];
		void* addresses_arg_conv_12_ptr = (void*)(((uintptr_t)addresses_arg_conv_12) & ~1);
		CHECK_ACCESS(addresses_arg_conv_12_ptr);
		LDKNetAddress addresses_arg_conv_12_conv = *(LDKNetAddress*)(addresses_arg_conv_12_ptr);
		addresses_arg_constr.data[m] = addresses_arg_conv_12_conv;
	}
	(*env)->ReleaseLongArrayElements(env, addresses_arg, addresses_arg_vals, 0);
	LDKNodeAnnouncement announcement_message_arg_conv;
	announcement_message_arg_conv.inner = (void*)(announcement_message_arg & (~1));
	announcement_message_arg_conv.is_owned = (announcement_message_arg & 1) || (announcement_message_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(announcement_message_arg_conv);
	announcement_message_arg_conv = NodeAnnouncement_clone(&announcement_message_arg_conv);
	LDKNodeAnnouncementInfo ret_var = NodeAnnouncementInfo_new(features_arg_conv, last_update_arg, rgb_arg_ref, alias_arg_ref, addresses_arg_constr, announcement_message_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t NodeAnnouncementInfo_clone_ptr(LDKNodeAnnouncementInfo *NONNULL_PTR arg) {
	LDKNodeAnnouncementInfo ret_var = NodeAnnouncementInfo_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNodeAnnouncementInfo arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = NodeAnnouncementInfo_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNodeAnnouncementInfo orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKNodeAnnouncementInfo ret_var = NodeAnnouncementInfo_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNodeAnnouncementInfo obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = NodeAnnouncementInfo_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeAnnouncementInfo_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_NodeAnnouncementInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeAnnouncementInfoDecodeErrorZ), "LDKCResult_NodeAnnouncementInfoDecodeErrorZ");
	*ret_conv = NodeAnnouncementInfo_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeInfo_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKNodeInfo this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	NodeInfo_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeInfo_1set_1channels(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKNodeInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_u64Z val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(int64_t), "LDKCVec_u64Z Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t g = 0; g < val_constr.datalen; g++) {
		int64_t val_conv_6 = val_vals[g];
		val_constr.data[g] = val_conv_6;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	NodeInfo_set_channels(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeInfo_1get_1lowest_1inbound_1channel_1fees(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRoutingFees ret_var = NodeInfo_get_lowest_inbound_channel_fees(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeInfo_1set_1lowest_1inbound_1channel_1fees(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKNodeInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRoutingFees val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = RoutingFees_clone(&val_conv);
	NodeInfo_set_lowest_inbound_channel_fees(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeInfo_1get_1announcement_1info(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKNodeInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeAnnouncementInfo ret_var = NodeInfo_get_announcement_info(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NodeInfo_1set_1announcement_1info(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKNodeInfo this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeAnnouncementInfo val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = NodeAnnouncementInfo_clone(&val_conv);
	NodeInfo_set_announcement_info(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeInfo_1new(JNIEnv *env, jclass clz, int64_tArray channels_arg, int64_t lowest_inbound_channel_fees_arg, int64_t announcement_info_arg) {
	LDKCVec_u64Z channels_arg_constr;
	channels_arg_constr.datalen = (*env)->GetArrayLength(env, channels_arg);
	if (channels_arg_constr.datalen > 0)
		channels_arg_constr.data = MALLOC(channels_arg_constr.datalen * sizeof(int64_t), "LDKCVec_u64Z Elements");
	else
		channels_arg_constr.data = NULL;
	int64_t* channels_arg_vals = (*env)->GetLongArrayElements (env, channels_arg, NULL);
	for (size_t g = 0; g < channels_arg_constr.datalen; g++) {
		int64_t channels_arg_conv_6 = channels_arg_vals[g];
		channels_arg_constr.data[g] = channels_arg_conv_6;
	}
	(*env)->ReleaseLongArrayElements(env, channels_arg, channels_arg_vals, 0);
	LDKRoutingFees lowest_inbound_channel_fees_arg_conv;
	lowest_inbound_channel_fees_arg_conv.inner = (void*)(lowest_inbound_channel_fees_arg & (~1));
	lowest_inbound_channel_fees_arg_conv.is_owned = (lowest_inbound_channel_fees_arg & 1) || (lowest_inbound_channel_fees_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(lowest_inbound_channel_fees_arg_conv);
	lowest_inbound_channel_fees_arg_conv = RoutingFees_clone(&lowest_inbound_channel_fees_arg_conv);
	LDKNodeAnnouncementInfo announcement_info_arg_conv;
	announcement_info_arg_conv.inner = (void*)(announcement_info_arg & (~1));
	announcement_info_arg_conv.is_owned = (announcement_info_arg & 1) || (announcement_info_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(announcement_info_arg_conv);
	announcement_info_arg_conv = NodeAnnouncementInfo_clone(&announcement_info_arg_conv);
	LDKNodeInfo ret_var = NodeInfo_new(channels_arg_constr, lowest_inbound_channel_fees_arg_conv, announcement_info_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t NodeInfo_clone_ptr(LDKNodeInfo *NONNULL_PTR arg) {
	LDKNodeInfo ret_var = NodeInfo_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeInfo_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKNodeInfo arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = NodeInfo_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeInfo_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKNodeInfo orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKNodeInfo ret_var = NodeInfo_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NodeInfo_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNodeInfo obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = NodeInfo_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NodeInfo_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_NodeInfoDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NodeInfoDecodeErrorZ), "LDKCResult_NodeInfoDecodeErrorZ");
	*ret_conv = NodeInfo_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKNetworkGraph obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = NetworkGraph_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_NetworkGraphDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NetworkGraphDecodeErrorZ), "LDKCResult_NetworkGraphDecodeErrorZ");
	*ret_conv = NetworkGraph_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1new(JNIEnv *env, jclass clz, int8_tArray genesis_hash) {
	LDKThirtyTwoBytes genesis_hash_ref;
	CHECK((*env)->GetArrayLength(env, genesis_hash) == 32);
	(*env)->GetByteArrayRegion(env, genesis_hash, 0, 32, genesis_hash_ref.data);
	LDKNetworkGraph ret_var = NetworkGraph_new(genesis_hash_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1read_1only(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKReadOnlyNetworkGraph ret_var = NetworkGraph_read_only(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1update_1node_1from_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKNodeAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = NetworkGraph_update_node_from_announcement(&this_arg_conv, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1update_1node_1from_1unsigned_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKUnsignedNodeAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = NetworkGraph_update_node_from_unsigned_announcement(&this_arg_conv, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1update_1channel_1from_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg, int64_t chain_access) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	void* chain_access_ptr = (void*)(((uintptr_t)chain_access) & ~1);
	CHECK_ACCESS(chain_access_ptr);
	LDKCOption_AccessZ chain_access_conv = *(LDKCOption_AccessZ*)(chain_access_ptr);
	// WARNING: we may need a move here but no clone is available for LDKCOption_AccessZ
	if (chain_access_conv.tag == LDKCOption_AccessZ_Some) {
		// Manually implement clone for Java trait instances
		if (chain_access_conv.some.free == LDKAccess_JCalls_free) {
			// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
			LDKAccess_JCalls_cloned(&chain_access_conv.some);
		}
	}
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = NetworkGraph_update_channel_from_announcement(&this_arg_conv, &msg_conv, chain_access_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1update_1channel_1from_1unsigned_1announcement(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg, int64_t chain_access) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKUnsignedChannelAnnouncement msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	void* chain_access_ptr = (void*)(((uintptr_t)chain_access) & ~1);
	CHECK_ACCESS(chain_access_ptr);
	LDKCOption_AccessZ chain_access_conv = *(LDKCOption_AccessZ*)(chain_access_ptr);
	// WARNING: we may need a move here but no clone is available for LDKCOption_AccessZ
	if (chain_access_conv.tag == LDKCOption_AccessZ_Some) {
		// Manually implement clone for Java trait instances
		if (chain_access_conv.some.free == LDKAccess_JCalls_free) {
			// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
			LDKAccess_JCalls_cloned(&chain_access_conv.some);
		}
	}
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = NetworkGraph_update_channel_from_unsigned_announcement(&this_arg_conv, &msg_conv, chain_access_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1close_1channel_1from_1update(JNIEnv *env, jclass clz, int64_t this_arg, int64_t short_channel_id, jboolean is_permanent) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	NetworkGraph_close_channel_from_update(&this_arg_conv, short_channel_id, is_permanent);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1fail_1node(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray _node_id, jboolean is_permanent) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPublicKey _node_id_ref;
	CHECK((*env)->GetArrayLength(env, _node_id) == 33);
	(*env)->GetByteArrayRegion(env, _node_id, 0, 33, _node_id_ref.compressed_form);
	NetworkGraph_fail_node(&this_arg_conv, _node_id_ref, is_permanent);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1remove_1stale_1channels(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	NetworkGraph_remove_stale_channels(&this_arg_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1remove_1stale_1channels_1with_1time(JNIEnv *env, jclass clz, int64_t this_arg, int64_t current_time_unix) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	NetworkGraph_remove_stale_channels_with_time(&this_arg_conv, current_time_unix);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1update_1channel(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKChannelUpdate msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = NetworkGraph_update_channel(&this_arg_conv, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_NetworkGraph_1update_1channel_1unsigned(JNIEnv *env, jclass clz, int64_t this_arg, int64_t msg) {
	LDKNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKUnsignedChannelUpdate msg_conv;
	msg_conv.inner = (void*)(msg & (~1));
	msg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(msg_conv);
	LDKCResult_NoneLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneLightningErrorZ), "LDKCResult_NoneLightningErrorZ");
	*ret_conv = NetworkGraph_update_channel_unsigned(&this_arg_conv, &msg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ReadOnlyNetworkGraph_1get_1addresses(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray pubkey) {
	LDKReadOnlyNetworkGraph this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPublicKey pubkey_ref;
	CHECK((*env)->GetArrayLength(env, pubkey) == 33);
	(*env)->GetByteArrayRegion(env, pubkey, 0, 33, pubkey_ref.compressed_form);
	LDKCOption_CVec_NetAddressZZ *ret_copy = MALLOC(sizeof(LDKCOption_CVec_NetAddressZZ), "LDKCOption_CVec_NetAddressZZ");
	*ret_copy = ReadOnlyNetworkGraph_get_addresses(&this_arg_conv, pubkey_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHop_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRouteHop this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RouteHop_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RouteHop_1get_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, RouteHop_get_pubkey(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHop_1set_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	RouteHop_set_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1get_1node_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeFeatures ret_var = RouteHop_get_node_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHop_1set_1node_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKNodeFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = NodeFeatures_clone(&val_conv);
	RouteHop_set_node_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1get_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = RouteHop_get_short_channel_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHop_1set_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RouteHop_set_short_channel_id(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1get_1channel_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelFeatures ret_var = RouteHop_get_channel_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHop_1set_1channel_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKChannelFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = ChannelFeatures_clone(&val_conv);
	RouteHop_set_channel_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1get_1fee_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = RouteHop_get_fee_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHop_1set_1fee_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RouteHop_set_fee_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1get_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = RouteHop_get_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHop_1set_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKRouteHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RouteHop_set_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1new(JNIEnv *env, jclass clz, int8_tArray pubkey_arg, int64_t node_features_arg, int64_t short_channel_id_arg, int64_t channel_features_arg, int64_t fee_msat_arg, int32_t cltv_expiry_delta_arg) {
	LDKPublicKey pubkey_arg_ref;
	CHECK((*env)->GetArrayLength(env, pubkey_arg) == 33);
	(*env)->GetByteArrayRegion(env, pubkey_arg, 0, 33, pubkey_arg_ref.compressed_form);
	LDKNodeFeatures node_features_arg_conv;
	node_features_arg_conv.inner = (void*)(node_features_arg & (~1));
	node_features_arg_conv.is_owned = (node_features_arg & 1) || (node_features_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(node_features_arg_conv);
	node_features_arg_conv = NodeFeatures_clone(&node_features_arg_conv);
	LDKChannelFeatures channel_features_arg_conv;
	channel_features_arg_conv.inner = (void*)(channel_features_arg & (~1));
	channel_features_arg_conv.is_owned = (channel_features_arg & 1) || (channel_features_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_features_arg_conv);
	channel_features_arg_conv = ChannelFeatures_clone(&channel_features_arg_conv);
	LDKRouteHop ret_var = RouteHop_new(pubkey_arg_ref, node_features_arg_conv, short_channel_id_arg, channel_features_arg_conv, fee_msat_arg, cltv_expiry_delta_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t RouteHop_clone_ptr(LDKRouteHop *NONNULL_PTR arg) {
	LDKRouteHop ret_var = RouteHop_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRouteHop arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RouteHop_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRouteHop orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRouteHop ret_var = RouteHop_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKRouteHop o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = RouteHop_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_RouteHop_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRouteHop a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRouteHop b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = RouteHop_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RouteHop_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKRouteHop obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = RouteHop_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHop_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_RouteHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHopDecodeErrorZ), "LDKCResult_RouteHopDecodeErrorZ");
	*ret_conv = RouteHop_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Route_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRoute this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Route_free(this_obj_conv);
}

JNIEXPORT jobjectArray JNICALL Java_org_ldk_impl_bindings_Route_1get_1paths(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRoute this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_CVec_RouteHopZZ ret_var = Route_get_paths(&this_ptr_conv);
	jobjectArray ret_arr = NULL;
	ret_arr = (*env)->NewObjectArray(env, ret_var.datalen, arr_of_J_clz, NULL);
	;
	for (size_t m = 0; m < ret_var.datalen; m++) {
		LDKCVec_RouteHopZ ret_conv_12_var = ret_var.data[m];
		int64_tArray ret_conv_12_arr = NULL;
		ret_conv_12_arr = (*env)->NewLongArray(env, ret_conv_12_var.datalen);
		int64_t *ret_conv_12_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_conv_12_arr, NULL);
		for (size_t k = 0; k < ret_conv_12_var.datalen; k++) {
			LDKRouteHop ret_conv_12_conv_10_var = ret_conv_12_var.data[k];
			uintptr_t ret_conv_12_conv_10_ref = 0;
			CHECK((((uintptr_t)ret_conv_12_conv_10_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
			CHECK((((uintptr_t)&ret_conv_12_conv_10_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
			CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_12_conv_10_var);
			ret_conv_12_conv_10_ref = (uintptr_t)ret_conv_12_conv_10_var.inner;
			if (ret_conv_12_conv_10_var.is_owned) {
				ret_conv_12_conv_10_ref |= 1;
			}
			ret_conv_12_arr_ptr[k] = ret_conv_12_conv_10_ref;
		}
		(*env)->ReleasePrimitiveArrayCritical(env, ret_conv_12_arr, ret_conv_12_arr_ptr, 0);
		FREE(ret_conv_12_var.data);
		(*env)->SetObjectArrayElement(env, ret_arr, m, ret_conv_12_arr);
	}
	
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Route_1set_1paths(JNIEnv *env, jclass clz, int64_t this_ptr, jobjectArray val) {
	LDKRoute this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_CVec_RouteHopZZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKCVec_RouteHopZ), "LDKCVec_CVec_RouteHopZZ Elements");
	else
		val_constr.data = NULL;
	for (size_t m = 0; m < val_constr.datalen; m++) {
		int64_tArray val_conv_12 = (*env)->GetObjectArrayElement(env, val, m);
		LDKCVec_RouteHopZ val_conv_12_constr;
		val_conv_12_constr.datalen = (*env)->GetArrayLength(env, val_conv_12);
		if (val_conv_12_constr.datalen > 0)
			val_conv_12_constr.data = MALLOC(val_conv_12_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
		else
			val_conv_12_constr.data = NULL;
		int64_t* val_conv_12_vals = (*env)->GetLongArrayElements (env, val_conv_12, NULL);
		for (size_t k = 0; k < val_conv_12_constr.datalen; k++) {
			int64_t val_conv_12_conv_10 = val_conv_12_vals[k];
			LDKRouteHop val_conv_12_conv_10_conv;
			val_conv_12_conv_10_conv.inner = (void*)(val_conv_12_conv_10 & (~1));
			val_conv_12_conv_10_conv.is_owned = (val_conv_12_conv_10 & 1) || (val_conv_12_conv_10 == 0);
			CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_12_conv_10_conv);
			val_conv_12_conv_10_conv = RouteHop_clone(&val_conv_12_conv_10_conv);
			val_conv_12_constr.data[k] = val_conv_12_conv_10_conv;
		}
		(*env)->ReleaseLongArrayElements(env, val_conv_12, val_conv_12_vals, 0);
		val_constr.data[m] = val_conv_12_constr;
	}
	Route_set_paths(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1get_1payment_1params(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRoute this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPaymentParameters ret_var = Route_get_payment_params(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Route_1set_1payment_1params(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRoute this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPaymentParameters val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = PaymentParameters_clone(&val_conv);
	Route_set_payment_params(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1new(JNIEnv *env, jclass clz, jobjectArray paths_arg, int64_t payment_params_arg) {
	LDKCVec_CVec_RouteHopZZ paths_arg_constr;
	paths_arg_constr.datalen = (*env)->GetArrayLength(env, paths_arg);
	if (paths_arg_constr.datalen > 0)
		paths_arg_constr.data = MALLOC(paths_arg_constr.datalen * sizeof(LDKCVec_RouteHopZ), "LDKCVec_CVec_RouteHopZZ Elements");
	else
		paths_arg_constr.data = NULL;
	for (size_t m = 0; m < paths_arg_constr.datalen; m++) {
		int64_tArray paths_arg_conv_12 = (*env)->GetObjectArrayElement(env, paths_arg, m);
		LDKCVec_RouteHopZ paths_arg_conv_12_constr;
		paths_arg_conv_12_constr.datalen = (*env)->GetArrayLength(env, paths_arg_conv_12);
		if (paths_arg_conv_12_constr.datalen > 0)
			paths_arg_conv_12_constr.data = MALLOC(paths_arg_conv_12_constr.datalen * sizeof(LDKRouteHop), "LDKCVec_RouteHopZ Elements");
		else
			paths_arg_conv_12_constr.data = NULL;
		int64_t* paths_arg_conv_12_vals = (*env)->GetLongArrayElements (env, paths_arg_conv_12, NULL);
		for (size_t k = 0; k < paths_arg_conv_12_constr.datalen; k++) {
			int64_t paths_arg_conv_12_conv_10 = paths_arg_conv_12_vals[k];
			LDKRouteHop paths_arg_conv_12_conv_10_conv;
			paths_arg_conv_12_conv_10_conv.inner = (void*)(paths_arg_conv_12_conv_10 & (~1));
			paths_arg_conv_12_conv_10_conv.is_owned = (paths_arg_conv_12_conv_10 & 1) || (paths_arg_conv_12_conv_10 == 0);
			CHECK_INNER_FIELD_ACCESS_OR_NULL(paths_arg_conv_12_conv_10_conv);
			paths_arg_conv_12_conv_10_conv = RouteHop_clone(&paths_arg_conv_12_conv_10_conv);
			paths_arg_conv_12_constr.data[k] = paths_arg_conv_12_conv_10_conv;
		}
		(*env)->ReleaseLongArrayElements(env, paths_arg_conv_12, paths_arg_conv_12_vals, 0);
		paths_arg_constr.data[m] = paths_arg_conv_12_constr;
	}
	LDKPaymentParameters payment_params_arg_conv;
	payment_params_arg_conv.inner = (void*)(payment_params_arg & (~1));
	payment_params_arg_conv.is_owned = (payment_params_arg & 1) || (payment_params_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(payment_params_arg_conv);
	payment_params_arg_conv = PaymentParameters_clone(&payment_params_arg_conv);
	LDKRoute ret_var = Route_new(paths_arg_constr, payment_params_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t Route_clone_ptr(LDKRoute *NONNULL_PTR arg) {
	LDKRoute ret_var = Route_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRoute arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Route_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRoute orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRoute ret_var = Route_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKRoute o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = Route_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Route_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRoute a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRoute b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = Route_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1get_1total_1fees(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRoute this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = Route_get_total_fees(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1get_1total_1amount(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRoute this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = Route_get_total_amount(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Route_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKRoute obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = Route_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Route_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_RouteDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteDecodeErrorZ), "LDKCResult_RouteDecodeErrorZ");
	*ret_conv = Route_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRouteParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RouteParameters_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteParameters_1get_1payment_1params(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPaymentParameters ret_var = RouteParameters_get_payment_params(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteParameters_1set_1payment_1params(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPaymentParameters val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = PaymentParameters_clone(&val_conv);
	RouteParameters_set_payment_params(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteParameters_1get_1final_1value_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = RouteParameters_get_final_value_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteParameters_1set_1final_1value_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RouteParameters_set_final_value_msat(&this_ptr_conv, val);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_RouteParameters_1get_1final_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = RouteParameters_get_final_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteParameters_1set_1final_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKRouteParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RouteParameters_set_final_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteParameters_1new(JNIEnv *env, jclass clz, int64_t payment_params_arg, int64_t final_value_msat_arg, int32_t final_cltv_expiry_delta_arg) {
	LDKPaymentParameters payment_params_arg_conv;
	payment_params_arg_conv.inner = (void*)(payment_params_arg & (~1));
	payment_params_arg_conv.is_owned = (payment_params_arg & 1) || (payment_params_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(payment_params_arg_conv);
	payment_params_arg_conv = PaymentParameters_clone(&payment_params_arg_conv);
	LDKRouteParameters ret_var = RouteParameters_new(payment_params_arg_conv, final_value_msat_arg, final_cltv_expiry_delta_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t RouteParameters_clone_ptr(LDKRouteParameters *NONNULL_PTR arg) {
	LDKRouteParameters ret_var = RouteParameters_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteParameters_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRouteParameters arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RouteParameters_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteParameters_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRouteParameters orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRouteParameters ret_var = RouteParameters_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RouteParameters_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKRouteParameters obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = RouteParameters_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteParameters_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_RouteParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteParametersDecodeErrorZ), "LDKCResult_RouteParametersDecodeErrorZ");
	*ret_conv = RouteParameters_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPaymentParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PaymentParameters_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1get_1payee_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, PaymentParameters_get_payee_pubkey(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1set_1payee_1pubkey(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	PaymentParameters_set_payee_pubkey(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1get_1features(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKInvoiceFeatures ret_var = PaymentParameters_get_features(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1set_1features(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKInvoiceFeatures val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = InvoiceFeatures_clone(&val_conv);
	PaymentParameters_set_features(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1get_1route_1hints(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_RouteHintZ ret_var = PaymentParameters_get_route_hints(&this_ptr_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t l = 0; l < ret_var.datalen; l++) {
		LDKRouteHint ret_conv_11_var = ret_var.data[l];
		uintptr_t ret_conv_11_ref = 0;
		CHECK((((uintptr_t)ret_conv_11_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_11_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_11_var);
		ret_conv_11_ref = (uintptr_t)ret_conv_11_var.inner;
		if (ret_conv_11_var.is_owned) {
			ret_conv_11_ref |= 1;
		}
		ret_arr_ptr[l] = ret_conv_11_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1set_1route_1hints(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_RouteHintZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKRouteHint), "LDKCVec_RouteHintZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t l = 0; l < val_constr.datalen; l++) {
		int64_t val_conv_11 = val_vals[l];
		LDKRouteHint val_conv_11_conv;
		val_conv_11_conv.inner = (void*)(val_conv_11 & (~1));
		val_conv_11_conv.is_owned = (val_conv_11 & 1) || (val_conv_11 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_11_conv);
		val_conv_11_conv = RouteHint_clone(&val_conv_11_conv);
		val_constr.data[l] = val_conv_11_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	PaymentParameters_set_route_hints(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1get_1expiry_1time(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = PaymentParameters_get_expiry_time(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1set_1expiry_1time(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u64Z val_conv = *(LDKCOption_u64Z*)(val_ptr);
	val_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)val) & ~1));
	PaymentParameters_set_expiry_time(&this_ptr_conv, val_conv);
}

JNIEXPORT int32_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1get_1max_1total_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int32_t ret_val = PaymentParameters_get_max_total_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1set_1max_1total_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int32_t val) {
	LDKPaymentParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	PaymentParameters_set_max_total_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1new(JNIEnv *env, jclass clz, int8_tArray payee_pubkey_arg, int64_t features_arg, int64_tArray route_hints_arg, int64_t expiry_time_arg, int32_t max_total_cltv_expiry_delta_arg) {
	LDKPublicKey payee_pubkey_arg_ref;
	CHECK((*env)->GetArrayLength(env, payee_pubkey_arg) == 33);
	(*env)->GetByteArrayRegion(env, payee_pubkey_arg, 0, 33, payee_pubkey_arg_ref.compressed_form);
	LDKInvoiceFeatures features_arg_conv;
	features_arg_conv.inner = (void*)(features_arg & (~1));
	features_arg_conv.is_owned = (features_arg & 1) || (features_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(features_arg_conv);
	features_arg_conv = InvoiceFeatures_clone(&features_arg_conv);
	LDKCVec_RouteHintZ route_hints_arg_constr;
	route_hints_arg_constr.datalen = (*env)->GetArrayLength(env, route_hints_arg);
	if (route_hints_arg_constr.datalen > 0)
		route_hints_arg_constr.data = MALLOC(route_hints_arg_constr.datalen * sizeof(LDKRouteHint), "LDKCVec_RouteHintZ Elements");
	else
		route_hints_arg_constr.data = NULL;
	int64_t* route_hints_arg_vals = (*env)->GetLongArrayElements (env, route_hints_arg, NULL);
	for (size_t l = 0; l < route_hints_arg_constr.datalen; l++) {
		int64_t route_hints_arg_conv_11 = route_hints_arg_vals[l];
		LDKRouteHint route_hints_arg_conv_11_conv;
		route_hints_arg_conv_11_conv.inner = (void*)(route_hints_arg_conv_11 & (~1));
		route_hints_arg_conv_11_conv.is_owned = (route_hints_arg_conv_11 & 1) || (route_hints_arg_conv_11 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(route_hints_arg_conv_11_conv);
		route_hints_arg_conv_11_conv = RouteHint_clone(&route_hints_arg_conv_11_conv);
		route_hints_arg_constr.data[l] = route_hints_arg_conv_11_conv;
	}
	(*env)->ReleaseLongArrayElements(env, route_hints_arg, route_hints_arg_vals, 0);
	void* expiry_time_arg_ptr = (void*)(((uintptr_t)expiry_time_arg) & ~1);
	CHECK_ACCESS(expiry_time_arg_ptr);
	LDKCOption_u64Z expiry_time_arg_conv = *(LDKCOption_u64Z*)(expiry_time_arg_ptr);
	expiry_time_arg_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)expiry_time_arg) & ~1));
	LDKPaymentParameters ret_var = PaymentParameters_new(payee_pubkey_arg_ref, features_arg_conv, route_hints_arg_constr, expiry_time_arg_conv, max_total_cltv_expiry_delta_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t PaymentParameters_clone_ptr(LDKPaymentParameters *NONNULL_PTR arg) {
	LDKPaymentParameters ret_var = PaymentParameters_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPaymentParameters arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = PaymentParameters_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPaymentParameters orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPaymentParameters ret_var = PaymentParameters_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKPaymentParameters o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = PaymentParameters_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKPaymentParameters a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKPaymentParameters b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = PaymentParameters_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKPaymentParameters obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = PaymentParameters_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_PaymentParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentParametersDecodeErrorZ), "LDKCResult_PaymentParametersDecodeErrorZ");
	*ret_conv = PaymentParameters_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1from_1node_1id(JNIEnv *env, jclass clz, int8_tArray payee_pubkey) {
	LDKPublicKey payee_pubkey_ref;
	CHECK((*env)->GetArrayLength(env, payee_pubkey) == 33);
	(*env)->GetByteArrayRegion(env, payee_pubkey, 0, 33, payee_pubkey_ref.compressed_form);
	LDKPaymentParameters ret_var = PaymentParameters_from_node_id(payee_pubkey_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentParameters_1for_1keysend(JNIEnv *env, jclass clz, int8_tArray payee_pubkey) {
	LDKPublicKey payee_pubkey_ref;
	CHECK((*env)->GetArrayLength(env, payee_pubkey) == 33);
	(*env)->GetByteArrayRegion(env, payee_pubkey, 0, 33, payee_pubkey_ref.compressed_form);
	LDKPaymentParameters ret_var = PaymentParameters_for_keysend(payee_pubkey_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHint_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRouteHint this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RouteHint_free(this_obj_conv);
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_RouteHint_1get_1a(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHint this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_RouteHintHopZ ret_var = RouteHint_get_a(&this_ptr_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t o = 0; o < ret_var.datalen; o++) {
		LDKRouteHintHop ret_conv_14_var = ret_var.data[o];
		uintptr_t ret_conv_14_ref = 0;
		CHECK((((uintptr_t)ret_conv_14_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_14_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_14_var);
		ret_conv_14_ref = (uintptr_t)ret_conv_14_var.inner;
		if (ret_conv_14_var.is_owned) {
			ret_conv_14_ref |= 1;
		}
		ret_arr_ptr[o] = ret_conv_14_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHint_1set_1a(JNIEnv *env, jclass clz, int64_t this_ptr, int64_tArray val) {
	LDKRouteHint this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCVec_RouteHintHopZ val_constr;
	val_constr.datalen = (*env)->GetArrayLength(env, val);
	if (val_constr.datalen > 0)
		val_constr.data = MALLOC(val_constr.datalen * sizeof(LDKRouteHintHop), "LDKCVec_RouteHintHopZ Elements");
	else
		val_constr.data = NULL;
	int64_t* val_vals = (*env)->GetLongArrayElements (env, val, NULL);
	for (size_t o = 0; o < val_constr.datalen; o++) {
		int64_t val_conv_14 = val_vals[o];
		LDKRouteHintHop val_conv_14_conv;
		val_conv_14_conv.inner = (void*)(val_conv_14 & (~1));
		val_conv_14_conv.is_owned = (val_conv_14 & 1) || (val_conv_14 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv_14_conv);
		val_conv_14_conv = RouteHintHop_clone(&val_conv_14_conv);
		val_constr.data[o] = val_conv_14_conv;
	}
	(*env)->ReleaseLongArrayElements(env, val, val_vals, 0);
	RouteHint_set_a(&this_ptr_conv, val_constr);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHint_1new(JNIEnv *env, jclass clz, int64_tArray a_arg) {
	LDKCVec_RouteHintHopZ a_arg_constr;
	a_arg_constr.datalen = (*env)->GetArrayLength(env, a_arg);
	if (a_arg_constr.datalen > 0)
		a_arg_constr.data = MALLOC(a_arg_constr.datalen * sizeof(LDKRouteHintHop), "LDKCVec_RouteHintHopZ Elements");
	else
		a_arg_constr.data = NULL;
	int64_t* a_arg_vals = (*env)->GetLongArrayElements (env, a_arg, NULL);
	for (size_t o = 0; o < a_arg_constr.datalen; o++) {
		int64_t a_arg_conv_14 = a_arg_vals[o];
		LDKRouteHintHop a_arg_conv_14_conv;
		a_arg_conv_14_conv.inner = (void*)(a_arg_conv_14 & (~1));
		a_arg_conv_14_conv.is_owned = (a_arg_conv_14 & 1) || (a_arg_conv_14 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(a_arg_conv_14_conv);
		a_arg_conv_14_conv = RouteHintHop_clone(&a_arg_conv_14_conv);
		a_arg_constr.data[o] = a_arg_conv_14_conv;
	}
	(*env)->ReleaseLongArrayElements(env, a_arg, a_arg_vals, 0);
	LDKRouteHint ret_var = RouteHint_new(a_arg_constr);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t RouteHint_clone_ptr(LDKRouteHint *NONNULL_PTR arg) {
	LDKRouteHint ret_var = RouteHint_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHint_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRouteHint arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RouteHint_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHint_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRouteHint orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRouteHint ret_var = RouteHint_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHint_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKRouteHint o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = RouteHint_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_RouteHint_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRouteHint a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRouteHint b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = RouteHint_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RouteHint_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKRouteHint obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = RouteHint_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHint_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_RouteHintDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintDecodeErrorZ), "LDKCResult_RouteHintDecodeErrorZ");
	*ret_conv = RouteHint_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRouteHintHop this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RouteHintHop_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1get_1src_1node_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, RouteHintHop_get_src_node_id(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1set_1src_1node_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	RouteHintHop_set_src_node_id(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1get_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = RouteHintHop_get_short_channel_id(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1set_1short_1channel_1id(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RouteHintHop_set_short_channel_id(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1get_1fees(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRoutingFees ret_var = RouteHintHop_get_fees(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1set_1fees(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRoutingFees val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = RoutingFees_clone(&val_conv);
	RouteHintHop_set_fees(&this_ptr_conv, val_conv);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1get_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = RouteHintHop_get_cltv_expiry_delta(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1set_1cltv_1expiry_1delta(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RouteHintHop_set_cltv_expiry_delta(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1get_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = RouteHintHop_get_htlc_minimum_msat(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1set_1htlc_1minimum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u64Z val_conv = *(LDKCOption_u64Z*)(val_ptr);
	val_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)val) & ~1));
	RouteHintHop_set_htlc_minimum_msat(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1get_1htlc_1maximum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = RouteHintHop_get_htlc_maximum_msat(&this_ptr_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1set_1htlc_1maximum_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRouteHintHop this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	void* val_ptr = (void*)(((uintptr_t)val) & ~1);
	CHECK_ACCESS(val_ptr);
	LDKCOption_u64Z val_conv = *(LDKCOption_u64Z*)(val_ptr);
	val_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)val) & ~1));
	RouteHintHop_set_htlc_maximum_msat(&this_ptr_conv, val_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1new(JNIEnv *env, jclass clz, int8_tArray src_node_id_arg, int64_t short_channel_id_arg, int64_t fees_arg, int16_t cltv_expiry_delta_arg, int64_t htlc_minimum_msat_arg, int64_t htlc_maximum_msat_arg) {
	LDKPublicKey src_node_id_arg_ref;
	CHECK((*env)->GetArrayLength(env, src_node_id_arg) == 33);
	(*env)->GetByteArrayRegion(env, src_node_id_arg, 0, 33, src_node_id_arg_ref.compressed_form);
	LDKRoutingFees fees_arg_conv;
	fees_arg_conv.inner = (void*)(fees_arg & (~1));
	fees_arg_conv.is_owned = (fees_arg & 1) || (fees_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(fees_arg_conv);
	fees_arg_conv = RoutingFees_clone(&fees_arg_conv);
	void* htlc_minimum_msat_arg_ptr = (void*)(((uintptr_t)htlc_minimum_msat_arg) & ~1);
	CHECK_ACCESS(htlc_minimum_msat_arg_ptr);
	LDKCOption_u64Z htlc_minimum_msat_arg_conv = *(LDKCOption_u64Z*)(htlc_minimum_msat_arg_ptr);
	htlc_minimum_msat_arg_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)htlc_minimum_msat_arg) & ~1));
	void* htlc_maximum_msat_arg_ptr = (void*)(((uintptr_t)htlc_maximum_msat_arg) & ~1);
	CHECK_ACCESS(htlc_maximum_msat_arg_ptr);
	LDKCOption_u64Z htlc_maximum_msat_arg_conv = *(LDKCOption_u64Z*)(htlc_maximum_msat_arg_ptr);
	htlc_maximum_msat_arg_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)htlc_maximum_msat_arg) & ~1));
	LDKRouteHintHop ret_var = RouteHintHop_new(src_node_id_arg_ref, short_channel_id_arg, fees_arg_conv, cltv_expiry_delta_arg, htlc_minimum_msat_arg_conv, htlc_maximum_msat_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t RouteHintHop_clone_ptr(LDKRouteHintHop *NONNULL_PTR arg) {
	LDKRouteHintHop ret_var = RouteHintHop_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRouteHintHop arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RouteHintHop_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRouteHintHop orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRouteHintHop ret_var = RouteHintHop_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKRouteHintHop o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = RouteHintHop_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRouteHintHop a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRouteHintHop b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = RouteHintHop_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKRouteHintHop obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = RouteHintHop_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RouteHintHop_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_RouteHintHopDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteHintHopDecodeErrorZ), "LDKCResult_RouteHintHopDecodeErrorZ");
	*ret_conv = RouteHintHop_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_find_1route(JNIEnv *env, jclass clz, int8_tArray our_node_pubkey, int64_t route_params, int64_t network, int64_tArray first_hops, int64_t logger, int64_t scorer) {
	LDKPublicKey our_node_pubkey_ref;
	CHECK((*env)->GetArrayLength(env, our_node_pubkey) == 33);
	(*env)->GetByteArrayRegion(env, our_node_pubkey, 0, 33, our_node_pubkey_ref.compressed_form);
	LDKRouteParameters route_params_conv;
	route_params_conv.inner = (void*)(route_params & (~1));
	route_params_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(route_params_conv);
	LDKNetworkGraph network_conv;
	network_conv.inner = (void*)(network & (~1));
	network_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(network_conv);
	LDKCVec_ChannelDetailsZ first_hops_constr;
	LDKCVec_ChannelDetailsZ *first_hops_ptr = NULL;
	if (first_hops != NULL) {
		first_hops_constr.datalen = (*env)->GetArrayLength(env, first_hops);
		if (first_hops_constr.datalen > 0)
			first_hops_constr.data = MALLOC(first_hops_constr.datalen * sizeof(LDKChannelDetails), "LDKCVec_ChannelDetailsZ Elements");
		else
			first_hops_constr.data = NULL;
		int64_t* first_hops_vals = (*env)->GetLongArrayElements (env, first_hops, NULL);
		for (size_t q = 0; q < first_hops_constr.datalen; q++) {
			int64_t first_hops_conv_16 = first_hops_vals[q];
			LDKChannelDetails first_hops_conv_16_conv;
			first_hops_conv_16_conv.inner = (void*)(first_hops_conv_16 & (~1));
			first_hops_conv_16_conv.is_owned = (first_hops_conv_16 & 1) || (first_hops_conv_16 == 0);
			CHECK_INNER_FIELD_ACCESS_OR_NULL(first_hops_conv_16_conv);
			first_hops_constr.data[q] = first_hops_conv_16_conv;
		}
		(*env)->ReleaseLongArrayElements(env, first_hops, first_hops_vals, 0);
		first_hops_ptr = &first_hops_constr;
	}
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	void* scorer_ptr = (void*)(((uintptr_t)scorer) & ~1);
	if (!(scorer & 1)) { CHECK_ACCESS(scorer_ptr); }
	LDKScore* scorer_conv = (LDKScore*)scorer_ptr;
	LDKCResult_RouteLightningErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_RouteLightningErrorZ), "LDKCResult_RouteLightningErrorZ");
	*ret_conv = find_route(our_node_pubkey_ref, &route_params_conv, &network_conv, first_hops_ptr, logger_conv, scorer_conv);
	if (first_hops_ptr != NULL) { FREE(first_hops_constr.data); }
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Score_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKScore this_ptr_conv = *(LDKScore*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Score_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_LockableScore_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKLockableScore this_ptr_conv = *(LDKLockableScore*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	LockableScore_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MultiThreadedLockableScore_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKMultiThreadedLockableScore this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	MultiThreadedLockableScore_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MultiThreadedLockableScore_1new(JNIEnv *env, jclass clz, int64_t score) {
	void* score_ptr = (void*)(((uintptr_t)score) & ~1);
	CHECK_ACCESS(score_ptr);
	LDKScore score_conv = *(LDKScore*)(score_ptr);
	if (score_conv.free == LDKScore_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKScore_JCalls_cloned(&score_conv);
	}
	LDKMultiThreadedLockableScore ret_var = MultiThreadedLockableScore_new(score_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FixedPenaltyScorer_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKFixedPenaltyScorer this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	FixedPenaltyScorer_free(this_obj_conv);
}

static inline uintptr_t FixedPenaltyScorer_clone_ptr(LDKFixedPenaltyScorer *NONNULL_PTR arg) {
	LDKFixedPenaltyScorer ret_var = FixedPenaltyScorer_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FixedPenaltyScorer_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKFixedPenaltyScorer arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = FixedPenaltyScorer_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FixedPenaltyScorer_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKFixedPenaltyScorer orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKFixedPenaltyScorer ret_var = FixedPenaltyScorer_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_FixedPenaltyScorer_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKFixedPenaltyScorer obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = FixedPenaltyScorer_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FixedPenaltyScorer_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_FixedPenaltyScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_FixedPenaltyScorerDecodeErrorZ), "LDKCResult_FixedPenaltyScorerDecodeErrorZ");
	*ret_conv = FixedPenaltyScorer_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FixedPenaltyScorer_1with_1penalty(JNIEnv *env, jclass clz, int64_t penalty_msat) {
	LDKFixedPenaltyScorer ret_var = FixedPenaltyScorer_with_penalty(penalty_msat);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FixedPenaltyScorer_1as_1Score(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKFixedPenaltyScorer this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKScore* ret_ret = MALLOC(sizeof(LDKScore), "LDKScore");
	*ret_ret = FixedPenaltyScorer_as_Score(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Scorer_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKScorer this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Scorer_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKScoringParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ScoringParameters_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1get_1base_1penalty_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ScoringParameters_get_base_penalty_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1set_1base_1penalty_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ScoringParameters_set_base_penalty_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1get_1failure_1penalty_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ScoringParameters_get_failure_penalty_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1set_1failure_1penalty_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ScoringParameters_set_failure_penalty_msat(&this_ptr_conv, val);
}

JNIEXPORT int16_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1get_1overuse_1penalty_1start_11024th(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int16_t ret_val = ScoringParameters_get_overuse_penalty_start_1024th(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1set_1overuse_1penalty_1start_11024th(JNIEnv *env, jclass clz, int64_t this_ptr, int16_t val) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ScoringParameters_set_overuse_penalty_start_1024th(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1get_1overuse_1penalty_1msat_1per_11024th(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ScoringParameters_get_overuse_penalty_msat_per_1024th(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1set_1overuse_1penalty_1msat_1per_11024th(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ScoringParameters_set_overuse_penalty_msat_per_1024th(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1get_1failure_1penalty_1half_1life(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ScoringParameters_get_failure_penalty_half_life(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1set_1failure_1penalty_1half_1life(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ScoringParameters_set_failure_penalty_half_life(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1new(JNIEnv *env, jclass clz, int64_t base_penalty_msat_arg, int64_t failure_penalty_msat_arg, int16_t overuse_penalty_start_1024th_arg, int64_t overuse_penalty_msat_per_1024th_arg, int64_t failure_penalty_half_life_arg) {
	LDKScoringParameters ret_var = ScoringParameters_new(base_penalty_msat_arg, failure_penalty_msat_arg, overuse_penalty_start_1024th_arg, overuse_penalty_msat_per_1024th_arg, failure_penalty_half_life_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ScoringParameters_clone_ptr(LDKScoringParameters *NONNULL_PTR arg) {
	LDKScoringParameters ret_var = ScoringParameters_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKScoringParameters arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ScoringParameters_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKScoringParameters orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKScoringParameters ret_var = ScoringParameters_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKScoringParameters obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ScoringParameters_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScoringParametersDecodeErrorZ), "LDKCResult_ScoringParametersDecodeErrorZ");
	*ret_conv = ScoringParameters_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Scorer_1new(JNIEnv *env, jclass clz, int64_t params) {
	LDKScoringParameters params_conv;
	params_conv.inner = (void*)(params & (~1));
	params_conv.is_owned = (params & 1) || (params == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(params_conv);
	params_conv = ScoringParameters_clone(&params_conv);
	LDKScorer ret_var = Scorer_new(params_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Scorer_1default(JNIEnv *env, jclass clz) {
	LDKScorer ret_var = Scorer_default();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ScoringParameters_1default(JNIEnv *env, jclass clz) {
	LDKScoringParameters ret_var = ScoringParameters_default();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Scorer_1as_1Score(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKScorer this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKScore* ret_ret = MALLOC(sizeof(LDKScore), "LDKScore");
	*ret_ret = Scorer_as_Score(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Scorer_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKScorer obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = Scorer_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Scorer_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ScorerDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ScorerDecodeErrorZ), "LDKCResult_ScorerDecodeErrorZ");
	*ret_conv = Scorer_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKProbabilisticScoringParameters this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ProbabilisticScoringParameters_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1get_1liquidity_1penalty_1multiplier_1msat(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKProbabilisticScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ProbabilisticScoringParameters_get_liquidity_penalty_multiplier_msat(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1set_1liquidity_1penalty_1multiplier_1msat(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKProbabilisticScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ProbabilisticScoringParameters_set_liquidity_penalty_multiplier_msat(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1get_1liquidity_1offset_1half_1life(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKProbabilisticScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = ProbabilisticScoringParameters_get_liquidity_offset_half_life(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1set_1liquidity_1offset_1half_1life(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKProbabilisticScoringParameters this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	ProbabilisticScoringParameters_set_liquidity_offset_half_life(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1new(JNIEnv *env, jclass clz, int64_t liquidity_penalty_multiplier_msat_arg, int64_t liquidity_offset_half_life_arg) {
	LDKProbabilisticScoringParameters ret_var = ProbabilisticScoringParameters_new(liquidity_penalty_multiplier_msat_arg, liquidity_offset_half_life_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t ProbabilisticScoringParameters_clone_ptr(LDKProbabilisticScoringParameters *NONNULL_PTR arg) {
	LDKProbabilisticScoringParameters ret_var = ProbabilisticScoringParameters_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKProbabilisticScoringParameters arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ProbabilisticScoringParameters_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKProbabilisticScoringParameters orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKProbabilisticScoringParameters ret_var = ProbabilisticScoringParameters_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1write(JNIEnv *env, jclass clz, int64_t obj) {
	LDKProbabilisticScoringParameters obj_conv;
	obj_conv.inner = (void*)(obj & (~1));
	obj_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(obj_conv);
	LDKCVec_u8Z ret_var = ProbabilisticScoringParameters_write(&obj_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, ret_var.datalen);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, ret_var.datalen, ret_var.data);
	CVec_u8Z_free(ret_var);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1read(JNIEnv *env, jclass clz, int8_tArray ser) {
	LDKu8slice ser_ref;
	ser_ref.datalen = (*env)->GetArrayLength(env, ser);
	ser_ref.data = (*env)->GetByteArrayElements (env, ser, NULL);
	LDKCResult_ProbabilisticScoringParametersDecodeErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_ProbabilisticScoringParametersDecodeErrorZ), "LDKCResult_ProbabilisticScoringParametersDecodeErrorZ");
	*ret_conv = ProbabilisticScoringParameters_read(ser_ref);
	(*env)->ReleaseByteArrayElements(env, ser, (int8_t*)ser_ref.data, 0);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ProbabilisticScoringParameters_1default(JNIEnv *env, jclass clz) {
	LDKProbabilisticScoringParameters ret_var = ProbabilisticScoringParameters_default();
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_FilesystemPersister_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKFilesystemPersister this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	FilesystemPersister_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FilesystemPersister_1new(JNIEnv *env, jclass clz, jstring path_to_channel_data) {
	LDKStr path_to_channel_data_conv = java_to_owned_str(env, path_to_channel_data);
	LDKFilesystemPersister ret_var = FilesystemPersister_new(path_to_channel_data_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_FilesystemPersister_1get_1data_1dir(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKFilesystemPersister this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKStr ret_str = FilesystemPersister_get_data_dir(&this_arg_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FilesystemPersister_1persist_1manager(JNIEnv *env, jclass clz, jstring data_dir, int64_t manager) {
	LDKStr data_dir_conv = java_to_owned_str(env, data_dir);
	LDKChannelManager manager_conv;
	manager_conv.inner = (void*)(manager & (~1));
	manager_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(manager_conv);
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = FilesystemPersister_persist_manager(data_dir_conv, &manager_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FilesystemPersister_1read_1channelmonitors(JNIEnv *env, jclass clz, int64_t this_arg, int64_t keys_manager) {
	LDKFilesystemPersister this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	void* keys_manager_ptr = (void*)(((uintptr_t)keys_manager) & ~1);
	CHECK_ACCESS(keys_manager_ptr);
	LDKKeysInterface keys_manager_conv = *(LDKKeysInterface*)(keys_manager_ptr);
	if (keys_manager_conv.free == LDKKeysInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKKeysInterface_JCalls_cloned(&keys_manager_conv);
	}
	LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ), "LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ");
	*ret_conv = FilesystemPersister_read_channelmonitors(&this_arg_conv, keys_manager_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_FilesystemPersister_1as_1Persist(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKFilesystemPersister this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPersist* ret_ret = MALLOC(sizeof(LDKPersist), "LDKPersist");
	*ret_ret = FilesystemPersister_as_Persist(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_BackgroundProcessor_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKBackgroundProcessor this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	BackgroundProcessor_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ChannelManagerPersister_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKChannelManagerPersister this_ptr_conv = *(LDKChannelManagerPersister*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	ChannelManagerPersister_free(this_ptr_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BackgroundProcessor_1start(JNIEnv *env, jclass clz, int64_t persister, int64_t event_handler, int64_t chain_monitor, int64_t channel_manager, int64_t net_graph_msg_handler, int64_t peer_manager, int64_t logger) {
	void* persister_ptr = (void*)(((uintptr_t)persister) & ~1);
	CHECK_ACCESS(persister_ptr);
	LDKChannelManagerPersister persister_conv = *(LDKChannelManagerPersister*)(persister_ptr);
	if (persister_conv.free == LDKChannelManagerPersister_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKChannelManagerPersister_JCalls_cloned(&persister_conv);
	}
	void* event_handler_ptr = (void*)(((uintptr_t)event_handler) & ~1);
	CHECK_ACCESS(event_handler_ptr);
	LDKEventHandler event_handler_conv = *(LDKEventHandler*)(event_handler_ptr);
	if (event_handler_conv.free == LDKEventHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKEventHandler_JCalls_cloned(&event_handler_conv);
	}
	LDKChainMonitor chain_monitor_conv;
	chain_monitor_conv.inner = (void*)(chain_monitor & (~1));
	chain_monitor_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(chain_monitor_conv);
	LDKChannelManager channel_manager_conv;
	channel_manager_conv.inner = (void*)(channel_manager & (~1));
	channel_manager_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channel_manager_conv);
	LDKNetGraphMsgHandler net_graph_msg_handler_conv;
	net_graph_msg_handler_conv.inner = (void*)(net_graph_msg_handler & (~1));
	net_graph_msg_handler_conv.is_owned = (net_graph_msg_handler & 1) || (net_graph_msg_handler == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(net_graph_msg_handler_conv);
	LDKPeerManager peer_manager_conv;
	peer_manager_conv.inner = (void*)(peer_manager & (~1));
	peer_manager_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(peer_manager_conv);
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	LDKBackgroundProcessor ret_var = BackgroundProcessor_start(persister_conv, event_handler_conv, &chain_monitor_conv, &channel_manager_conv, net_graph_msg_handler_conv, &peer_manager_conv, logger_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BackgroundProcessor_1join(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKBackgroundProcessor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = (this_arg & 1) || (this_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	// WARNING: we need a move here but no clone is available for LDKBackgroundProcessor
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = BackgroundProcessor_join(this_arg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_BackgroundProcessor_1stop(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKBackgroundProcessor this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = (this_arg & 1) || (this_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	// WARNING: we need a move here but no clone is available for LDKBackgroundProcessor
	LDKCResult_NoneErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneErrorZ), "LDKCResult_NoneErrorZ");
	*ret_conv = BackgroundProcessor_stop(this_arg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Invoice_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInvoice this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Invoice_free(this_obj_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Invoice_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKInvoice a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKInvoice b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = Invoice_eq(&a_conv, &b_conv);
	return ret_val;
}

static inline uintptr_t Invoice_clone_ptr(LDKInvoice *NONNULL_PTR arg) {
	LDKInvoice ret_var = Invoice_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKInvoice arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Invoice_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKInvoice orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKInvoice ret_var = Invoice_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKSignedRawInvoice this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	SignedRawInvoice_free(this_obj_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKSignedRawInvoice a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKSignedRawInvoice b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = SignedRawInvoice_eq(&a_conv, &b_conv);
	return ret_val;
}

static inline uintptr_t SignedRawInvoice_clone_ptr(LDKSignedRawInvoice *NONNULL_PTR arg) {
	LDKSignedRawInvoice ret_var = SignedRawInvoice_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKSignedRawInvoice arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = SignedRawInvoice_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKSignedRawInvoice orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKSignedRawInvoice ret_var = SignedRawInvoice_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RawInvoice_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRawInvoice this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RawInvoice_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1get_1data(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRawInvoice this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRawDataPart ret_var = RawInvoice_get_data(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RawInvoice_1set_1data(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRawInvoice this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKRawDataPart val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = RawDataPart_clone(&val_conv);
	RawInvoice_set_data(&this_ptr_conv, val_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_RawInvoice_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRawInvoice a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRawInvoice b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = RawInvoice_eq(&a_conv, &b_conv);
	return ret_val;
}

static inline uintptr_t RawInvoice_clone_ptr(LDKRawInvoice *NONNULL_PTR arg) {
	LDKRawInvoice ret_var = RawInvoice_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRawInvoice arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RawInvoice_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRawInvoice orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRawInvoice ret_var = RawInvoice_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RawDataPart_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRawDataPart this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RawDataPart_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawDataPart_1get_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRawDataPart this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPositiveTimestamp ret_var = RawDataPart_get_timestamp(&this_ptr_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RawDataPart_1set_1timestamp(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRawDataPart this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPositiveTimestamp val_conv;
	val_conv.inner = (void*)(val & (~1));
	val_conv.is_owned = (val & 1) || (val == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(val_conv);
	val_conv = PositiveTimestamp_clone(&val_conv);
	RawDataPart_set_timestamp(&this_ptr_conv, val_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_RawDataPart_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRawDataPart a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRawDataPart b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = RawDataPart_eq(&a_conv, &b_conv);
	return ret_val;
}

static inline uintptr_t RawDataPart_clone_ptr(LDKRawDataPart *NONNULL_PTR arg) {
	LDKRawDataPart ret_var = RawDataPart_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawDataPart_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRawDataPart arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RawDataPart_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawDataPart_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRawDataPart orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRawDataPart ret_var = RawDataPart_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPositiveTimestamp this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PositiveTimestamp_free(this_obj_conv);
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKPositiveTimestamp a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKPositiveTimestamp b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = PositiveTimestamp_eq(&a_conv, &b_conv);
	return ret_val;
}

static inline uintptr_t PositiveTimestamp_clone_ptr(LDKPositiveTimestamp *NONNULL_PTR arg) {
	LDKPositiveTimestamp ret_var = PositiveTimestamp_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPositiveTimestamp arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = PositiveTimestamp_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPositiveTimestamp orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPositiveTimestamp ret_var = PositiveTimestamp_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SiPrefix_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKSiPrefix* orig_conv = (LDKSiPrefix*)(orig & ~1);
	jclass ret_conv = LDKSiPrefix_to_java(env, SiPrefix_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SiPrefix_1milli(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSiPrefix_to_java(env, SiPrefix_milli());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SiPrefix_1micro(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSiPrefix_to_java(env, SiPrefix_micro());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SiPrefix_1nano(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSiPrefix_to_java(env, SiPrefix_nano());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SiPrefix_1pico(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSiPrefix_to_java(env, SiPrefix_pico());
	return ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_SiPrefix_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKSiPrefix* a_conv = (LDKSiPrefix*)(a & ~1);
	LDKSiPrefix* b_conv = (LDKSiPrefix*)(b & ~1);
	jboolean ret_val = SiPrefix_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SiPrefix_1multiplier(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKSiPrefix* this_arg_conv = (LDKSiPrefix*)(this_arg & ~1);
	int64_t ret_val = SiPrefix_multiplier(this_arg_conv);
	return ret_val;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Currency_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCurrency* orig_conv = (LDKCurrency*)(orig & ~1);
	jclass ret_conv = LDKCurrency_to_java(env, Currency_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Currency_1bitcoin(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCurrency_to_java(env, Currency_bitcoin());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Currency_1bitcoin_1testnet(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCurrency_to_java(env, Currency_bitcoin_testnet());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Currency_1regtest(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCurrency_to_java(env, Currency_regtest());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Currency_1simnet(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCurrency_to_java(env, Currency_simnet());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Currency_1signet(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCurrency_to_java(env, Currency_signet());
	return ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Currency_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKCurrency* o_conv = (LDKCurrency*)(o & ~1);
	int64_t ret_val = Currency_hash(o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Currency_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKCurrency* a_conv = (LDKCurrency*)(a & ~1);
	LDKCurrency* b_conv = (LDKCurrency*)(b & ~1);
	jboolean ret_val = Currency_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Sha256_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKSha256 this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Sha256_free(this_obj_conv);
}

static inline uintptr_t Sha256_clone_ptr(LDKSha256 *NONNULL_PTR arg) {
	LDKSha256 ret_var = Sha256_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Sha256_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKSha256 arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Sha256_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Sha256_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKSha256 orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKSha256 ret_var = Sha256_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Sha256_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKSha256 o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = Sha256_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Sha256_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKSha256 a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKSha256 b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = Sha256_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Description_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKDescription this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	Description_free(this_obj_conv);
}

static inline uintptr_t Description_clone_ptr(LDKDescription *NONNULL_PTR arg) {
	LDKDescription ret_var = Description_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Description_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKDescription arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = Description_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Description_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKDescription orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKDescription ret_var = Description_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Description_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKDescription o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = Description_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Description_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKDescription a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKDescription b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = Description_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPayeePubKey this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PayeePubKey_free(this_obj_conv);
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1get_1a(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKPayeePubKey this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, PayeePubKey_get_a(&this_ptr_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1set_1a(JNIEnv *env, jclass clz, int64_t this_ptr, int8_tArray val) {
	LDKPayeePubKey this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	LDKPublicKey val_ref;
	CHECK((*env)->GetArrayLength(env, val) == 33);
	(*env)->GetByteArrayRegion(env, val, 0, 33, val_ref.compressed_form);
	PayeePubKey_set_a(&this_ptr_conv, val_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1new(JNIEnv *env, jclass clz, int8_tArray a_arg) {
	LDKPublicKey a_arg_ref;
	CHECK((*env)->GetArrayLength(env, a_arg) == 33);
	(*env)->GetByteArrayRegion(env, a_arg, 0, 33, a_arg_ref.compressed_form);
	LDKPayeePubKey ret_var = PayeePubKey_new(a_arg_ref);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t PayeePubKey_clone_ptr(LDKPayeePubKey *NONNULL_PTR arg) {
	LDKPayeePubKey ret_var = PayeePubKey_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPayeePubKey arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = PayeePubKey_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPayeePubKey orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPayeePubKey ret_var = PayeePubKey_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKPayeePubKey o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = PayeePubKey_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_PayeePubKey_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKPayeePubKey a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKPayeePubKey b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = PayeePubKey_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKExpiryTime this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	ExpiryTime_free(this_obj_conv);
}

static inline uintptr_t ExpiryTime_clone_ptr(LDKExpiryTime *NONNULL_PTR arg) {
	LDKExpiryTime ret_var = ExpiryTime_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKExpiryTime arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = ExpiryTime_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKExpiryTime orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKExpiryTime ret_var = ExpiryTime_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKExpiryTime o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = ExpiryTime_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKExpiryTime a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKExpiryTime b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = ExpiryTime_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKMinFinalCltvExpiry this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	MinFinalCltvExpiry_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1get_1a(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKMinFinalCltvExpiry this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = MinFinalCltvExpiry_get_a(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1set_1a(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKMinFinalCltvExpiry this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	MinFinalCltvExpiry_set_a(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1new(JNIEnv *env, jclass clz, int64_t a_arg) {
	LDKMinFinalCltvExpiry ret_var = MinFinalCltvExpiry_new(a_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t MinFinalCltvExpiry_clone_ptr(LDKMinFinalCltvExpiry *NONNULL_PTR arg) {
	LDKMinFinalCltvExpiry ret_var = MinFinalCltvExpiry_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKMinFinalCltvExpiry arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = MinFinalCltvExpiry_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKMinFinalCltvExpiry orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKMinFinalCltvExpiry ret_var = MinFinalCltvExpiry_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKMinFinalCltvExpiry o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = MinFinalCltvExpiry_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_MinFinalCltvExpiry_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKMinFinalCltvExpiry a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKMinFinalCltvExpiry b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = MinFinalCltvExpiry_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Fallback_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKFallback this_ptr_conv = *(LDKFallback*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Fallback_free(this_ptr_conv);
}

static inline uintptr_t Fallback_clone_ptr(LDKFallback *NONNULL_PTR arg) {
	LDKFallback *ret_copy = MALLOC(sizeof(LDKFallback), "LDKFallback");
	*ret_copy = Fallback_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Fallback_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKFallback* arg_conv = (LDKFallback*)arg;
	int64_t ret_val = Fallback_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Fallback_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKFallback* orig_conv = (LDKFallback*)orig;
	LDKFallback *ret_copy = MALLOC(sizeof(LDKFallback), "LDKFallback");
	*ret_copy = Fallback_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Fallback_1seg_1wit_1program(JNIEnv *env, jclass clz, int8_t version, int8_tArray program) {
	
	LDKCVec_u8Z program_ref;
	program_ref.datalen = (*env)->GetArrayLength(env, program);
	program_ref.data = MALLOC(program_ref.datalen, "LDKCVec_u8Z Bytes");
	(*env)->GetByteArrayRegion(env, program, 0, program_ref.datalen, program_ref.data);
	LDKFallback *ret_copy = MALLOC(sizeof(LDKFallback), "LDKFallback");
	*ret_copy = Fallback_seg_wit_program((LDKu5){ ._0 = version }, program_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Fallback_1pub_1key_1hash(JNIEnv *env, jclass clz, int8_tArray a) {
	LDKTwentyBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 20);
	(*env)->GetByteArrayRegion(env, a, 0, 20, a_ref.data);
	LDKFallback *ret_copy = MALLOC(sizeof(LDKFallback), "LDKFallback");
	*ret_copy = Fallback_pub_key_hash(a_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Fallback_1script_1hash(JNIEnv *env, jclass clz, int8_tArray a) {
	LDKTwentyBytes a_ref;
	CHECK((*env)->GetArrayLength(env, a) == 20);
	(*env)->GetByteArrayRegion(env, a, 0, 20, a_ref.data);
	LDKFallback *ret_copy = MALLOC(sizeof(LDKFallback), "LDKFallback");
	*ret_copy = Fallback_script_hash(a_ref);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Fallback_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKFallback* o_conv = (LDKFallback*)o;
	int64_t ret_val = Fallback_hash(o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Fallback_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKFallback* a_conv = (LDKFallback*)a;
	LDKFallback* b_conv = (LDKFallback*)b;
	jboolean ret_val = Fallback_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InvoiceSignature_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInvoiceSignature this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	InvoiceSignature_free(this_obj_conv);
}

static inline uintptr_t InvoiceSignature_clone_ptr(LDKInvoiceSignature *NONNULL_PTR arg) {
	LDKInvoiceSignature ret_var = InvoiceSignature_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoiceSignature_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKInvoiceSignature arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = InvoiceSignature_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoiceSignature_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKInvoiceSignature orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKInvoiceSignature ret_var = InvoiceSignature_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_InvoiceSignature_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKInvoiceSignature a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKInvoiceSignature b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = InvoiceSignature_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PrivateRoute_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKPrivateRoute this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	PrivateRoute_free(this_obj_conv);
}

static inline uintptr_t PrivateRoute_clone_ptr(LDKPrivateRoute *NONNULL_PTR arg) {
	LDKPrivateRoute ret_var = PrivateRoute_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PrivateRoute_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPrivateRoute arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = PrivateRoute_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PrivateRoute_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPrivateRoute orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKPrivateRoute ret_var = PrivateRoute_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PrivateRoute_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKPrivateRoute o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = PrivateRoute_hash(&o_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_PrivateRoute_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKPrivateRoute a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKPrivateRoute b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = PrivateRoute_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1into_1parts(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKSignedRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = (this_arg & 1) || (this_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	this_arg_conv = SignedRawInvoice_clone(&this_arg_conv);
	LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ* ret_conv = MALLOC(sizeof(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ), "LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ");
	*ret_conv = SignedRawInvoice_into_parts(this_arg_conv);
	return ((uintptr_t)ret_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1raw_1invoice(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKSignedRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKRawInvoice ret_var = SignedRawInvoice_raw_invoice(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1hash(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKSignedRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *SignedRawInvoice_hash(&this_arg_conv));
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1signature(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKSignedRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKInvoiceSignature ret_var = SignedRawInvoice_signature(&this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1recover_1payee_1pub_1key(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKSignedRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCResult_PayeePubKeyErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PayeePubKeyErrorZ), "LDKCResult_PayeePubKeyErrorZ");
	*ret_conv = SignedRawInvoice_recover_payee_pub_key(&this_arg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1check_1signature(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKSignedRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = SignedRawInvoice_check_signature(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RawInvoice_1hash(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, RawInvoice_hash(&this_arg_conv).data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1payment_1hash(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKSha256 ret_var = RawInvoice_payment_hash(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1description(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKDescription ret_var = RawInvoice_description(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1payee_1pub_1key(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPayeePubKey ret_var = RawInvoice_payee_pub_key(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1description_1hash(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKSha256 ret_var = RawInvoice_description_hash(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1expiry_1time(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKExpiryTime ret_var = RawInvoice_expiry_time(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1min_1final_1cltv_1expiry(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKMinFinalCltvExpiry ret_var = RawInvoice_min_final_cltv_expiry(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_RawInvoice_1payment_1secret(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, RawInvoice_payment_secret(&this_arg_conv).data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1features(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKInvoiceFeatures ret_var = RawInvoice_features(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_RawInvoice_1private_1routes(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_PrivateRouteZ ret_var = RawInvoice_private_routes(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t o = 0; o < ret_var.datalen; o++) {
		LDKPrivateRoute ret_conv_14_var = ret_var.data[o];
		uintptr_t ret_conv_14_ref = 0;
		CHECK((((uintptr_t)ret_conv_14_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_14_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_14_var);
		ret_conv_14_ref = (uintptr_t)ret_conv_14_var.inner;
		if (ret_conv_14_var.is_owned) {
			ret_conv_14_ref |= 1;
		}
		ret_arr_ptr[o] = ret_conv_14_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RawInvoice_1amount_1pico_1btc(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = RawInvoice_amount_pico_btc(&this_arg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_RawInvoice_1currency(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKRawInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jclass ret_conv = LDKCurrency_to_java(env, RawInvoice_currency(&this_arg_conv));
	return ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1from_1unix_1timestamp(JNIEnv *env, jclass clz, int64_t unix_seconds) {
	LDKCResult_PositiveTimestampCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PositiveTimestampCreationErrorZ), "LDKCResult_PositiveTimestampCreationErrorZ");
	*ret_conv = PositiveTimestamp_from_unix_timestamp(unix_seconds);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1from_1system_1time(JNIEnv *env, jclass clz, int64_t time) {
	LDKCResult_PositiveTimestampCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PositiveTimestampCreationErrorZ), "LDKCResult_PositiveTimestampCreationErrorZ");
	*ret_conv = PositiveTimestamp_from_system_time(time);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1from_1duration_1since_1epoch(JNIEnv *env, jclass clz, int64_t duration) {
	LDKCResult_PositiveTimestampCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PositiveTimestampCreationErrorZ), "LDKCResult_PositiveTimestampCreationErrorZ");
	*ret_conv = PositiveTimestamp_from_duration_since_epoch(duration);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1as_1unix_1timestamp(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPositiveTimestamp this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = PositiveTimestamp_as_unix_timestamp(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1as_1duration_1since_1epoch(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPositiveTimestamp this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = PositiveTimestamp_as_duration_since_epoch(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PositiveTimestamp_1as_1time(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPositiveTimestamp this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = PositiveTimestamp_as_time(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1into_1signed_1raw(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = (this_arg & 1) || (this_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	this_arg_conv = Invoice_clone(&this_arg_conv);
	LDKSignedRawInvoice ret_var = Invoice_into_signed_raw(this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1check_1signature(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCResult_NoneSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_NoneSemanticErrorZ), "LDKCResult_NoneSemanticErrorZ");
	*ret_conv = Invoice_check_signature(&this_arg_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1from_1signed(JNIEnv *env, jclass clz, int64_t signed_invoice) {
	LDKSignedRawInvoice signed_invoice_conv;
	signed_invoice_conv.inner = (void*)(signed_invoice & (~1));
	signed_invoice_conv.is_owned = (signed_invoice & 1) || (signed_invoice == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(signed_invoice_conv);
	signed_invoice_conv = SignedRawInvoice_clone(&signed_invoice_conv);
	LDKCResult_InvoiceSemanticErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSemanticErrorZ), "LDKCResult_InvoiceSemanticErrorZ");
	*ret_conv = Invoice_from_signed(signed_invoice_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1timestamp(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = Invoice_timestamp(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1duration_1since_1epoch(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = Invoice_duration_since_epoch(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Invoice_1payment_1hash(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *Invoice_payment_hash(&this_arg_conv));
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Invoice_1payee_1pub_1key(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, Invoice_payee_pub_key(&this_arg_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Invoice_1payment_1secret(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 32);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 32, *Invoice_payment_secret(&this_arg_conv));
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1features(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKInvoiceFeatures ret_var = Invoice_features(&this_arg_conv);
	uintptr_t ret_ref = 0;
	if ((uintptr_t)ret_var.inner > 4096) {
		CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
		ret_ref = (uintptr_t)ret_var.inner;
		if (ret_var.is_owned) {
			ret_ref |= 1;
		}
	}
	return ret_ref;
}

JNIEXPORT int8_tArray JNICALL Java_org_ldk_impl_bindings_Invoice_1recover_1payee_1pub_1key(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int8_tArray ret_arr = (*env)->NewByteArray(env, 33);
	(*env)->SetByteArrayRegion(env, ret_arr, 0, 33, Invoice_recover_payee_pub_key(&this_arg_conv).compressed_form);
	return ret_arr;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1expiry_1time(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = Invoice_expiry_time(&this_arg_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Invoice_1is_1expired(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = Invoice_is_expired(&this_arg_conv);
	return ret_val;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_Invoice_1would_1expire(JNIEnv *env, jclass clz, int64_t this_arg, int64_t at_time) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jboolean ret_val = Invoice_would_expire(&this_arg_conv, at_time);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1min_1final_1cltv_1expiry(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = Invoice_min_final_cltv_expiry(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_Invoice_1private_1routes(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_PrivateRouteZ ret_var = Invoice_private_routes(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t o = 0; o < ret_var.datalen; o++) {
		LDKPrivateRoute ret_conv_14_var = ret_var.data[o];
		uintptr_t ret_conv_14_ref = 0;
		CHECK((((uintptr_t)ret_conv_14_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_14_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_14_var);
		ret_conv_14_ref = (uintptr_t)ret_conv_14_var.inner;
		if (ret_conv_14_var.is_owned) {
			ret_conv_14_ref |= 1;
		}
		ret_arr_ptr[o] = ret_conv_14_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT int64_tArray JNICALL Java_org_ldk_impl_bindings_Invoice_1route_1hints(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCVec_RouteHintZ ret_var = Invoice_route_hints(&this_arg_conv);
	int64_tArray ret_arr = NULL;
	ret_arr = (*env)->NewLongArray(env, ret_var.datalen);
	int64_t *ret_arr_ptr = (*env)->GetPrimitiveArrayCritical(env, ret_arr, NULL);
	for (size_t l = 0; l < ret_var.datalen; l++) {
		LDKRouteHint ret_conv_11_var = ret_var.data[l];
		uintptr_t ret_conv_11_ref = 0;
		CHECK((((uintptr_t)ret_conv_11_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
		CHECK((((uintptr_t)&ret_conv_11_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
		CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_conv_11_var);
		ret_conv_11_ref = (uintptr_t)ret_conv_11_var.inner;
		if (ret_conv_11_var.is_owned) {
			ret_conv_11_ref |= 1;
		}
		ret_arr_ptr[l] = ret_conv_11_ref;
	}
	(*env)->ReleasePrimitiveArrayCritical(env, ret_arr, ret_arr_ptr, 0);
	FREE(ret_var.data);
	return ret_arr;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_Invoice_1currency(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	jclass ret_conv = LDKCurrency_to_java(env, Invoice_currency(&this_arg_conv));
	return ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1amount_1milli_1satoshis(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoice this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKCOption_u64Z *ret_copy = MALLOC(sizeof(LDKCOption_u64Z), "LDKCOption_u64Z");
	*ret_copy = Invoice_amount_milli_satoshis(&this_arg_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Description_1new(JNIEnv *env, jclass clz, jstring description) {
	LDKStr description_conv = java_to_owned_str(env, description);
	LDKCResult_DescriptionCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_DescriptionCreationErrorZ), "LDKCResult_DescriptionCreationErrorZ");
	*ret_conv = Description_new(description_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_Description_1into_1inner(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDescription this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = (this_arg & 1) || (this_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	this_arg_conv = Description_clone(&this_arg_conv);
	LDKStr ret_str = Description_into_inner(this_arg_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1from_1seconds(JNIEnv *env, jclass clz, int64_t seconds) {
	LDKExpiryTime ret_var = ExpiryTime_from_seconds(seconds);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1from_1duration(JNIEnv *env, jclass clz, int64_t duration) {
	LDKExpiryTime ret_var = ExpiryTime_from_duration(duration);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1as_1seconds(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKExpiryTime this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = ExpiryTime_as_seconds(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ExpiryTime_1as_1duration(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKExpiryTime this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	int64_t ret_val = ExpiryTime_as_duration(&this_arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PrivateRoute_1new(JNIEnv *env, jclass clz, int64_t hops) {
	LDKRouteHint hops_conv;
	hops_conv.inner = (void*)(hops & (~1));
	hops_conv.is_owned = (hops & 1) || (hops == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(hops_conv);
	hops_conv = RouteHint_clone(&hops_conv);
	LDKCResult_PrivateRouteCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PrivateRouteCreationErrorZ), "LDKCResult_PrivateRouteCreationErrorZ");
	*ret_conv = PrivateRoute_new(hops_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PrivateRoute_1into_1inner(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKPrivateRoute this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = (this_arg & 1) || (this_arg == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	this_arg_conv = PrivateRoute_clone(&this_arg_conv);
	LDKRouteHint ret_var = PrivateRoute_into_inner(this_arg_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CreationError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKCreationError* orig_conv = (LDKCreationError*)(orig & ~1);
	jclass ret_conv = LDKCreationError_to_java(env, CreationError_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CreationError_1description_1too_1long(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCreationError_to_java(env, CreationError_description_too_long());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CreationError_1route_1too_1long(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCreationError_to_java(env, CreationError_route_too_long());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CreationError_1timestamp_1out_1of_1bounds(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCreationError_to_java(env, CreationError_timestamp_out_of_bounds());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CreationError_1invalid_1amount(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCreationError_to_java(env, CreationError_invalid_amount());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_CreationError_1missing_1route_1hints(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKCreationError_to_java(env, CreationError_missing_route_hints());
	return ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_CreationError_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKCreationError* a_conv = (LDKCreationError*)(a & ~1);
	LDKCreationError* b_conv = (LDKCreationError*)(b & ~1);
	jboolean ret_val = CreationError_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_CreationError_1to_1str(JNIEnv *env, jclass clz, int64_t o) {
	LDKCreationError* o_conv = (LDKCreationError*)(o & ~1);
	LDKStr ret_str = CreationError_to_str(o_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKSemanticError* orig_conv = (LDKSemanticError*)(orig & ~1);
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_clone(orig_conv));
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1no_1payment_1hash(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_no_payment_hash());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1multiple_1payment_1hashes(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_multiple_payment_hashes());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1no_1description(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_no_description());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1multiple_1descriptions(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_multiple_descriptions());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1no_1payment_1secret(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_no_payment_secret());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1multiple_1payment_1secrets(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_multiple_payment_secrets());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1invalid_1features(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_invalid_features());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1invalid_1recovery_1id(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_invalid_recovery_id());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1invalid_1signature(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_invalid_signature());
	return ret_conv;
}

JNIEXPORT jclass JNICALL Java_org_ldk_impl_bindings_SemanticError_1imprecise_1amount(JNIEnv *env, jclass clz) {
	jclass ret_conv = LDKSemanticError_to_java(env, SemanticError_imprecise_amount());
	return ret_conv;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_SemanticError_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKSemanticError* a_conv = (LDKSemanticError*)(a & ~1);
	LDKSemanticError* b_conv = (LDKSemanticError*)(b & ~1);
	jboolean ret_val = SemanticError_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_SemanticError_1to_1str(JNIEnv *env, jclass clz, int64_t o) {
	LDKSemanticError* o_conv = (LDKSemanticError*)(o & ~1);
	LDKStr ret_str = SemanticError_to_str(o_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_SignOrCreationError_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKSignOrCreationError this_ptr_conv = *(LDKSignOrCreationError*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	SignOrCreationError_free(this_ptr_conv);
}

static inline uintptr_t SignOrCreationError_clone_ptr(LDKSignOrCreationError *NONNULL_PTR arg) {
	LDKSignOrCreationError *ret_copy = MALLOC(sizeof(LDKSignOrCreationError), "LDKSignOrCreationError");
	*ret_copy = SignOrCreationError_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignOrCreationError_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKSignOrCreationError* arg_conv = (LDKSignOrCreationError*)arg;
	int64_t ret_val = SignOrCreationError_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignOrCreationError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKSignOrCreationError* orig_conv = (LDKSignOrCreationError*)orig;
	LDKSignOrCreationError *ret_copy = MALLOC(sizeof(LDKSignOrCreationError), "LDKSignOrCreationError");
	*ret_copy = SignOrCreationError_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignOrCreationError_1sign_1error(JNIEnv *env, jclass clz) {
	LDKSignOrCreationError *ret_copy = MALLOC(sizeof(LDKSignOrCreationError), "LDKSignOrCreationError");
	*ret_copy = SignOrCreationError_sign_error();
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignOrCreationError_1creation_1error(JNIEnv *env, jclass clz, jclass a) {
	LDKCreationError a_conv = LDKCreationError_from_java(env, a);
	LDKSignOrCreationError *ret_copy = MALLOC(sizeof(LDKSignOrCreationError), "LDKSignOrCreationError");
	*ret_copy = SignOrCreationError_creation_error(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_SignOrCreationError_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKSignOrCreationError* a_conv = (LDKSignOrCreationError*)a;
	LDKSignOrCreationError* b_conv = (LDKSignOrCreationError*)b;
	jboolean ret_val = SignOrCreationError_eq(a_conv, b_conv);
	return ret_val;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_SignOrCreationError_1to_1str(JNIEnv *env, jclass clz, int64_t o) {
	LDKSignOrCreationError* o_conv = (LDKSignOrCreationError*)o;
	LDKStr ret_str = SignOrCreationError_to_str(o_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InvoicePayer_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKInvoicePayer this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	InvoicePayer_free(this_obj_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Payer_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKPayer this_ptr_conv = *(LDKPayer*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Payer_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_Router_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKRouter this_ptr_conv = *(LDKRouter*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	Router_free(this_ptr_conv);
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKRetryAttempts this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	RetryAttempts_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1get_1a(JNIEnv *env, jclass clz, int64_t this_ptr) {
	LDKRetryAttempts this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	int64_t ret_val = RetryAttempts_get_a(&this_ptr_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1set_1a(JNIEnv *env, jclass clz, int64_t this_ptr, int64_t val) {
	LDKRetryAttempts this_ptr_conv;
	this_ptr_conv.inner = (void*)(this_ptr & (~1));
	this_ptr_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_ptr_conv);
	RetryAttempts_set_a(&this_ptr_conv, val);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1new(JNIEnv *env, jclass clz, int64_t a_arg) {
	LDKRetryAttempts ret_var = RetryAttempts_new(a_arg);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

static inline uintptr_t RetryAttempts_clone_ptr(LDKRetryAttempts *NONNULL_PTR arg) {
	LDKRetryAttempts ret_var = RetryAttempts_clone(arg);
uintptr_t ret_ref = 0;
CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
ret_ref = (uintptr_t)ret_var.inner;
if (ret_var.is_owned) {
	ret_ref |= 1;
}
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKRetryAttempts arg_conv;
	arg_conv.inner = (void*)(arg & (~1));
	arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(arg_conv);
	int64_t ret_val = RetryAttempts_clone_ptr(&arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKRetryAttempts orig_conv;
	orig_conv.inner = (void*)(orig & (~1));
	orig_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(orig_conv);
	LDKRetryAttempts ret_var = RetryAttempts_clone(&orig_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT jboolean JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1eq(JNIEnv *env, jclass clz, int64_t a, int64_t b) {
	LDKRetryAttempts a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	LDKRetryAttempts b_conv;
	b_conv.inner = (void*)(b & (~1));
	b_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(b_conv);
	jboolean ret_val = RetryAttempts_eq(&a_conv, &b_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_RetryAttempts_1hash(JNIEnv *env, jclass clz, int64_t o) {
	LDKRetryAttempts o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	int64_t ret_val = RetryAttempts_hash(&o_conv);
	return ret_val;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_PaymentError_1free(JNIEnv *env, jclass clz, int64_t this_ptr) {
	if ((this_ptr & 1) != 0) return;
	void* this_ptr_ptr = (void*)(((uintptr_t)this_ptr) & ~1);
	CHECK_ACCESS(this_ptr_ptr);
	LDKPaymentError this_ptr_conv = *(LDKPaymentError*)(this_ptr_ptr);
	FREE((void*)this_ptr);
	PaymentError_free(this_ptr_conv);
}

static inline uintptr_t PaymentError_clone_ptr(LDKPaymentError *NONNULL_PTR arg) {
	LDKPaymentError *ret_copy = MALLOC(sizeof(LDKPaymentError), "LDKPaymentError");
	*ret_copy = PaymentError_clone(arg);
uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}
JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentError_1clone_1ptr(JNIEnv *env, jclass clz, int64_t arg) {
	LDKPaymentError* arg_conv = (LDKPaymentError*)arg;
	int64_t ret_val = PaymentError_clone_ptr(arg_conv);
	return ret_val;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentError_1clone(JNIEnv *env, jclass clz, int64_t orig) {
	LDKPaymentError* orig_conv = (LDKPaymentError*)orig;
	LDKPaymentError *ret_copy = MALLOC(sizeof(LDKPaymentError), "LDKPaymentError");
	*ret_copy = PaymentError_clone(orig_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentError_1invoice(JNIEnv *env, jclass clz, jstring a) {
	LDKStr a_conv = java_to_owned_str(env, a);
	LDKPaymentError *ret_copy = MALLOC(sizeof(LDKPaymentError), "LDKPaymentError");
	*ret_copy = PaymentError_invoice(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentError_1routing(JNIEnv *env, jclass clz, int64_t a) {
	LDKLightningError a_conv;
	a_conv.inner = (void*)(a & (~1));
	a_conv.is_owned = (a & 1) || (a == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(a_conv);
	a_conv = LightningError_clone(&a_conv);
	LDKPaymentError *ret_copy = MALLOC(sizeof(LDKPaymentError), "LDKPaymentError");
	*ret_copy = PaymentError_routing(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_PaymentError_1sending(JNIEnv *env, jclass clz, int64_t a) {
	void* a_ptr = (void*)(((uintptr_t)a) & ~1);
	CHECK_ACCESS(a_ptr);
	LDKPaymentSendFailure a_conv = *(LDKPaymentSendFailure*)(a_ptr);
	a_conv = PaymentSendFailure_clone((LDKPaymentSendFailure*)(((uintptr_t)a) & ~1));
	LDKPaymentError *ret_copy = MALLOC(sizeof(LDKPaymentError), "LDKPaymentError");
	*ret_copy = PaymentError_sending(a_conv);
	uintptr_t ret_ref = (uintptr_t)ret_copy;
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoicePayer_1new(JNIEnv *env, jclass clz, int64_t payer, int64_t router, int64_t scorer, int64_t logger, int64_t event_handler, int64_t retry_attempts) {
	void* payer_ptr = (void*)(((uintptr_t)payer) & ~1);
	CHECK_ACCESS(payer_ptr);
	LDKPayer payer_conv = *(LDKPayer*)(payer_ptr);
	if (payer_conv.free == LDKPayer_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKPayer_JCalls_cloned(&payer_conv);
	}
	void* router_ptr = (void*)(((uintptr_t)router) & ~1);
	CHECK_ACCESS(router_ptr);
	LDKRouter router_conv = *(LDKRouter*)(router_ptr);
	if (router_conv.free == LDKRouter_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKRouter_JCalls_cloned(&router_conv);
	}
	LDKMultiThreadedLockableScore scorer_conv;
	scorer_conv.inner = (void*)(scorer & (~1));
	scorer_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(scorer_conv);
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	void* event_handler_ptr = (void*)(((uintptr_t)event_handler) & ~1);
	CHECK_ACCESS(event_handler_ptr);
	LDKEventHandler event_handler_conv = *(LDKEventHandler*)(event_handler_ptr);
	if (event_handler_conv.free == LDKEventHandler_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKEventHandler_JCalls_cloned(&event_handler_conv);
	}
	LDKRetryAttempts retry_attempts_conv;
	retry_attempts_conv.inner = (void*)(retry_attempts & (~1));
	retry_attempts_conv.is_owned = (retry_attempts & 1) || (retry_attempts == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(retry_attempts_conv);
	retry_attempts_conv = RetryAttempts_clone(&retry_attempts_conv);
	LDKInvoicePayer ret_var = InvoicePayer_new(payer_conv, router_conv, &scorer_conv, logger_conv, event_handler_conv, retry_attempts_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoicePayer_1pay_1invoice(JNIEnv *env, jclass clz, int64_t this_arg, int64_t invoice) {
	LDKInvoicePayer this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKInvoice invoice_conv;
	invoice_conv.inner = (void*)(invoice & (~1));
	invoice_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(invoice_conv);
	LDKCResult_PaymentIdPaymentErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentErrorZ), "LDKCResult_PaymentIdPaymentErrorZ");
	*ret_conv = InvoicePayer_pay_invoice(&this_arg_conv, &invoice_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoicePayer_1pay_1zero_1value_1invoice(JNIEnv *env, jclass clz, int64_t this_arg, int64_t invoice, int64_t amount_msats) {
	LDKInvoicePayer this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKInvoice invoice_conv;
	invoice_conv.inner = (void*)(invoice & (~1));
	invoice_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(invoice_conv);
	LDKCResult_PaymentIdPaymentErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentErrorZ), "LDKCResult_PaymentIdPaymentErrorZ");
	*ret_conv = InvoicePayer_pay_zero_value_invoice(&this_arg_conv, &invoice_conv, amount_msats);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoicePayer_1pay_1pubkey(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray pubkey, int8_tArray payment_preimage, int64_t amount_msats, int32_t final_cltv_expiry_delta) {
	LDKInvoicePayer this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPublicKey pubkey_ref;
	CHECK((*env)->GetArrayLength(env, pubkey) == 33);
	(*env)->GetByteArrayRegion(env, pubkey, 0, 33, pubkey_ref.compressed_form);
	LDKThirtyTwoBytes payment_preimage_ref;
	CHECK((*env)->GetArrayLength(env, payment_preimage) == 32);
	(*env)->GetByteArrayRegion(env, payment_preimage, 0, 32, payment_preimage_ref.data);
	LDKCResult_PaymentIdPaymentErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_PaymentIdPaymentErrorZ), "LDKCResult_PaymentIdPaymentErrorZ");
	*ret_conv = InvoicePayer_pay_pubkey(&this_arg_conv, pubkey_ref, payment_preimage_ref, amount_msats, final_cltv_expiry_delta);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_InvoicePayer_1remove_1cached_1payment(JNIEnv *env, jclass clz, int64_t this_arg, int8_tArray payment_hash) {
	LDKInvoicePayer this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	unsigned char payment_hash_arr[32];
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_arr);
	unsigned char (*payment_hash_ref)[32] = &payment_hash_arr;
	InvoicePayer_remove_cached_payment(&this_arg_conv, payment_hash_ref);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_InvoicePayer_1as_1EventHandler(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKInvoicePayer this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKEventHandler* ret_ret = MALLOC(sizeof(LDKEventHandler), "LDKEventHandler");
	*ret_ret = InvoicePayer_as_EventHandler(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_create_1phantom_1invoice(JNIEnv *env, jclass clz, int64_t amt_msat, jstring description, int8_tArray payment_hash, int8_tArray payment_secret, int64_tArray phantom_route_hints, int64_t keys_manager, jclass network) {
	void* amt_msat_ptr = (void*)(((uintptr_t)amt_msat) & ~1);
	CHECK_ACCESS(amt_msat_ptr);
	LDKCOption_u64Z amt_msat_conv = *(LDKCOption_u64Z*)(amt_msat_ptr);
	amt_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)amt_msat) & ~1));
	LDKStr description_conv = java_to_owned_str(env, description);
	LDKThirtyTwoBytes payment_hash_ref;
	CHECK((*env)->GetArrayLength(env, payment_hash) == 32);
	(*env)->GetByteArrayRegion(env, payment_hash, 0, 32, payment_hash_ref.data);
	LDKThirtyTwoBytes payment_secret_ref;
	CHECK((*env)->GetArrayLength(env, payment_secret) == 32);
	(*env)->GetByteArrayRegion(env, payment_secret, 0, 32, payment_secret_ref.data);
	LDKCVec_PhantomRouteHintsZ phantom_route_hints_constr;
	phantom_route_hints_constr.datalen = (*env)->GetArrayLength(env, phantom_route_hints);
	if (phantom_route_hints_constr.datalen > 0)
		phantom_route_hints_constr.data = MALLOC(phantom_route_hints_constr.datalen * sizeof(LDKPhantomRouteHints), "LDKCVec_PhantomRouteHintsZ Elements");
	else
		phantom_route_hints_constr.data = NULL;
	int64_t* phantom_route_hints_vals = (*env)->GetLongArrayElements (env, phantom_route_hints, NULL);
	for (size_t t = 0; t < phantom_route_hints_constr.datalen; t++) {
		int64_t phantom_route_hints_conv_19 = phantom_route_hints_vals[t];
		LDKPhantomRouteHints phantom_route_hints_conv_19_conv;
		phantom_route_hints_conv_19_conv.inner = (void*)(phantom_route_hints_conv_19 & (~1));
		phantom_route_hints_conv_19_conv.is_owned = (phantom_route_hints_conv_19 & 1) || (phantom_route_hints_conv_19 == 0);
		CHECK_INNER_FIELD_ACCESS_OR_NULL(phantom_route_hints_conv_19_conv);
		phantom_route_hints_conv_19_conv = PhantomRouteHints_clone(&phantom_route_hints_conv_19_conv);
		phantom_route_hints_constr.data[t] = phantom_route_hints_conv_19_conv;
	}
	(*env)->ReleaseLongArrayElements(env, phantom_route_hints, phantom_route_hints_vals, 0);
	void* keys_manager_ptr = (void*)(((uintptr_t)keys_manager) & ~1);
	CHECK_ACCESS(keys_manager_ptr);
	LDKKeysInterface keys_manager_conv = *(LDKKeysInterface*)(keys_manager_ptr);
	if (keys_manager_conv.free == LDKKeysInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKKeysInterface_JCalls_cloned(&keys_manager_conv);
	}
	LDKCurrency network_conv = LDKCurrency_from_java(env, network);
	LDKCResult_InvoiceSignOrCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSignOrCreationErrorZ), "LDKCResult_InvoiceSignOrCreationErrorZ");
	*ret_conv = create_phantom_invoice(amt_msat_conv, description_conv, payment_hash_ref, payment_secret_ref, phantom_route_hints_constr, keys_manager_conv, network_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_create_1invoice_1from_1channelmanager(JNIEnv *env, jclass clz, int64_t channelmanager, int64_t keys_manager, jclass network, int64_t amt_msat, jstring description) {
	LDKChannelManager channelmanager_conv;
	channelmanager_conv.inner = (void*)(channelmanager & (~1));
	channelmanager_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channelmanager_conv);
	void* keys_manager_ptr = (void*)(((uintptr_t)keys_manager) & ~1);
	CHECK_ACCESS(keys_manager_ptr);
	LDKKeysInterface keys_manager_conv = *(LDKKeysInterface*)(keys_manager_ptr);
	if (keys_manager_conv.free == LDKKeysInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKKeysInterface_JCalls_cloned(&keys_manager_conv);
	}
	LDKCurrency network_conv = LDKCurrency_from_java(env, network);
	void* amt_msat_ptr = (void*)(((uintptr_t)amt_msat) & ~1);
	CHECK_ACCESS(amt_msat_ptr);
	LDKCOption_u64Z amt_msat_conv = *(LDKCOption_u64Z*)(amt_msat_ptr);
	amt_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)amt_msat) & ~1));
	LDKStr description_conv = java_to_owned_str(env, description);
	LDKCResult_InvoiceSignOrCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSignOrCreationErrorZ), "LDKCResult_InvoiceSignOrCreationErrorZ");
	*ret_conv = create_invoice_from_channelmanager(&channelmanager_conv, keys_manager_conv, network_conv, amt_msat_conv, description_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_create_1invoice_1from_1channelmanager_1and_1duration_1since_1epoch(JNIEnv *env, jclass clz, int64_t channelmanager, int64_t keys_manager, jclass network, int64_t amt_msat, jstring description, int64_t duration_since_epoch) {
	LDKChannelManager channelmanager_conv;
	channelmanager_conv.inner = (void*)(channelmanager & (~1));
	channelmanager_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(channelmanager_conv);
	void* keys_manager_ptr = (void*)(((uintptr_t)keys_manager) & ~1);
	CHECK_ACCESS(keys_manager_ptr);
	LDKKeysInterface keys_manager_conv = *(LDKKeysInterface*)(keys_manager_ptr);
	if (keys_manager_conv.free == LDKKeysInterface_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKKeysInterface_JCalls_cloned(&keys_manager_conv);
	}
	LDKCurrency network_conv = LDKCurrency_from_java(env, network);
	void* amt_msat_ptr = (void*)(((uintptr_t)amt_msat) & ~1);
	CHECK_ACCESS(amt_msat_ptr);
	LDKCOption_u64Z amt_msat_conv = *(LDKCOption_u64Z*)(amt_msat_ptr);
	amt_msat_conv = COption_u64Z_clone((LDKCOption_u64Z*)(((uintptr_t)amt_msat) & ~1));
	LDKStr description_conv = java_to_owned_str(env, description);
	LDKCResult_InvoiceSignOrCreationErrorZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceSignOrCreationErrorZ), "LDKCResult_InvoiceSignOrCreationErrorZ");
	*ret_conv = create_invoice_from_channelmanager_and_duration_since_epoch(&channelmanager_conv, keys_manager_conv, network_conv, amt_msat_conv, description_conv, duration_since_epoch);
	return (uintptr_t)ret_conv;
}

JNIEXPORT void JNICALL Java_org_ldk_impl_bindings_DefaultRouter_1free(JNIEnv *env, jclass clz, int64_t this_obj) {
	LDKDefaultRouter this_obj_conv;
	this_obj_conv.inner = (void*)(this_obj & (~1));
	this_obj_conv.is_owned = (this_obj & 1) || (this_obj == 0);
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_obj_conv);
	DefaultRouter_free(this_obj_conv);
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DefaultRouter_1new(JNIEnv *env, jclass clz, int64_t network_graph, int64_t logger) {
	LDKNetworkGraph network_graph_conv;
	network_graph_conv.inner = (void*)(network_graph & (~1));
	network_graph_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(network_graph_conv);
	void* logger_ptr = (void*)(((uintptr_t)logger) & ~1);
	CHECK_ACCESS(logger_ptr);
	LDKLogger logger_conv = *(LDKLogger*)(logger_ptr);
	if (logger_conv.free == LDKLogger_JCalls_free) {
		// If this_arg is a JCalls struct, then we need to increment the refcnt in it.
		LDKLogger_JCalls_cloned(&logger_conv);
	}
	LDKDefaultRouter ret_var = DefaultRouter_new(&network_graph_conv, logger_conv);
	uintptr_t ret_ref = 0;
	CHECK((((uintptr_t)ret_var.inner) & 1) == 0); // We rely on a free low bit, malloc guarantees this.
	CHECK((((uintptr_t)&ret_var) & 1) == 0); // We rely on a free low bit, pointer alignment guarantees this.
	CHECK_INNER_FIELD_ACCESS_OR_NULL(ret_var);
	ret_ref = (uintptr_t)ret_var.inner;
	if (ret_var.is_owned) {
		ret_ref |= 1;
	}
	return ret_ref;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_DefaultRouter_1as_1Router(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKDefaultRouter this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKRouter* ret_ret = MALLOC(sizeof(LDKRouter), "LDKRouter");
	*ret_ret = DefaultRouter_as_Router(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_ChannelManager_1as_1Payer(JNIEnv *env, jclass clz, int64_t this_arg) {
	LDKChannelManager this_arg_conv;
	this_arg_conv.inner = (void*)(this_arg & (~1));
	this_arg_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(this_arg_conv);
	LDKPayer* ret_ret = MALLOC(sizeof(LDKPayer), "LDKPayer");
	*ret_ret = ChannelManager_as_Payer(&this_arg_conv);
	return (uintptr_t)ret_ret;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SiPrefix_1from_1str(JNIEnv *env, jclass clz, jstring s) {
	LDKStr s_conv = java_to_owned_str(env, s);
	LDKCResult_SiPrefixNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SiPrefixNoneZ), "LDKCResult_SiPrefixNoneZ");
	*ret_conv = SiPrefix_from_str(s_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_Invoice_1from_1str(JNIEnv *env, jclass clz, jstring s) {
	LDKStr s_conv = java_to_owned_str(env, s);
	LDKCResult_InvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_InvoiceNoneZ), "LDKCResult_InvoiceNoneZ");
	*ret_conv = Invoice_from_str(s_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT int64_t JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1from_1str(JNIEnv *env, jclass clz, jstring s) {
	LDKStr s_conv = java_to_owned_str(env, s);
	LDKCResult_SignedRawInvoiceNoneZ* ret_conv = MALLOC(sizeof(LDKCResult_SignedRawInvoiceNoneZ), "LDKCResult_SignedRawInvoiceNoneZ");
	*ret_conv = SignedRawInvoice_from_str(s_conv);
	return (uintptr_t)ret_conv;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_Invoice_1to_1str(JNIEnv *env, jclass clz, int64_t o) {
	LDKInvoice o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	LDKStr ret_str = Invoice_to_str(&o_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_SignedRawInvoice_1to_1str(JNIEnv *env, jclass clz, int64_t o) {
	LDKSignedRawInvoice o_conv;
	o_conv.inner = (void*)(o & (~1));
	o_conv.is_owned = false;
	CHECK_INNER_FIELD_ACCESS_OR_NULL(o_conv);
	LDKStr ret_str = SignedRawInvoice_to_str(&o_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_Currency_1to_1str(JNIEnv *env, jclass clz, int64_t o) {
	LDKCurrency* o_conv = (LDKCurrency*)(o & ~1);
	LDKStr ret_str = Currency_to_str(o_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

JNIEXPORT jstring JNICALL Java_org_ldk_impl_bindings_SiPrefix_1to_1str(JNIEnv *env, jclass clz, int64_t o) {
	LDKSiPrefix* o_conv = (LDKSiPrefix*)(o & ~1);
	LDKStr ret_str = SiPrefix_to_str(o_conv);
	jstring ret_conv = str_ref_to_java(env, ret_str.chars, ret_str.len);
	Str_free(ret_str);
	return ret_conv;
}

